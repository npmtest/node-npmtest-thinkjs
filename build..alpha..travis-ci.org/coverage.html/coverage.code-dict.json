{"/home/travis/build/npmtest/node-npmtest-thinkjs/test.js":"/* istanbul instrument in package npmtest_thinkjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-thinkjs/lib.npmtest_thinkjs.js":"/* istanbul instrument in package npmtest_thinkjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_thinkjs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_thinkjs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-thinkjs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-thinkjs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_thinkjs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_thinkjs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_thinkjs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_thinkjs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_thinkjs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_thinkjs.__dirname + '/lib.npmtest_thinkjs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/index.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _auto_reload = require('./util/auto_reload.js');\n\nvar _auto_reload2 = _interopRequireDefault(_auto_reload);\n\nvar _watch_compile = require('./util/watch_compile.js');\n\nvar _watch_compile2 = _interopRequireDefault(_watch_compile);\n\nvar _checker = require('./util/checker.js');\n\nvar _checker2 = _interopRequireDefault(_checker);\n\nrequire('./core/think.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//rewrite promise, bluebird is much faster\nrequire('babel-runtime/core-js/promise').default = require('bluebird');\nglobal.Promise = require('bluebird');\n\nvar _class = function () {\n  /**\n   * init\n   * @param  {Object} options [project options]\n   * @return {}         []\n   */\n  function _class() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _classCallCheck3.default)(this, _class);\n\n    //extend options to think\n    think.extend(think, this.getPath(), options);\n\n    //normalize path\n    think.APP_PATH = _path2.default.normalize(think.APP_PATH);\n    think.ROOT_PATH = _path2.default.normalize(think.ROOT_PATH);\n    think.RESOURCE_PATH = _path2.default.normalize(think.RESOURCE_PATH);\n    think.RUNTIME_PATH = _path2.default.normalize(think.RUNTIME_PATH);\n\n    //parse data from process arguments\n    var i = 2;\n    var argv = process.argv[i];\n    //get app mode from argv\n    if (argv === 'production' || argv === 'development' || argv === 'testing') {\n      think.env = argv;\n      i++;\n    }\n    argv = process.argv[i];\n    //get port or cli url from argv\n    if (argv) {\n      if (/^\\d+$/.test(argv)) {\n        think.port = argv;\n      } else {\n        think.cli = argv;\n      }\n    }\n    //get app mode\n    think.mode = this.getMode();\n  }\n  /**\n   * get app mode\n   * @return {Number} [app mode]\n   */\n\n\n  _class.prototype.getMode = function getMode() {\n    var filepath = think.APP_PATH + '/' + think.dirname.controller;\n    if (think.isDir(filepath)) {\n      return think.mode_normal;\n    }\n    return think.mode_module;\n  };\n  /**\n   * get app path\n   * @return {Object} []\n   */\n\n\n  _class.prototype.getPath = function getPath() {\n    var filepath = process.argv[1];\n    var RESOURCE_PATH = _path2.default.dirname(filepath);\n    var ROOT_PATH = _path2.default.dirname(RESOURCE_PATH);\n    var APP_PATH = '' + ROOT_PATH + think.sep + 'app';\n    var RUNTIME_PATH = ROOT_PATH + think.sep + think.dirname.runtime;\n    return {\n      APP_PATH: APP_PATH,\n      RESOURCE_PATH: RESOURCE_PATH,\n      ROOT_PATH: ROOT_PATH,\n      RUNTIME_PATH: RUNTIME_PATH\n    };\n  };\n  /**\n   * check node env\n   * @return {Boolean} []\n   */\n\n\n  _class.prototype.checkEnv = function checkEnv() {\n    this.checkNodeVersion();\n  };\n\n  /**\n   * get app module list\n   * @return {} []\n   */\n\n\n  _class.prototype.getModule = function getModule() {\n    //only have default module in mini mode\n    if (think.mode === think.mode_normal) {\n      think.module = [think.config('default_module')];\n      return think.module;\n    }\n    var modulePath = think.APP_PATH;\n    if (!think.isDir(modulePath)) {\n      return [];\n    }\n    var modules = _fs2.default.readdirSync(modulePath);\n    var denyModuleList = think.config('deny_module_list') || [];\n    if (denyModuleList.length > 0) {\n      modules = modules.filter(function (module) {\n        if (module[0] === '.') {\n          return;\n        }\n        if (denyModuleList.indexOf(module) === -1) {\n          return module;\n        }\n      });\n    }\n    think.module = modules;\n    return modules;\n  };\n  /**\n   * load alias\n   * @return {} []\n   */\n\n\n  _class.prototype.loadAlias = function loadAlias() {\n    var aliasPath = think.THINK_LIB_PATH + '/config/sys/alias.js';\n    thinkData.alias = think.safeRequire(aliasPath);\n  };\n  /**\n   * load config\n   * @return {} []\n   */\n\n\n  _class.prototype.loadConfig = function loadConfig() {\n    think.getModuleConfig();\n    //load modules config\n    this.getModule().forEach(function (module) {\n      think.getModuleConfig(module);\n    });\n  };\n\n  /**\n   * load route\n   * @return {} []\n   */\n\n\n  _class.prototype.loadRoute = function loadRoute() {\n    think.route();\n  };\n  /**\n   * load adapter\n   * @return {} []\n   */\n\n\n  _class.prototype.loadAdapter = function loadAdapter() {\n    think.adapter.load();\n  };\n  /**\n   * load middleware\n   * @return {} []\n   */\n\n\n  _class.prototype.loadMiddleware = function loadMiddleware() {\n    var paths = ['' + think.THINK_LIB_PATH + think.sep + 'middleware', '' + think.getPath(undefined, think.dirname.middleware)];\n    think.alias('middleware', paths);\n    //middleware base class\n    think.middleware.base = think.require('middleware_base');\n  };\n  /**\n   * load hook\n   * @return {} []\n   */\n\n\n  _class.prototype.loadHook = function loadHook() {\n    var hookPath = think.THINK_LIB_PATH + '/config/hook.js';\n    thinkData.hook = think.extend({}, think.safeRequire(hookPath));\n\n    var file = think.getPath(undefined, think.dirname.config) + '/hook.js';\n    var data = think.extend({}, think.safeRequire(file));\n    for (var key in data) {\n      think.hook.set(key, data[key]);\n    }\n  };\n  /**\n   * load controller, model, logic, service files\n   * @return {} []\n   */\n\n\n  _class.prototype.loadMVC = function loadMVC() {\n    var types = {\n      model: ['base', 'relation', 'mongo', 'adv'],\n      controller: ['base', 'rest'],\n      logic: ['base'],\n      service: ['base']\n    };\n\n    var _loop = function _loop(itemType) {\n      think.alias(itemType, '' + think.THINK_LIB_PATH + think.sep + itemType);\n      types[itemType].forEach(function (item) {\n        think[itemType][item] = think.require(itemType + '_' + item);\n      });\n      think.module.forEach(function (module) {\n        var moduleType = module + '/' + itemType; //can not use think.sep\n        var filepath = think.getPath(module, think.dirname[itemType]);\n        think.alias(moduleType, filepath, true);\n      });\n    };\n\n    for (var itemType in types) {\n      _loop(itemType);\n    }\n  };\n  /**\n   * load sub controller\n   * @return {} []\n   */\n\n\n  _class.prototype.loadSubController = function loadSubController() {\n    think.module.forEach(function (module) {\n      var filepath = think.getPath(module, think.dirname.controller);\n      var subControllers = think.getFiles(filepath).filter(function (item) {\n        if (item.indexOf(think.sep) === -1) {\n          return;\n        }\n        if (_path2.default.extname(item) !== '.js') {\n          return;\n        }\n        return true;\n      }).map(function (item) {\n        return item.slice(0, -3).replace(/\\\\/g, '/');\n      }).sort(function (a, b) {\n        var al = a.split('/').length;\n        var bl = b.split('/').length;\n        if (al === bl) {\n          return a < b ? 1 : -1;\n        }\n        return al < bl ? 1 : -1;\n      });\n      if (subControllers.length) {\n        thinkData.subController[module] = subControllers;\n      }\n    });\n  };\n  /**\n   * load bootstrap\n   * @return {} []\n   */\n\n\n  _class.prototype.loadBootstrap = function loadBootstrap() {\n    var paths = ['' + think.THINK_LIB_PATH + think.sep + 'bootstrap', think.getPath(think.dirname.common, think.dirname.bootstrap)];\n    paths.forEach(function (item) {\n      if (!think.isDir(item)) {\n        return;\n      }\n      var files = _fs2.default.readdirSync(item);\n\n      //must reload all bootstrap files.\n      if (think.config('auto_reload')) {\n        _auto_reload2.default.rewriteSysModuleLoad();\n        var instance = new _auto_reload2.default(item, function () {});\n        instance.clearFilesCache(files.map(function (file) {\n          return item + think.sep + file;\n        }));\n      }\n\n      files.forEach(function (file) {\n        var extname = _path2.default.extname(file);\n        if (extname !== '.js') {\n          return;\n        }\n        think.safeRequire('' + item + think.sep + file);\n      });\n    });\n  };\n  /**\n   * load template file\n   * add template files to cache\n   * @return {} []\n   */\n\n\n  _class.prototype.loadTemplate = function loadTemplate() {\n    var data = {};\n\n    var add = function add(filepath) {\n      if (!think.isDir(filepath)) {\n        return;\n      }\n      var files = think.getFiles(filepath, true);\n      files.forEach(function (file) {\n        var key = '' + filepath + think.sep + file;\n        data[key] = true;\n      });\n    };\n\n    var _think$config = think.config('view'),\n        root_path = _think$config.root_path;\n\n    if (root_path) {\n      add(_path2.default.normalize(root_path));\n    } else {\n      think.module.forEach(function (module) {\n        add(think.getPath(module, think.dirname.view));\n      });\n    }\n    thinkData.template = data;\n  };\n  /**\n   * load system error message\n   * @return {} []\n   */\n\n\n  _class.prototype.loadError = function loadError() {\n    thinkData.error = think.safeRequire(think.THINK_LIB_PATH + '/config/sys/error.js');\n  };\n  /**\n   * clear all cache for reload\n   * @return {void} []\n   */\n\n\n  _class.prototype.clearData = function clearData() {\n    thinkData.alias = {};\n    thinkData.export = {};\n    thinkData.config = {};\n    thinkData.hook = {};\n    thinkData.template = {};\n    thinkData.middleware = {};\n    thinkData.subController = {};\n    thinkData.route = null;\n  };\n  /**\n   * load all config or modules\n   * @return {} []\n   */\n\n\n  _class.prototype.load = function load() {\n\n    this.loadConfig();\n    this.loadRoute();\n    this.loadAlias();\n    this.loadAdapter();\n    this.loadMiddleware();\n    this.loadMVC();\n    this.loadSubController();\n    this.loadHook();\n    this.loadTemplate();\n    this.loadError();\n    this.loadBootstrap();\n\n    _checker2.default.checkModuleConfig();\n\n    think.toFastProperties(thinkData.alias);\n    think.toFastProperties(thinkData.config);\n    think.toFastProperties(thinkData.hook);\n    think.toFastProperties(thinkData.middleware);\n    think.toFastProperties(thinkData.error);\n    think.toFastProperties(thinkData.template);\n    think.toFastProperties(thinkData.subController);\n\n    //console.log(thinkData.alias)\n    //console.log(eval('%HasFastProperties(thinkData.template)'))\n  };\n  /**\n   * capture error\n   * @return {} []\n   */\n\n\n  _class.prototype.captureError = function captureError() {\n    process.on('uncaughtException', function (err) {\n      var msg = err.message;\n      err = think.error(err, 'port:' + (think.port || think.config('port')));\n      think.log(err);\n      if (msg.indexOf(' EADDRINUSE ') > -1) {\n        process.exit();\n      }\n    });\n    process.removeAllListeners('unhandledRejection');\n    process.on('unhandledRejection', function (err) {\n      if (think.isPrevent(err)) {\n        return;\n      }\n      if (think.config('log_unhandled_promise')) {\n        think.log(err);\n      }\n    });\n  };\n  /**\n   * start\n   * @return {} []\n   */\n\n\n  _class.prototype.start = function start() {\n    _checker2.default.checkNodeVersion();\n    _checker2.default.checkFileName();\n    _checker2.default.checkDependencies();\n\n    this.load();\n    this.captureError();\n    if (think.config('auto_reload')) {\n      this.autoReload();\n    }\n  };\n  /**\n   * auto reload user modified files\n   * @return {} []\n   */\n\n\n  _class.prototype.autoReload = function autoReload() {\n    //it auto reload by watch compile\n    if (this.compileCallback) {\n      return;\n    }\n    var instance = this.getReloadInstance();\n    instance.run();\n  };\n  /**\n   * get auto reload class instance\n   * @param  {String} srcPath []\n   * @return {Object}         []\n   */\n\n\n  _class.prototype.getReloadInstance = function getReloadInstance(srcPath) {\n    var _this = this;\n\n    srcPath = srcPath || think.APP_PATH;\n    _auto_reload2.default.rewriteSysModuleLoad();\n    var instance = new _auto_reload2.default(srcPath, function () {\n      _this.clearData();\n      _this.load();\n    });\n    return instance;\n  };\n  /**\n   * use babel compile code\n   * @return {} []\n   */\n\n\n  _class.prototype.compile = function compile(srcPath, outPath) {\n    var _this2 = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (think.isObject(srcPath)) {\n      options = srcPath;\n      srcPath = '';\n    } else if (srcPath === true) {\n      options = { log: true };\n      srcPath = '';\n    }\n    srcPath = srcPath || '' + think.ROOT_PATH + think.sep + 'src';\n    outPath = outPath || think.APP_PATH;\n\n    if (!think.isDir(srcPath)) {\n      return;\n    }\n    var reloadInstance = this.getReloadInstance(outPath);\n    var _getMode = false;\n    this.compileCallback = function (changedFiles) {\n      if (!_getMode) {\n        _getMode = true;\n        //get app mode\n        think.mode = _this2.getMode();\n      }\n\n      reloadInstance.clearFilesCache(changedFiles);\n    };\n\n    var instance = new _watch_compile2.default(srcPath, outPath, options, this.compileCallback);\n    instance.run();\n\n    think.autoCompile = true;\n\n    this.sourceMapSupport(true);\n  };\n  /**\n   * source map support\n   * @param  {} flag []\n   * @return {}      []\n   */\n\n\n  _class.prototype.sourceMapSupport = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(flag) {\n      var support, options;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return think.npm('source-map-support');\n\n            case 2:\n              support = _context.sent;\n              options = {\n                environment: 'node',\n                emptyCacheBetweenOperations: flag\n              };\n              return _context.abrupt('return', support.install(options));\n\n            case 5:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function sourceMapSupport(_x3) {\n      return _ref.apply(this, arguments);\n    }\n\n    return sourceMapSupport;\n  }();\n  /**\n   * pre require\n   * @return {} []\n   */\n\n\n  _class.prototype.preload = function preload() {\n    var startTime = Date.now();\n    for (var name in thinkData.alias) {\n      think.require(thinkData.alias[name]);\n    }\n    //think.log('preload packages finished', 'PRELOAD', startTime);\n  };\n  /**\n   * run\n   * @return {} []\n   */\n\n\n  _class.prototype.run = function run(preload) {\n    this.start();\n    if (preload) {\n      this.preload();\n    }\n    return think.require('app').run();\n  };\n  /**\n   * load, convenient for plugins\n   * @return {} []\n   */\n\n\n  _class.load = function load(options) {\n    var instance = new this(options);\n    instance.load();\n  };\n\n  return _class;\n}();\n\nexports.default = _class;\n\n\nmodule.exports = exports.default;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/util/auto_reload.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//can not use import from\nvar sys_module = require('module');\n\n//rewriteSysModuleLoad flag\nvar _rewriteSysModuleLoad = false;\n\nvar NODE_MODULES = _path2.default.sep + 'node_modules' + _path2.default.sep;\n\n/**\n * auto reload file\n */\n\nvar _class = function () {\n  /**\n   * constructor\n   * @param  {Array} args []\n   * @return {}         []\n   */\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n\n    this.init.apply(this, arguments);\n  }\n  /**\n   * init\n   * @param  {String}   srcPath  [source path]\n   * @param  {Function} callback [when file has changed, callback will be invoke]\n   * @param  {Boolean}  log      [log reload file]\n   * @return {}            []\n   */\n\n\n  _class.prototype.init = function init(srcPath, callback) {\n    this.srcPath = _path2.default.normalize(srcPath);\n    this.callback = callback;\n    this.prevFilesCount = 0;\n  };\n  /**\n   * log file\n   * @param  {String} file []\n   * @return {}      []\n   */\n  // log(file){\n  //   //only log app files changed\n  //   if(file.indexOf(this.srcPath) === 0){\n  //     file = file.slice(this.srcPath.length);\n  //     think.log(`reload file ${file}`, 'RELOAD');\n  //   }\n  // }\n  /**\n   * clear file cache, also clear dependents file cache\n   * @return {} []\n   */\n\n\n  _class.prototype.clearFileCache = function clearFileCache(file) {\n    if (file.indexOf(NODE_MODULES) > -1 || file.indexOf(this.srcPath) !== 0) {\n      return;\n    }\n    var mod = require.cache[file];\n    if (!mod) {\n      return;\n    }\n    //think.log(`reload file ${file.slice(this.srcPath.length)}`, 'RELOAD');\n    //remove children\n    if (mod && mod.children) {\n      mod.children.length = 0;\n    }\n\n    // clear module cache which dependents this module\n    for (var fileItem in require.cache) {\n      if (fileItem === file || fileItem.indexOf(NODE_MODULES) > -1) {\n        continue;\n      }\n      var item = require.cache[fileItem];\n      if (item && item.children && item.children.indexOf(mod) > -1) {\n        this.clearFileCache(fileItem);\n      }\n    }\n    //remove require cache\n    delete require.cache[file];\n  };\n  /**\n   * clear files cache\n   * @param  {Array} files []\n   * @return {}       []\n   */\n\n\n  _class.prototype.clearFilesCache = function clearFilesCache(files) {\n    var _this = this;\n\n    files.forEach(function (file) {\n      _this.clearFileCache(file);\n    });\n    if (this.callback) {\n      this.callback();\n    }\n  };\n  /**\n   * check file change\n   * compare files count\n   * @return {} []\n   */\n\n\n  _class.prototype.checkFileChange = function checkFileChange() {\n    var filesCount = think.getFiles(this.srcPath, true).filter(function (file) {\n      var extname = _path2.default.extname(file);\n      return extname === '.js';\n    }).length;\n    var flag = this.prevFilesCount && this.prevFilesCount !== filesCount;\n    this.prevFilesCount = filesCount;\n    return flag;\n  };\n  /**\n   * check cache change\n   * @return {} []\n   */\n\n\n  _class.prototype.checkCacheChange = function checkCacheChange() {\n    var autoReload = thinkCache(thinkCache.AUTO_RELOAD);\n    var hasChange = false;\n    for (var file in require.cache) {\n      //ignore file in node_modules path\n      if (file.indexOf(NODE_MODULES) > -1) {\n        continue;\n      }\n      if (!think.isFile(file)) {\n        this.clearFileCache(file);\n        continue;\n      }\n      var mTime = _fs2.default.statSync(file).mtime.getTime();\n      if (!autoReload[file]) {\n        autoReload[file] = mTime;\n        continue;\n      }\n      if (mTime > autoReload[file]) {\n        this.clearFileCache(file);\n        autoReload[file] = mTime;\n        hasChange = true;\n      }\n    }\n    return hasChange;\n  };\n  /**\n   * run\n   * @return {} []\n   */\n\n\n  _class.prototype.run = function run() {\n    var hasChange = this.checkCacheChange() || this.checkFileChange();\n    if (hasChange && this.callback) {\n      this.callback();\n    }\n    setTimeout(this.run.bind(this), 200);\n  };\n  /**\n   * rewrite sys module load method\n   * @return {} []\n   */\n\n\n  _class.rewriteSysModuleLoad = function rewriteSysModuleLoad() {\n\n    if (_rewriteSysModuleLoad) {\n      return;\n    }\n    _rewriteSysModuleLoad = true;\n\n    var load = sys_module._load;\n\n    //rewrite Module._load method\n    sys_module._load = function (request, parent, isMain) {\n      var exportsObj = load(request, parent, isMain);\n      if (!parent) {\n        return exportsObj;\n      }\n      if (isMain || parent.filename.indexOf(NODE_MODULES) > -1) {\n        return exportsObj;\n      }\n      if (request === 'internal/repl' || request === 'repl') {\n        return exportsObj;\n      }\n      try {\n        var filename = sys_module._resolveFilename(request, parent);\n        var cachedModule = sys_module._cache[filename];\n        if (cachedModule && parent.children.indexOf(cachedModule) === -1) {\n          parent.children.push(cachedModule);\n        }\n      } catch (e) {}\n      return exportsObj;\n    };\n  };\n\n  return _class;\n}();\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/util/watch_compile.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * watch compile\n */\nvar _class = function () {\n  /**\n   * constructor\n   * @param  {Array} args []\n   * @return {}         []\n   */\n\n  /**\n   * compiled error files\n   * @type {Array}\n   */\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    this.compiledMtime = {};\n    this.compiledErrorFiles = [];\n    this.allowFileExt = ['.js', '.ts'];\n\n    this.init.apply(this, arguments);\n  }\n  /**\n   * init\n   * @param  {String} srcPath []\n   * @param  {String} outPath []\n   * @param  {Boolean} log     []\n   * @return {}         []\n   */\n\n  /**\n   * allow file ext in src path\n   * @type {Array}\n   */\n\n  /**\n   * store compiled files last mtime\n   * @type {Object}\n   */\n\n\n  _class.prototype.init = function init(srcPath, outPath) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments[3];\n\n    this.srcPath = _path2.default.normalize(srcPath);\n    this.outPath = _path2.default.normalize(outPath);\n    this.options = options;\n    this.callback = callback;\n  };\n  /**\n   * compile single file\n   * @param  {String} file     []\n   * @param  {Boolean} onlyCopy []\n   * @return {}          []\n   */\n\n\n  _class.prototype.compileFile = function compileFile(file, onlyCopy) {\n    var filePath = '' + this.srcPath + think.sep + file;\n    var content = _fs2.default.readFileSync(filePath, 'utf8');\n\n    //when get file content empty, maybe file is locked\n    if (!content) {\n      return;\n    }\n    // only copy file content\n    if (onlyCopy) {\n      var saveFilepath = '' + this.outPath + think.sep + file;\n      think.mkdir(_path2.default.dirname(saveFilepath));\n      _fs2.default.writeFileSync(saveFilepath, content);\n      return;\n    }\n\n    try {\n      if (this.options.type === 'ts') {\n        this.compileByTypeScript(content, file);\n      } else {\n        this.compileByBabel(content, file);\n      }\n      return true;\n    } catch (e) {\n\n      think.log(function (colors) {\n        return colors.red('compile file ' + file + ' error');\n      }, 'COMPILE');\n      think.log(e);\n\n      e.message = 'Compile Error: ' + e.message;\n      think.compileError = e;\n    }\n    return false;\n  };\n  /**\n   * get relative path\n   * @param  {String} file []\n   * @return {String}      []\n   */\n\n\n  _class.prototype.getRelationPath = function getRelationPath(file) {\n    //use dirname to resolve file path in source-map-support\n    //so must use dirname in here\n    var pPath = _path2.default.dirname(this.outPath + think.sep + file);\n    return _path2.default.relative(pPath, this.srcPath + think.sep + file);\n  };\n  /**\n   * typescript compile\n   * @return {} []\n   */\n\n\n  _class.prototype.compileByTypeScript = function compileByTypeScript(content, file) {\n    var ts = require('typescript');\n    var startTime = Date.now();\n    var output = ts.transpileModule(content, {\n      compilerOptions: {\n        module: ts.ModuleKind.CommonJS,\n        target: 'es6',\n        experimentalDecorators: true,\n        emitDecoratorMetadata: true,\n        allowSyntheticDefaultImports: true,\n        sourceMap: true\n      },\n      fileName: file,\n      reportDiagnostics: true\n    });\n    //has error\n    if (output.diagnostics && output.diagnostics.length) {\n      var firstDiagnostics = output.diagnostics[0];\n      throw new Error('' + firstDiagnostics.messageText);\n    }\n    if (this.options.log) {\n      think.log('Compile file ' + file, 'TypeScript', startTime);\n    }\n\n    file = this.replaceExtName(file, '.js');\n    var sourceMap = JSON.parse(output.sourceMapText);\n    sourceMap.sources[0] = this.getRelationPath(file);\n    sourceMap.sourcesContent = [content];\n    //file value must be equal sources values\n    sourceMap.file = sourceMap.sources[0];\n    delete sourceMap.sourceRoot;\n    this.compileByBabel(output.outputText, file, true, sourceMap);\n  };\n  /**\n   * babel compile\n   * @return {} []\n   */\n\n\n  _class.prototype.compileByBabel = function compileByBabel(content, file, logged, orginSourceMap) {\n    var startTime = Date.now();\n    var relativePath = this.getRelationPath(file);\n    //babel not export default property\n    //so can not use `import babel from 'babel-core'`\n    var babel = require('babel-core');\n    var data = babel.transform(content, {\n      filename: file,\n      presets: [].concat(this.options.presets || [['es2015', { 'loose': true }], 'stage-1']),\n      plugins: [].concat(this.options.plugins || ['transform-runtime']),\n      sourceMaps: true,\n      sourceFileName: relativePath\n    });\n    if (!logged && this.options.log) {\n      think.log('Compile file ' + file, 'Babel', startTime);\n    }\n    think.mkdir(_path2.default.dirname('' + this.outPath + think.sep + file));\n    var basename = _path2.default.basename(file);\n    var prefix = '//# sourceMappingURL=';\n    if (data.code.indexOf(prefix) === -1) {\n      data.code = data.code + '\\n' + prefix + basename + '.map';\n    }\n    _fs2.default.writeFileSync('' + this.outPath + think.sep + file, data.code);\n    var sourceMap = data.map;\n    //file value must be equal sources values\n    sourceMap.file = sourceMap.sources[0];\n    if (orginSourceMap) {\n      sourceMap = this.mergeSourceMap(orginSourceMap, sourceMap);\n    }\n    _fs2.default.writeFileSync('' + this.outPath + think.sep + file + '.map', (0, _stringify2.default)(sourceMap, undefined, 4));\n  };\n  /**\n   * merge source map\n   * @param  {String} content        []\n   * @param  {Object} orginSourceMap []\n   * @param  {Object} sourceMap      []\n   * @return {}                []\n   */\n\n\n  _class.prototype.mergeSourceMap = function mergeSourceMap(orginSourceMap, sourceMap) {\n    var _require = require('source-map'),\n        SourceMapGenerator = _require.SourceMapGenerator,\n        SourceMapConsumer = _require.SourceMapConsumer;\n\n    sourceMap.file = sourceMap.file.replace(/\\\\/g, '/');\n    sourceMap.sources = sourceMap.sources.map(function (filePath) {\n      return filePath.replace(/\\\\/g, '/');\n    });\n    var generator = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));\n    generator.applySourceMap(new SourceMapConsumer(orginSourceMap));\n    sourceMap = JSON.parse(generator.toString());\n\n    return sourceMap;\n  };\n  /**\n   * src file is deleted, but app file also exist\n   * then delete app file\n   * @return {} []\n   */\n\n\n  _class.prototype.getSrcDeletedFiles = function getSrcDeletedFiles(srcFiles, appFiles) {\n    var _this = this;\n\n    var srcFilesWithoutExt = srcFiles.map(function (item) {\n      return _this.replaceExtName(item);\n    });\n    return appFiles.filter(function (file) {\n      var extname = _path2.default.extname(file);\n      if (_this.allowFileExt.indexOf(extname) === -1) {\n        return;\n      }\n      var fileWithoutExt = _this.replaceExtName(file);\n      //src file not exist\n      if (srcFilesWithoutExt.indexOf(fileWithoutExt) === -1) {\n        var filepath = _this.outPath + think.sep + file;\n        if (think.isFile(filepath)) {\n          _fs2.default.unlinkSync(filepath);\n        }\n        return true;\n      }\n    }).map(function (file) {\n      return _this.outPath + think.sep + file;\n    });\n  };\n  /**\n   * replace filepath extname\n   * @param  {String} filepath []\n   * @param  {String} extname  []\n   * @return {String}          []\n   */\n\n\n  _class.prototype.replaceExtName = function replaceExtName(filepath) {\n    var extname = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    return filepath.replace(/\\.\\w+$/, extname);\n  };\n  /**\n   * compile\n   * @return {} []\n   */\n\n\n  _class.prototype.compile = function compile(once) {\n    var _this2 = this;\n\n    var files = think.getFiles(this.srcPath, true);\n    var appFiles = think.getFiles(this.outPath, true);\n    var changedFiles = this.getSrcDeletedFiles(files, appFiles);\n\n    if (think.compileError && !this.compiledErrorFiles.length) {\n      think.compileError = null;\n    }\n\n    files.forEach(function (file) {\n      var extname = _path2.default.extname(file);\n      //if is not js file, only copy\n      if (_this2.allowFileExt.indexOf(extname) === -1) {\n        _this2.compileFile(file, true);\n        return;\n      }\n      var mTime = _fs2.default.statSync('' + _this2.srcPath + think.sep + file).mtime.getTime();\n      var outFile = '' + _this2.outPath + think.sep + file;\n\n      //change extname to .js.\n      //in typescript, file extname is .ts\n      outFile = _this2.replaceExtName(outFile, '.js');\n\n      if (think.isFile(outFile)) {\n        var outmTime = _fs2.default.statSync(outFile).mtime.getTime();\n        //if compiled file mtime is after than source file, return\n        if (outmTime >= mTime) {\n          return;\n        }\n      }\n      if (!_this2.compiledMtime[file] || mTime > _this2.compiledMtime[file]) {\n        var ret = _this2.compileFile(file);\n        if (ret) {\n          changedFiles.push(outFile);\n        }\n\n        _this2.compiledMtime[file] = mTime;\n\n        var index = _this2.compiledErrorFiles.indexOf(file);\n        if (ret) {\n          if (index > -1) {\n            _this2.compiledErrorFiles.splice(index, 1);\n          }\n        } else if (ret === false) {\n          if (index === -1) {\n            _this2.compiledErrorFiles.push(file);\n          }\n        }\n      }\n    });\n    //notify auto reload service to clear file cache\n    if (changedFiles.length && this.callback) {\n      this.callback(changedFiles);\n    }\n    if (!once) {\n      setTimeout(this.compile.bind(this), 100);\n    }\n  };\n  /**\n   * run\n   * @return {} []\n   */\n\n\n  _class.prototype.run = function run() {\n    this.compile();\n  };\n  /**\n   * compile\n   * @return {} []\n   */\n\n\n  _class.compile = function compile(srcPath, outPath) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var instance = new this(srcPath, outPath, options);\n    instance.compile(true);\n  };\n\n  return _class;\n}();\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/util/checker.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n  /**\n   * check node version\n   * @return {} []\n   */\n  checkNodeVersion: function checkNodeVersion() {\n    var packageFile = think.THINK_PATH + '/package.json';\n\n    var _JSON$parse = JSON.parse(_fs2.default.readFileSync(packageFile, 'utf-8')),\n        engines = _JSON$parse.engines;\n\n    var needVersion = engines.node.substr(2);\n\n    var nodeVersion = process.version;\n    if (nodeVersion[0] === 'v') {\n      nodeVersion = nodeVersion.slice(1);\n    }\n\n    if (needVersion > nodeVersion) {\n      think.log('ThinkJS need node version >= ' + needVersion + ', current version is ' + nodeVersion + ', please upgrade it.', 'EXIT');\n    }\n  },\n\n  /**\n   * check application filename is lower\n   * @return {} []\n   */\n  checkFileName: function checkFileName() {\n    var files = think.getFiles(think.APP_PATH, true);\n    var reg = /\\.(js|html|tpl)$/;\n    var uppercaseReg = /[A-Z]+/;\n    var localPath = '' + think.sep + think.dirname.locale + think.sep;\n    var filter = function filter(item) {\n      if (!reg.test(item)) {\n        return;\n      }\n      item = _path2.default.normalize(item);\n      //ignore files in config/locale\n      if (item.indexOf(localPath) > -1) {\n        return;\n      }\n      return true;\n    };\n    files.forEach(function (item) {\n      if (filter(item) && uppercaseReg.test(item)) {\n        think.log('file `' + item + '` has uppercase chars.', 'WARNING');\n      }\n    });\n  },\n\n  /**\n   * check dependencies is installed before server start\n   * @return {} []\n   */\n  checkDependencies: function checkDependencies() {\n    var packageFile = think.ROOT_PATH + '/package.json';\n    if (!think.isFile(packageFile)) {\n      return;\n    }\n    var data = JSON.parse(_fs2.default.readFileSync(packageFile, 'utf8'));\n    var dependencies = think.extend({}, data.dependencies);\n    //only merge devDependencies in development env\n    if (think.env === 'development') {\n      dependencies = think.extend(dependencies, data.devDependencies);\n    }\n    //package alias\n    var pkgAlias = {\n      'babel-runtime': 'babel-runtime/helpers/inherits'\n    };\n    var pkgPath = '' + think.ROOT_PATH + think.sep + 'node_modules' + think.sep;\n    for (var pkg in dependencies) {\n      pkg = pkgAlias[pkg] || pkg;\n      if (think.isDir('' + pkgPath + pkg)) {\n        continue;\n      }\n      try {\n        require(pkg);\n      } catch (e) {\n        think.log('package `' + pkg + '` is not installed. please run `npm install` command before start server.', 'EXIT');\n      }\n    }\n  },\n\n  /**\n   * check module config\n   * @return {} []\n   */\n  checkModuleConfig: function checkModuleConfig() {\n    if (think.mode !== think.mode_module) {\n      return;\n    }\n    // check module config\n    // some config must be set in common module\n    var keys = [],\n        errorKey = 'error_config_key';\n    var errorConfigKeys = thinkCache(thinkCache.COLLECTION, errorKey);\n    if (think.isEmpty(errorConfigKeys)) {\n      thinkCache(thinkCache.COLLECTION, errorKey, []);\n      errorConfigKeys = thinkCache(thinkCache.COLLECTION, errorKey);\n    }\n\n    var checkMConfig = function checkMConfig(module) {\n      if (keys.length === 0) {\n        keys = (0, _keys2.default)(think.safeRequire(think.THINK_LIB_PATH + '/config/config.js'));\n      }\n\n      //check config key not set as file name\n      keys.forEach(function (item) {\n        var configFilePath = think.getPath(module, think.dirname.config) + '/' + item + '.js';\n        if (think.isFile(configFilePath)) {\n          think.log('file `config' + think.sep + item + '.js` is not allowed, it\\'s already used for config key.', 'EXIT');\n        }\n      });\n\n      if (module === 'common') {\n        return;\n      }\n\n      var configFilePath = think.getPath(module, think.dirname.config) + '/config.js';\n      if (!think.isFile(configFilePath)) {\n        return;\n      }\n      var config = think.safeRequire(configFilePath);\n      keys.forEach(function (key) {\n        if (config[key] && errorConfigKeys.indexOf(key) === -1) {\n          errorConfigKeys.push(key);\n          think.log('config key `' + key + '` can not be set in `' + module + '` module, must be set in `common` module', 'WARNING');\n        }\n      });\n    };\n\n    var modules = think.module;\n    //load modules config\n    modules.forEach(function (module) {\n      checkMConfig(module);\n    });\n  }\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/think.js":"'use strict';\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _create = require('babel-runtime/core-js/object/create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _crypto = require('crypto');\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _child_process = require('child_process');\n\nvar _child_process2 = _interopRequireDefault(_child_process);\n\nvar _cluster = require('cluster');\n\nvar _cluster2 = _interopRequireDefault(_cluster);\n\nvar _thinkit = require('thinkit');\n\nvar _thinkit2 = _interopRequireDefault(_thinkit);\n\nvar _co = require('co');\n\nvar _co2 = _interopRequireDefault(_co);\n\nvar _safe = require('colors/safe');\n\nvar _safe2 = _interopRequireDefault(_safe);\n\nvar _base2 = require('./base.js');\n\nvar _base3 = _interopRequireDefault(_base2);\n\nvar _http_base = require('./http_base.js');\n\nvar _http_base2 = _interopRequireDefault(_http_base);\n\nvar _cookie = require('../util/cookie.js');\n\nvar _cookie2 = _interopRequireDefault(_cookie);\n\nvar _http = require('./http.js');\n\nvar _http2 = _interopRequireDefault(_http);\n\nvar _await = require('../util/await.js');\n\nvar _await2 = _interopRequireDefault(_await);\n\nvar _think_validate = require('./think_validate.js');\n\nvar _think_validate2 = _interopRequireDefault(_think_validate);\n\nvar _think_middleware = require('./think_middleware.js');\n\nvar _think_middleware2 = _interopRequireDefault(_think_middleware);\n\nvar _think_hook = require('./think_hook.js');\n\nvar _think_hook2 = _interopRequireDefault(_think_hook);\n\nvar _think_route = require('./think_route.js');\n\nvar _think_route2 = _interopRequireDefault(_think_route);\n\nvar _think_config = require('./think_config.js');\n\nvar _think_config2 = _interopRequireDefault(_think_config);\n\nvar _think_adapter = require('./think_adapter.js');\n\nvar _think_adapter2 = _interopRequireDefault(_think_adapter);\n\nrequire('./think_cache.js');\n\nrequire('./think_data.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_safe2.default.enabled = true;\n\n/**\n * global think variable\n * @type {Object}\n */\nglobal.think = (0, _create2.default)(_thinkit2.default);\n/**\n * path seperator\n * @type {String}\n */\nthink.sep = _path2.default.sep;\n/**\n * server start time\n * @type {Number}\n */\nthink.startTime = Date.now();\n/**\n * app dir name, can be set in init\n * @type {Object}\n */\nthink.dirname = {\n  config: 'config',\n  controller: 'controller',\n  model: 'model',\n  adapter: 'adapter',\n  logic: 'logic',\n  service: 'service',\n  view: 'view',\n  middleware: 'middleware',\n  runtime: 'runtime',\n  common: 'common',\n  bootstrap: 'bootstrap',\n  locale: 'locale'\n};\n/**\n * env\n * development | testing | production\n * @type {String}\n */\nthink.env = 'development';\n/**\n * server port\n * @type {Number}\n */\nthink.port = 0;\n/**\n * is command line\n * @type {String}\n */\nthink.cli = '';\n/**\n * get locale\n * @type {String}\n */\nthink.lang = (process.env.LANG || '').split('.')[0].replace('_', '-').toLowerCase();\n/**\n * is master\n * @type {Boolean}\n */\nthink.isMaster = _cluster2.default.isMaster;\n/**\n * app mode\n * 0x0001: mini\n * 0x0002: normal\n * 0x0004: module\n * @type {Boolean}\n */\nthink.mode = 0x0001;\n//normal mode\nthink.mode_normal = 0x0002;\n//module mode\nthink.mode_module = 0x0004;\n/**\n * thinkjs module lib path\n * @type {String}\n */\nthink.THINK_LIB_PATH = _path2.default.normalize(__dirname + '/..');\n/**\n * thinkjs module root path\n * @type {String}\n */\nthink.THINK_PATH = _path2.default.dirname(think.THINK_LIB_PATH);\n/**\n * thinkjs version\n * @param  {) []\n * @return {}         []\n */\nthink.version = function () {\n  var packageFile = think.THINK_PATH + '/package.json';\n\n  var _JSON$parse = JSON.parse(_fs2.default.readFileSync(packageFile, 'utf-8')),\n      version = _JSON$parse.version;\n\n  return version;\n}();\n/**\n * module list\n * @type {Array}\n */\nthink.module = [];\n/**\n * base class\n * @type {Class}\n */\nthink.base = _base3.default;\n/**\n * snakeCase string\n * @param str\n */\nthink.snakeCase = function (str) {\n  return str.replace(/([^A-Z])([A-Z])/g, function ($0, $1, $2) {\n    return $1 + '_' + $2.toLowerCase();\n  });\n};\n/**\n * reject promise\n * @param  {[type]} err []\n * @return {[type]}     []\n */\nthink.reject = function (err) {\n  //delay to show error\n  setTimeout(function () {\n    think.log(err);\n  }, 500);\n  return _promise2.default.reject(err);\n};\n\n/**\n * check object is http object\n * @param  {Mixed}  obj []\n * @return {Boolean}      []\n */\nthink.isHttp = function (obj) {\n  return !!(obj && think.isObject(obj.req) && think.isObject(obj.res));\n};\n\n/**\n * validate \n * @type {Function}\n */\nthink.validate = _think_validate2.default;\n\n/**\n * middleware\n * @type {Function}\n */\nthink.middleware = _think_middleware2.default;\n\n/**\n * hook\n * @type {Function}\n */\nthink.hook = _think_hook2.default;\n\n/**\n * route\n * @type {Function}\n */\nthink.route = _think_route2.default;\n\n/**\n * config\n * @type {Function}\n */\nthink.config = _think_config2.default;\n/**\n * get module config\n * @param  {String} module []\n * @return {Object}        []\n */\nthink.getModuleConfig = function (module) {\n  return think.config(undefined, undefined, module);\n};\n/**\n * adapter\n * @type {Function}\n */\nthink.adapter = _think_adapter2.default;\n\n/**\n * alias co module to think.co\n * @type {Object}\n */\nthink.co = function (obj) {\n  //optimize invoke co package\n  if (obj && typeof obj.next === 'function') {\n    return (0, _co2.default)(obj);\n  }\n  return _promise2.default.resolve(obj);\n};\nthink.co.wrap = _co2.default.wrap;\n\n/**\n * create class\n * @param {Object} methods [methods and props]\n */\nvar Class = think.Class;\nthink.Class = function (type, clean) {\n  // create class\n  // think.Class({})\n  // think.Class({}, true)\n  if (think.isObject(type)) {\n    return clean === true ? Class(type) : Class(think.base, type);\n  }\n  // create class with superClass\n  // think.Class(function(){}, {})\n  else if (think.isFunction(type)) {\n      return Class(type, clean);\n    }\n\n  //create type class\n  return function (superClass, methods) {\n    // think.controller();\n    // think.controller({})\n    if (think.isObject(superClass) || !superClass) {\n      methods = superClass;\n      superClass = type + '_base';\n    }\n    // think.controller('superClass', {})\n    else if (think.isString(superClass)) {\n        superClass = think.lookClass(superClass, type);\n      }\n    if (think.isString(superClass)) {\n      superClass = think.require(superClass, true);\n      // get class\n      // think.controller('rest')\n      if (!methods) {\n        return superClass;\n      }\n    }\n    return Class(superClass, methods);\n  };\n};\n\n/**\n * look up class\n * @param  {String} type   [class type, model, controller, service]\n * @param  {String} module [module name]\n * @return {String}        []\n */\nvar _getClass = function _getClass(name, type, module, base) {\n  var clsPath = void 0,\n      cls = void 0;\n  // find from current module\n  if (module) {\n    clsPath = module + '/' + type + '/' + name;\n    cls = think.require(clsPath, true);\n    if (cls) {\n      return cls;\n    }\n  }\n  // find from common module\n  module = think.mode !== think.mode_module ? think.config('default_module') : think.dirname.common;\n  var list = [module + '/' + type + '/' + name, type + '_' + name, base || type + '_base'];\n  for (var i = 0, length = list.length; i < length; i++) {\n    cls = think.require(list[i], true);\n    if (cls) {\n      return cls;\n    }\n  }\n};\n\nthink.lookClass = function (name, type, module, base) {\n  var names = name.split('/');\n  var length = names.length;\n  if (length === 1) {\n    return _getClass(name, type, module, base);\n  }\n  if (length === 2 && (think.module.indexOf(names[0]) > -1 || !module)) {\n    return think.require(names[0] + '/' + type + '/' + names[1]);\n  }\n  if (length === 3 && (name.indexOf('/' + type + '/') > -1 || !type || !module)) {\n    return think.require(name);\n  }\n  return think.require(module + '/' + type + '/' + name);\n};\n/**\n * get common module path\n * think.getPath(undefined, think.dirname.controller)\n * think.getPath(home, think.dirname.model)\n * @return {String} []\n */\nthink.getPath = function (module) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : think.dirname.controller;\n  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  var mod = '';\n  if (think.mode === think.mode_module) {\n    mod = (module || think.dirname.common) + think.sep;\n  }\n  return '' + think.APP_PATH + prefix + think.sep + mod + type;\n};\n\n/**\n * require module\n * @param  {String} name []\n * @return {mixed}      []\n */\nvar _loadRequire = function _loadRequire(name, filepath) {\n  var obj = think.safeRequire(filepath);\n  if (think.isFunction(obj)) {\n    obj.prototype.__filename = filepath;\n  }\n  if (obj) {\n    thinkData.export[name] = obj;\n  }\n  return obj;\n};\nthink.require = function (name, flag) {\n  if (!think.isString(name)) {\n    return name;\n  }\n  // adapter or middle by register\n  var Cls = thinkData.export[name];\n  if (Cls) {\n    return Cls;\n  }\n\n  var filepath = thinkData.alias[name];\n  if (filepath) {\n    return _loadRequire(name, _path2.default.normalize(filepath));\n  }\n  // only check in alias\n  if (flag) {\n    return null;\n  }\n  filepath = require.resolve(name);\n  return _loadRequire(name, filepath);\n};\n\n/**\n * safe require\n * @param  {String} file []\n * @return {mixed}      []\n */\nvar _interopSafeRequire = function _interopSafeRequire(file) {\n  var obj = require(file);\n  if (obj && obj.__esModule && obj.default) {\n    return obj.default;\n  }\n  return obj;\n};\n\nthink.safeRequire = function (file) {\n  // absolute file path is not exist\n  if (_path2.default.isAbsolute(file)) {\n    //no need optimize, only invoked before service start\n    if (!think.isFile(file)) {\n      return null;\n    }\n    //when file is exist, require direct\n    return _interopSafeRequire(file);\n  }\n  try {\n    return _interopSafeRequire(file);\n  } catch (err) {\n    think.log(err);\n  }\n  return null;\n};\n\n/**\n * merge & parse config, support adapter & parser\n * @param  {} configs []\n * @return {}            []\n */\nthink.parseConfig = function () {\n  var _think;\n\n  for (var _len = arguments.length, configs = Array(_len), _key = 0; _key < _len; _key++) {\n    configs[_key] = arguments[_key];\n  }\n\n  var onlyMerge = false;\n  if (configs[0] === true) {\n    onlyMerge = true;\n    configs = configs.slice(1);\n  }\n  configs = configs.map(function (config) {\n    config = think.extend({}, config);\n    //check adapter config exist\n    if (config.type && config.adapter) {\n      var adapterConfig = config.adapter[config.type];\n      config = think.extend(config, adapterConfig);\n      delete config.adapter;\n    }\n    return config;\n  });\n\n  var config = (_think = think).extend.apply(_think, [{}].concat(configs));\n\n  //check parser method\n  if (!think.isFunction(config.parser) || onlyMerge) {\n    return config;\n  }\n\n  var ret = config.parser(config, this !== think ? this : {});\n  delete config.parser;\n  return think.extend(config, ret);\n};\n\n/**\n * prevent next process\n * @return {Promise} []\n */\nvar preventMessage = 'PREVENT_NEXT_PROCESS';\nthink.prevent = function () {\n  var err = new Error(preventMessage);\n  return _promise2.default.reject(err);\n};\n/**\n * check is prevent error\n * @param  {Error}  err [error message]\n * @return {Boolean}     []\n */\nthink.isPrevent = function (err) {\n  return think.isError(err) && err.message === preventMessage;\n};\n/**\n * log\n * @TODO\n * @return {} []\n */\nthink.log = function (msg, type, showTime) {\n\n  //when type or showTime is boolean\n  //only show log when value is true\n  if (type === false || showTime === false) {\n    return;\n  } else if (type === true) {\n    type = '';\n  } else if (showTime === true) {\n    showTime = '';\n  }\n\n  var dateTime = _safe2.default.gray('[' + think.datetime() + '] ');\n  if (showTime === null) {\n    dateTime = '';\n  }\n\n  var preError = thinkCache(thinkCache.COLLECTION, 'prev_error');\n  if (think.isError(msg)) {\n    if (think.isPrevent(msg) || msg === preError) {\n      return;\n    }\n    thinkCache(thinkCache.COLLECTION, 'prev_error', msg);\n    console.error(dateTime + _safe2.default.red('[Error] ') + msg.stack);\n    return;\n  } else if (think.isFunction(msg)) {\n    msg = msg(_safe2.default);\n  } else if (think.isObject(msg) || think.isArray(msg)) {\n    msg = (0, _stringify2.default)(msg);\n  }\n  // if(msg.length > 300){\n  //   msg = msg.substr(0, 300) + '...';\n  // }\n  if (think.isNumber(showTime)) {\n    var time = Date.now() - showTime;\n    msg += ' ' + _safe2.default.green(time + 'ms');\n  }\n  if (type) {\n    if (type === 'WARNING') {\n      console.warn(dateTime + _safe2.default.yellow('[Warning] ') + msg);\n    } else if (type === 'EXIT') {\n      console.error(_safe2.default.red('[Error] ' + msg));\n      console.log();\n      process.exit();\n    } else {\n      console.log(dateTime + _safe2.default.cyan('[' + type + '] ') + msg);\n    }\n  } else {\n    console.log(dateTime + msg);\n  }\n};\n\n/**\n * load alias\n * @param  {String} type  []\n * @param  {Array} paths []\n * @return {Object}       []\n */\nthink.alias = function (type, paths, slash) {\n  if (!type) {\n    return thinkData.alias;\n  }\n  //regist alias\n  if (!think.isArray(paths)) {\n    paths = [paths];\n  }\n  paths.forEach(function (path) {\n    var files = think.getFiles(path);\n    files.forEach(function (file) {\n      if (file.slice(-3) !== '.js' || file[0] === '_') {\n        return;\n      }\n      var name = file.slice(0, -3).replace(/\\\\/g, '/'); //replace \\\\ to / on windows\n      name = type + (slash ? '/' : '_') + name;\n      thinkData.alias[name] = '' + path + think.sep + file;\n    });\n  });\n};\n\n/**\n * regist gc\n * @param  {Object} instance [class instance]\n * @return {}          []\n */\nthink.gc = function (instance) {\n  var type = instance.gcType;\n  var timers = thinkCache(thinkCache.TIMER);\n  var gc = think.config('gc');\n  if (!gc.on || type in timers) {\n    return;\n  }\n  var timer = setInterval(function () {\n    if (gc.filter()) {\n      return instance.gc && instance.gc(Date.now());\n    }\n  }, gc.interval * 1000);\n  thinkCache(thinkCache.TIMER, type, timer);\n};\n\n/**\n * get http object\n * @param  {Object} req [http request]\n * @param  {Object} res [http response]\n * @return {Object}     [http object]\n */\nthink._http = function () {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (think.isString(data)) {\n    if (data[0] === '{') {\n      data = JSON.parse(data);\n    } else if (/^\\w+\\=/.test(data)) {\n      data = _querystring2.default.parse(data);\n    } else {\n      data = { url: data };\n    }\n  }\n  var url = data.url || '';\n  if (url.indexOf('/') !== 0) {\n    url = '/' + url;\n  }\n  var req = {\n    httpVersion: '1.1',\n    method: (data.method || 'GET').toUpperCase(),\n    url: url,\n    headers: think.extend({\n      host: data.host || '127.0.0.1'\n    }, data.headers),\n    connection: {\n      remoteAddress: data.ip || '127.0.0.1'\n    }\n  };\n  var empty = function empty() {};\n  var res = {\n    statusCode: 200,\n    setTimeout: empty,\n    end: data.end || data.close || empty,\n    write: data.write || data.send || empty,\n    setHeader: empty\n  };\n  return {\n    req: req,\n    res: res\n  };\n};\n/**\n * get http object\n * @param  {Object} req []\n * @param  {Object} res []\n * @return {Promise}     []\n */\nthink.http = function () {\n  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(req, res) {\n    var execFlag, _think$_http, instance, http, App, appInstance;\n\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            execFlag = res === true;\n            //for cli request\n\n            if (res === undefined || res === true) {\n              _think$_http = think._http(req);\n              req = _think$_http.req;\n              res = _think$_http.res;\n            }\n            instance = new _http2.default(req, res);\n            _context.next = 5;\n            return instance.run();\n\n          case 5:\n            http = _context.sent;\n\n            if (execFlag) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt('return', http);\n\n          case 8:\n            //flag to cli request, make isCli detect true\n            http._cli = true;\n            App = think.require('app');\n            appInstance = new App(http);\n            return _context.abrupt('return', appInstance.run());\n\n          case 12:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, undefined);\n  }));\n\n  return function (_x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * base class for has http property\n * @type {Class}\n */\nthink.http.base = _http_base2.default;\n\n/**\n * get uuid\n * @param  {Number} length [uid length]\n * @return {String}        []\n */\nthink.uuid = function () {\n  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n\n  // length = length || 32;\n  var str = _crypto2.default.randomBytes(Math.ceil(length * 0.75)).toString('base64').slice(0, length);\n  return str.replace(/[\\+\\/]/g, '_');\n};\n\n/**\n * start session\n * @param  {Object} http []\n * @return {}      []\n */\nthink.session = function (http) {\n  //if session is init, return\n  if (http._session) {\n    return http._session;\n  }\n\n  var sessionOptions = think.config('session');\n  var name = sessionOptions.name,\n      secret = sessionOptions.secret;\n\n  var cookie = http.cookie(name);\n\n  //validate cookie sign\n  if (cookie && secret) {\n    cookie = _cookie2.default.unsign(cookie, secret);\n    //set cookie to http._cookie\n    if (cookie) {\n      http._cookie[name] = cookie;\n    }\n  }\n\n  var sessionCookie = cookie;\n  var newCookie = false;\n  //generate session cookie when cookie is not set\n  if (!cookie) {\n    var options = sessionOptions.cookie || {};\n    cookie = think.uuid(options.length || 32);\n    sessionCookie = cookie;\n    //sign cookie\n    if (secret) {\n      cookie = _cookie2.default.sign(cookie, secret);\n    }\n    http._cookie[name] = sessionCookie;\n    http.cookie(name, cookie, options);\n    newCookie = true;\n  }\n\n  var type = sessionOptions.type || 'memory';\n  if (type === 'memory') {\n    if (think.config('cluster_on')) {\n      type = 'file';\n      think.log('in cluster mode, session can\\'t use memory for storage, convert to File');\n    }\n  }\n\n  var conf = think.parseConfig(sessionOptions, {\n    cookie: sessionCookie,\n    newCookie: newCookie\n  });\n  var cls = think.adapter('session', type);\n  var session = new cls(conf);\n  http._session = session;\n\n  //save session data after request end\n  //http.once('afterEnd', () => session.flush && session.flush());\n  return session;\n};\n\n/**\n * create controller sub class\n * @type {Function}\n */\nthink.controller = function (superClass, methods, module) {\n  var isConfig = think.isHttp(methods) || module;\n  // get controller instance\n  if (think.isString(superClass) && isConfig) {\n    var Cls = think.lookClass(superClass, 'controller', module);\n    return new Cls(methods);\n  }\n  var controller = thinkCache(thinkCache.COLLECTION, 'controller');\n  if (!controller) {\n    controller = think.Class('controller');\n    thinkCache(thinkCache.COLLECTION, 'controller', controller);\n  }\n  //create sub controller class\n  return controller(superClass, methods);\n};\n\n/**\n * create logic class\n * @type {Function}\n */\nthink.logic = function (superClass, methods, module) {\n  var isConfig = think.isHttp(methods) || module;\n  //get logic instance\n  if (think.isString(superClass) && isConfig) {\n    var Cls = think.lookClass(superClass, 'logic', module);\n    return new Cls(methods);\n  }\n  var logic = thinkCache(thinkCache.COLLECTION, 'logic');\n  if (!logic) {\n    logic = think.Class('logic');\n    thinkCache(thinkCache.COLLECTION, 'logic', logic);\n  }\n  //create sub logic class\n  return logic(superClass, methods);\n};\n\n/**\n * create model sub class\n * @type {Function}\n */\nthink.model = function (superClass, methods, module) {\n  var isConfig = !!module;\n  if (!isConfig && methods) {\n    //check is db configs\n    if ('type' in methods) {\n      isConfig = true;\n    }\n  }\n  //get model instance\n  if (think.isString(superClass) && isConfig) {\n    methods = think.extend({}, think.config('db'), methods);\n    var _base = methods.type === 'mongo' ? 'model_mongo' : '';\n    var cls = think.lookClass(superClass, 'model', module, _base);\n    var names = superClass.split('/');\n    return new cls(names[names.length - 1], methods);\n  }\n  var model = thinkCache(thinkCache.COLLECTION, 'model');\n  if (!model) {\n    model = think.Class('model');\n    thinkCache(thinkCache.COLLECTION, 'model', model);\n  }\n  //create model\n  return model(superClass, methods);\n};\n\n/**\n * create service sub class\n * @type {Function}\n */\nthink.service = function (superClass, methods, module) {\n  //get service instance\n  if (think.isString(superClass)) {\n    return think.lookClass(superClass, 'service', module || methods);\n  }\n  var service = thinkCache(thinkCache.COLLECTION, 'service');\n  if (!service) {\n    service = think.Class('service');\n    thinkCache(thinkCache.COLLECTION, 'service', service);\n  }\n  //create sub service class\n  return service(superClass, methods);\n};\n/**\n * get or set cache\n * @param  {String} type  [cache type]\n * @param  {String} name  [cache name]\n * @param  {Mixed} value [cache value]\n * @return {}       []\n */\nthink.cache = function () {\n  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(name, value, options) {\n    var Cls, instance, data;\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = think.extend({}, think.config('cache'), options);\n            Cls = think.adapter('cache', options.type || 'memory');\n            instance = new Cls(options);\n            // get cache\n\n            if (!(value === undefined)) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt('return', instance.get(name));\n\n          case 7:\n            if (!(value === null)) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt('return', instance.delete(name));\n\n          case 11:\n            if (!think.isFunction(value)) {\n              _context2.next = 23;\n              break;\n            }\n\n            _context2.next = 14;\n            return instance.get(name);\n\n          case 14:\n            data = _context2.sent;\n\n            if (!(data !== undefined)) {\n              _context2.next = 17;\n              break;\n            }\n\n            return _context2.abrupt('return', data);\n\n          case 17:\n            _context2.next = 19;\n            return think.co(value(name));\n\n          case 19:\n            data = _context2.sent;\n            _context2.next = 22;\n            return instance.set(name, data);\n\n          case 22:\n            return _context2.abrupt('return', data);\n\n          case 23:\n            return _context2.abrupt('return', instance.set(name, value, options.timeout));\n\n          case 24:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, undefined);\n  }));\n\n  return function (_x7, _x8, _x9) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n * get locale message\n * can not use arrow function!\n * @param  {String} key  []\n * @param  {String} lang []\n * @return {String}      []\n */\nthink.locale = function (key) {\n  var lang = void 0,\n      locales = void 0,\n      defaultLang = void 0;\n  if (this === think) {\n    defaultLang = think.config('locale.default');\n    lang = think.lang || defaultLang;\n    locales = think.config('locale');\n  } else {\n    defaultLang = this.config('locale.default');\n    lang = this.lang();\n    locales = this.config(think.dirname.locale);\n  }\n  var langLocale = locales[lang] || {};\n  var defaultLangLocale = locales[defaultLang] || {};\n  if (!key) {\n    return think.isEmpty(langLocale) ? defaultLangLocale : langLocale;\n  }\n  var enLocale = locales.en || {};\n  var value = langLocale[key] || defaultLangLocale[key] || enLocale[key] || key;\n  if (!think.isString(value)) {\n    return value;\n  }\n\n  for (var _len2 = arguments.length, data = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    data[_key2 - 1] = arguments[_key2];\n  }\n\n  return _util2.default.format.apply(_util2.default, [value].concat(data));\n};\n\n/**\n * await \n * @param  {String}   key      []\n * @param  {Function} callback []\n * @return {Promise}            []\n */\nvar _awaitInstance = new _await2.default();\nthink.await = function (key, callback) {\n  return _awaitInstance.run(key, callback);\n};\n\n/**\n * install node package\n * @param  {String} pkg [package name]\n * @return {Promise}     []\n */\nvar _dynamicInstall = function _dynamicInstall(pkg) {\n  var pkgWithVersion = pkg;\n  //get package version\n  if (pkgWithVersion.indexOf('@') === -1) {\n    var version = think.config('package')[pkg];\n    if (version) {\n      pkgWithVersion += '@' + version;\n    }\n  } else {\n    pkg = pkgWithVersion.split('@')[0];\n  }\n  var cmd = 'npm install ' + pkgWithVersion + ' --save';\n  return think.await(cmd, function () {\n    var deferred = think.defer();\n    think.log('install package ' + pkgWithVersion + ' start', 'NPM');\n    _child_process2.default.exec(cmd, {\n      cwd: think.ROOT_PATH\n    }, function (err) {\n      if (err) {\n        think.log(new Error('install package ' + pkgWithVersion + ' error'));\n        deferred.reject(err);\n      } else {\n        think.log('install package ' + pkgWithVersion + ' finish', 'NPM');\n        deferred.resolve(think.require(pkg));\n      }\n    });\n    return deferred.promise;\n  });\n};\n\nthink.npm = function (pkg) {\n  try {\n    return _promise2.default.resolve(_interopSafeRequire(pkg));\n  } catch (e) {\n    return _dynamicInstall(pkg);\n  }\n};\n/**\n * get error\n * @param  {Error} err   []\n * @param  {String} addon []\n * @return {Error}       []\n */\nthink.error = function (err) {\n  var addon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (think.isPromise(err)) {\n    return err.catch(function (err) {\n      return think.reject(think.error(err, addon));\n    });\n  }\n  if (think.isError(err)) {\n    var message = err.message;\n    var errors = thinkData.error;\n    var key = void 0,\n        value = void 0,\n        reg = /^[A-Z\\_]$/;\n    for (key in errors) {\n      var pos = message.indexOf(key);\n      if (pos > -1) {\n        var prev = pos === 0 ? '' : message[pos - 1];\n        var next = message[pos + key.length];\n        if (!reg.test(prev) && !reg.test(next)) {\n          value = errors[key];\n          break;\n        }\n      }\n    }\n    if (value) {\n      var siteMessage = 'http://www.thinkjs.org/doc/error_message.html#' + key.toLowerCase();\n      if (think.isError(addon)) {\n        addon.message = value + ', ' + addon.message + '. ' + siteMessage;\n        return addon;\n      } else {\n        addon = addon ? ', ' + addon : '';\n        var msg = '' + value + addon + '. ' + siteMessage;\n        err.message = msg;\n        return err;\n      }\n    }\n    return err;\n  }\n  return new Error(err);\n};\n/**\n * exec status action\n * @param  {Number} status []\n * @param  {Object} http   []\n * @return {}        []\n */\nthink.statusAction = function () {\n  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(status, http, log) {\n    var name, cls, instance;\n    return _regenerator2.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            status = status || 500;\n\n            if (!think.isPrevent(http.error)) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt('return');\n\n          case 3:\n            if (!http._error) {\n              _context3.next = 8;\n              break;\n            }\n\n            think.log(http.error);\n            _context3.next = 7;\n            return http.status(status).end();\n\n          case 7:\n            return _context3.abrupt('return', think.prevent());\n\n          case 8:\n            http._error = true;\n\n            //@TODO move log error to error controller\n            if (log && think.config('log_error') !== false) {\n              think.log(http.error);\n            }\n\n            name = think.config('default_module') + '/' + think.dirname.controller + '/error';\n\n            if (think.mode === think.mode_module) {\n              name = think.dirname.common + '/' + think.dirname.controller + '/error';\n            }\n\n            cls = think.require(name, true);\n\n            //error controller not found\n\n            if (cls) {\n              _context3.next = 16;\n              break;\n            }\n\n            http.error = new Error(think.locale('CONTROLLER_NOT_FOUND', name, http.url));\n            return _context3.abrupt('return', think.statusAction(status, http, log));\n\n          case 16:\n\n            //set http status\n            //http.status(status);\n\n            instance = new cls(http);\n            _context3.next = 19;\n            return instance.invoke('_' + status + 'Action', instance);\n\n          case 19:\n            return _context3.abrupt('return', think.prevent());\n\n          case 20:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, undefined);\n  }));\n\n  return function (_x11, _x12, _x13) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n * waterfall\n * @param  {Array}   dataList []\n * @param  {Function} callback []\n * @return {Promise}            []\n */\nthink.waterfall = function () {\n  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(dataList, callback) {\n    var itemFn, data, i, length, ret;\n    return _regenerator2.default.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            itemFn = think.isFunction(dataList[0]);\n            data = void 0;\n            i = 0, length = dataList.length;\n\n          case 3:\n            if (!(i < length)) {\n              _context4.next = 13;\n              break;\n            }\n\n            ret = itemFn ? dataList[i](callback, data) : callback(dataList[i], data);\n            _context4.next = 7;\n            return think.co(ret);\n\n          case 7:\n            data = _context4.sent;\n\n            if (!(data === null)) {\n              _context4.next = 10;\n              break;\n            }\n\n            return _context4.abrupt('return', data);\n\n          case 10:\n            i++;\n            _context4.next = 3;\n            break;\n\n          case 13:\n            return _context4.abrupt('return', data);\n\n          case 14:\n          case 'end':\n            return _context4.stop();\n        }\n      }\n    }, _callee4, undefined);\n  }));\n\n  return function (_x14, _x15) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n/**\n * parallel limit exec\n * @param  {String}   key      []\n * @param  {Mixed}   data     []\n * @param  {Function} callback []\n * @return {}            []\n */\nthink.parallelLimit = function (key, data, callback) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n\n  if (!think.isString(key) || think.isFunction(data)) {\n    options = callback || {};\n    callback = data;\n    data = key;\n    key = '';\n  }\n  if (!think.isFunction(callback)) {\n    options = callback || {};\n    callback = undefined;\n  }\n  if (think.isNumber(options)) {\n    options = { limit: options };\n  }\n\n  var flag = !think.isArray(data) || options.array;\n  if (!flag) {\n    key = '';\n  }\n\n  //get parallel limit class\n  var Limit = thinkCache(thinkCache.COLLECTION, 'limit');\n  if (!Limit) {\n    Limit = think.require('parallel_limit');\n    thinkCache(thinkCache.COLLECTION, 'limit', Limit);\n  }\n\n  var instance = void 0;\n  if (key) {\n    instance = thinkCache(thinkCache.LIMIT, key);\n    if (!instance) {\n      instance = new Limit(options.limit, callback);\n      thinkCache(thinkCache.LIMIT, key, instance);\n    }\n  } else {\n    instance = new Limit(options.limit, callback);\n  }\n\n  if (flag) {\n    return instance.add(data);\n  }\n  return instance.addMany(data, options.ignoreError);\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/base.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Base Class\n * @param  {Object} http\n * @return {Class}\n */\nvar _class = function () {\n  /**\n   * constructor\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n\n    this.init.apply(this, arguments);\n  }\n  /**\n   * init\n   * @param  {Object} http []\n   * @return {}      []\n   */\n\n\n  _class.prototype.init = function init() {};\n  /**\n   * invoke method, support __before & __after magic methods\n   * @param  {String} method []\n   * @param  {mixed} data []\n   * @return {Promise}    []\n   */\n\n\n  _class.prototype.invoke = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(method) {\n      for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        data[_key - 1] = arguments[_key];\n      }\n\n      var result;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.__before) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return think.co(this.__before(this));\n\n            case 3:\n              if (this[method]) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt('return', _promise2.default.reject(new Error(think.locale('METHOD_NOT_EXIST', method))));\n\n            case 5:\n              _context.next = 7;\n              return think.co(this[method].apply(this, data));\n\n            case 7:\n              result = _context.sent;\n\n              if (!this.__after) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 11;\n              return think.co(this.__after(this));\n\n            case 11:\n              return _context.abrupt('return', result);\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function invoke(_x, _x2) {\n      return _ref.apply(this, arguments);\n    }\n\n    return invoke;\n  }();\n  /**\n   * get file basename\n   * @param  {String} filepath []\n   * @return {String}          []\n   */\n\n\n  _class.prototype.basename = function basename() {\n    var filepath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.__filename;\n\n    return _path2.default.basename(filepath, '.js');\n  };\n  /**\n   * parse module from filepath\n   * @param  {String} filepath []\n   * @return {String}          []\n   */\n\n\n  _class.prototype.parseModuleFromPath = function parseModuleFromPath() {\n    var filepath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.__filename;\n\n    if (!filepath) {\n      return '';\n    }\n    if (think.mode !== think.mode_module) {\n      return '';\n    }\n    var prefix = think.APP_PATH + think.sep;\n    var pos = filepath.indexOf(prefix);\n    if (pos === -1) {\n      return '';\n    }\n    var nextPos = filepath.indexOf(think.sep, pos + prefix.length);\n    if (nextPos === -1) {\n      return '';\n    }\n    var module = filepath.slice(pos + prefix.length, nextPos);\n    if (think.module.indexOf(module) > -1) {\n      return module;\n    }\n    return '';\n  };\n\n  return _class;\n}();\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/http_base.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Base Class\n * @param  {Object} http\n * @return {Class}\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  _class.prototype.init = function init() {\n    var http = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.http = http;\n  };\n  /**\n   * get or set config\n   * @param  {string} name  [config name]\n   * @param  {mixed} value [config value]\n   * @return {mixed}       []\n   */\n\n\n  _class.prototype.config = function config(name, value) {\n    var module = this.parseModuleFromPath();\n    if (module) {\n      return think.config(name, value, module);\n    }\n    return think.config(name, value, this.http._config);\n  };\n  /**\n   * change module/controller/action when invoked action\n   * @param  {Object} controller []\n   * @param  {String} action     []\n   * @return {Promise}            []\n   */\n\n\n  _class.prototype._transMCAAction = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(controller, action) {\n      var http, source, err, result;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              //change module/controller/action when invoke another action\n              //make this.display() correct when invoked without any paramters\n              http = this.http;\n              source = {\n                module: http.module,\n                controller: http.controller,\n                action: http.action\n              };\n              //parse module from pathname\n\n              http.module = think.config('default_module');\n              if (think.mode === think.mode_module) {\n                http.module = controller.__filename.split(think.sep).reverse()[2];\n              }\n\n              http.controller = this.basename(controller.__filename);\n              http.action = action;\n              if (action !== '__call') {\n                action = think.camelCase(action) + 'Action';\n              }\n              err = void 0;\n              _context.next = 10;\n              return controller.invoke(action, controller).catch(function (e) {\n                err = e;\n              });\n\n            case 10:\n              result = _context.sent;\n\n              think.extend(http, source);\n              return _context.abrupt('return', err ? _promise2.default.reject(err) : result);\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function _transMCAAction(_x2, _x3) {\n      return _ref.apply(this, arguments);\n    }\n\n    return _transMCAAction;\n  }();\n  /**\n   * invoke action\n   * @param  {Object} controller [controller instance]\n   * @param  {String} action     [action name]\n   * @param  {Mixed} data       [action params]\n   * @return {}            []\n   */\n\n\n  _class.prototype.action = function action(controller, _action) {\n    var transMCA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (think.isString(controller)) {\n      controller = this.controller(controller);\n    }\n    if (!transMCA) {\n      if (_action !== '__call') {\n        _action = think.camelCase(_action) + 'Action';\n      }\n      return controller.invoke(_action, controller);\n    }\n    return this._transMCAAction(controller, _action);\n  };\n  /**\n   * get or set cache\n   * @param  {String} name    [cache name]\n   * @param  {mixed} value   [cache value]\n   * @param  {Object} options [cache options]\n   * @return {}         []\n   */\n\n\n  _class.prototype.cache = function cache(name, value, options) {\n    if (think.isString(options)) {\n      options = { type: options };\n    }\n    options = think.extend({}, this.config('cache'), options);\n    return think.cache(name, value, options);\n  };\n  /**\n   * invoke hook\n   * @param  {String} event [event name]\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.hook = function hook(event, data) {\n    return think.hook.exec(event, this.http, data);\n  };\n  /**\n   * get module\n   * @param  {String} module []\n   * @return {String}        []\n   */\n\n\n  _class.prototype._getModule = function _getModule(module) {\n    if (module) {\n      if (!think.isString(module)) {\n        throw new Error('module argument must be string');\n      }\n      if (think.module.indexOf(module) === -1) {\n        throw new Error('module `' + module + '` not exist');\n      }\n    } else {\n      module = this.parseModuleFromPath() || this.http.module;\n    }\n    return module;\n  };\n  /**\n   * get model\n   * @param  {String} name    [model name]\n   * @param  {Object} options [model options]\n   * @return {Object}         [model instance]\n   */\n\n\n  _class.prototype.model = function model() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'base';\n    var options = arguments[1];\n    var module = arguments[2];\n\n    if (think.isString(options)) {\n      options = { type: options };\n    }\n    module = this._getModule(module);\n    options = think.extend({}, think.config('db', undefined, module), options);\n    return think.model(name, options, module);\n  };\n  /**\n   * get controller\n   * this.controller('home/controller/test')\n   * @param  {String} name [controller name]\n   * @return {Object}      []\n   */\n\n\n  _class.prototype.controller = function controller(name, module) {\n    module = this._getModule(module);\n    var Cls = think.lookClass(name, 'controller', module);\n    return new Cls(this.http);\n  };\n  /**\n   * get service\n   * @param  {String} name [service name]\n   * @return {Object}      []\n   */\n\n\n  _class.prototype.service = function service(name, module) {\n    module = this._getModule(module);\n    return think.service(name, this.http, module);\n  };\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/util/cookie.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _crypto = require('crypto');\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * cookie\n * @type {Object}\n */\nvar Cookie = {\n  /**\n   * parse cookie\n   * @param  {String} str [cookie string]\n   * @return {Object}     []\n   */\n  parse: function parse(str) {\n    var data = {};\n    if (!str) {\n      return data;\n    }\n    str.split(/; */).forEach(function (item) {\n      var pos = item.indexOf('=');\n      if (pos === -1) {\n        return;\n      }\n      var key = item.substr(0, pos).trim();\n      var val = item.substr(pos + 1).trim();\n      if ('\"' === val[0]) {\n        val = val.slice(1, -1);\n      }\n      // only assign once\n      if (undefined === data[key]) {\n        try {\n          data[key] = decodeURIComponent(val);\n        } catch (e) {\n          data[key] = val;\n        }\n      }\n    });\n    return data;\n  },\n  /**\n   * stringify cookie\n   * @param  {String} name    [cookie name]\n   * @param  {String} val     [cookie value]\n   * @param  {Object} options [cookie options]\n   * @return {String}         []\n   */\n  stringify: function stringify(name, value, options) {\n    options = options || {};\n    var item = [name + '=' + encodeURIComponent(value)];\n    if (options.maxage) {\n      item.push('Max-Age=' + options.maxage);\n    }\n    if (options.domain) {\n      item.push('Domain=' + options.domain);\n    }\n    if (options.path) {\n      item.push('Path=' + options.path);\n    }\n    var expires = options.expires;\n    if (expires) {\n      if (!think.isDate(expires)) {\n        expires = new Date(expires);\n      }\n      item.push('Expires=' + expires.toUTCString());\n    }\n    if (options.httponly) {\n      item.push('HttpOnly');\n    }\n    if (options.secure) {\n      item.push('Secure');\n    }\n    return item.join('; ');\n  },\n  /**\n   * sign cookie\n   * @param  {String} val    [cookie value]\n   * @param  {String} secret [cookie sign]\n   * @return {String}        []\n   */\n  sign: function sign(val) {\n    var secret = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    secret = _crypto2.default.createHmac('sha256', secret).update(val).digest('base64');\n    secret = secret.replace(/\\=+$/, '');\n    return val + '.' + secret;\n  },\n  /**\n   * unsign cookie\n   * @param  {String} val    [signed cookie value]\n   * @param  {String} secret [cookie sign]\n   * @return {String}        []\n   */\n  unsign: function unsign(val, secret) {\n    var str = val.slice(0, val.lastIndexOf('.'));\n    return Cookie.sign(str, secret) === val ? str : '';\n  }\n};\n\nexports.default = Cookie;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/http.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _values = require('babel-runtime/core-js/object/values');\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _mime = require('mime');\n\nvar _mime2 = _interopRequireDefault(_mime);\n\nvar _cookie2 = require('../util/cookie.js');\n\nvar _cookie3 = _interopRequireDefault(_cookie2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PAYLOAD_METHODS = ['POST', 'PUT', 'PATCH'];\n\n/**\n * wrap for request & response\n * @type {Object}\n */\n\nvar _class = function () {\n  /**\n   * constructor\n   * @return {} []\n   */\n  function _class(req, res) {\n    (0, _classCallCheck3.default)(this, _class);\n\n    this.init(req, res);\n  }\n  /**\n   * init method\n   * @param  {Object} req [request]\n   * @param  {Object} res [response]\n   * @return {}     []\n   */\n\n\n  _class.prototype.init = function init(req, res) {\n    var _this = this;\n\n    //request object\n    this.req = req;\n    //response object\n    this.res = res;\n\n    //set http start time\n    this.startTime = Date.now();\n\n    this.parseRequest();\n\n    //set request timeout\n    var timeout = think.config('timeout');\n    this.timeoutTimer = 0;\n    if (timeout) {\n      this.timeoutTimer = res.setTimeout(timeout * 1000, function () {\n        var err = new Error('request timeout');\n        err.code = 'REQUEST_TIMEOUT';\n        _this.error = err;\n        return think.statusAction(500, _this).catch(function () {});\n      });\n    }\n  };\n  /**\n   * parse properties\n   * @return {} []\n   */\n\n\n  _class.prototype.parseRequest = function parseRequest() {\n    this.url = this.req.url;\n    this.version = this.req.httpVersion;\n    this.method = this.req.method;\n    this.headers = this.req.headers;\n    this.host = this.headers.host || '';\n    this.hostname = '';\n    this.pathname = '';\n\n    this.query = {};\n    this._file = {};\n    this._post = {};\n    this._cookie = {};\n    this._sendCookie = {};\n    this._get = {};\n\n    //store all other properties\n    this._prop = {};\n\n    this._contentTypeIsSend = false; //aleady send content-type header\n    this._isResource = false; //is resource request\n    this._isEnd = false; //request is end\n\n    this._outputContentPromise = [];\n    this._view = null; //view instance\n    this._session = null; //session instance\n    this._lang = ''; //language\n    this._langAsViewPath = false; //language as view path\n    this._config = null; // config\n    this._error = undefined; //error message\n    this._theme = undefined; //theme\n    this.error = null; //error object\n    this._cli = !!think.cli; //cli request\n\n    this.module = '';\n    this.controller = '';\n    this.action = '';\n\n    this.payload = null; //request payload, Buffer\n    this.tpl_file = ''; //template file path\n\n    //optimize for homepage request\n    if (this.req.url === '/') {\n      this.pathname = '/';\n      var pos = this.host.indexOf(':');\n      this.hostname = pos === -1 ? this.host : this.host.slice(0, pos);\n    } else {\n      var urlInfo = _url2.default.parse('//' + this.host + this.req.url, true, true);\n      //can not use decodeURIComponent, pathname may be has encode / chars\n      //decodeURIComponent value after parse route\n      //remove unsafe chars in pathname\n      this.pathname = this.normalizePathname(urlInfo.pathname);\n      this.hostname = urlInfo.hostname;\n      var query = urlInfo.query;\n      if (!think.isEmpty(query)) {\n        this.query = query;\n        this._get = think.extend({}, query);\n      }\n    }\n  };\n  /**\n   * get or set property\n   */\n\n\n  _class.prototype.prop = function prop(name, value) {\n    if (value === undefined) {\n      return this._prop[name];\n    }\n    this._prop[name] = value;\n    return this;\n  };\n  /**\n   * exec\n   * @return Promise            []\n   */\n\n\n  _class.prototype.run = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return think.hook.exec('request_begin', this);\n\n            case 2:\n              if (!(PAYLOAD_METHODS.indexOf(this.req.method) > -1)) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 5;\n              return this.parsePayload();\n\n            case 5:\n              return _context.abrupt('return', this);\n\n            case 6:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function run() {\n      return _ref.apply(this, arguments);\n    }\n\n    return run;\n  }();\n  /**\n   * check request has post data\n   * @return {Boolean} []\n   */\n\n\n  _class.prototype.hasPayload = function hasPayload() {\n    if ('transfer-encoding' in this.req.headers) {\n      return true;\n    }\n    return (this.req.headers['content-length'] | 0) > 0;\n  };\n  /**\n   * get payload data\n   * @param  {String} encoding [payload data encoding]\n   * @return {}          []\n   */\n\n\n  _class.prototype.getPayload = function getPayload() {\n    var _this2 = this;\n\n    var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf8';\n\n\n    var _getPayload = function _getPayload() {\n      if (_this2.payload) {\n        return _promise2.default.resolve(_this2.payload);\n      }\n      if (!_this2.req.readable) {\n        return _promise2.default.resolve(new Buffer(0));\n      }\n      var buffers = [];\n      var deferred = think.defer();\n      _this2.req.on('data', function (chunk) {\n        buffers.push(chunk);\n      });\n      _this2.req.on('end', function () {\n        _this2.payload = Buffer.concat(buffers);\n        deferred.resolve(_this2.payload);\n      });\n      _this2.req.on('error', function () {\n        _this2.res.statusCode = 400;\n        _this2.end();\n      });\n      return deferred.promise;\n    };\n\n    return _getPayload().then(function (buffer) {\n      return encoding === true ? buffer : buffer.toString(encoding);\n    });\n  };\n  /**\n   * parse payload from request\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.parsePayload = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.hasPayload()) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 3;\n              return think.hook('payload_parse', this);\n\n            case 3:\n              _context2.next = 5;\n              return think.hook('payload_validate', this);\n\n            case 5:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function parsePayload() {\n      return _ref2.apply(this, arguments);\n    }\n\n    return parsePayload;\n  }();\n\n  /**\n   * normalize pathname, remove hack chars\n   * @param  {String} pathname []\n   * @return {String}          []\n   */\n\n\n  _class.prototype.normalizePathname = function normalizePathname(pathname) {\n    var length = pathname.length;\n    var i = 0,\n        chr = void 0,\n        result = [],\n        value = '';\n    while (i < length) {\n      chr = pathname[i++];\n      if (chr === '/' || chr === '\\\\') {\n        if (value && decodeURIComponent(value)[0] !== '.') {\n          result.push(value);\n        }\n        value = '';\n      } else {\n        value += chr;\n      }\n    }\n    if (value && decodeURIComponent(value) !== '.') {\n      result.push(value);\n    }\n    return result.join('/');\n  };\n  /*\n   * get or set config\n   * @param  {string} name  [config name]\n   * @param  {mixed} value [config value]\n   * @return {mixed}       []\n   */\n\n\n  _class.prototype.config = function config(name, value) {\n    return think.config(name, value, this._config);\n  };\n  /**\n   * get or set content type\n   * @param  {String} ext [file ext]\n   * @return {}     []\n   */\n\n\n  _class.prototype.type = function type(contentType, encoding) {\n    if (!contentType) {\n      return (this.headers['content-type'] || '').split(';')[0].trim();\n    }\n    if (this._contentTypeIsSend) {\n      return;\n    }\n    if (contentType.indexOf('/') === -1) {\n      contentType = _mime2.default.lookup(contentType);\n    }\n    if (encoding !== false && contentType.toLowerCase().indexOf('charset=') === -1) {\n      contentType += '; charset=' + (encoding || this.config('encoding'));\n    }\n    this.header('Content-Type', contentType);\n  };\n  /**\n   * get user agent\n   * @return {String} []\n   */\n\n\n  _class.prototype.userAgent = function userAgent() {\n    return this.headers['user-agent'] || '';\n  };\n  /**\n   * get page request referrer\n   * @param  {String} host [only get referrer host]\n   * @return {String}      []\n   */\n\n\n  _class.prototype.referrer = function referrer(host) {\n    var referer = this.headers.referer || this.headers.referrer || '';\n    if (!referer || !host) {\n      return referer;\n    }\n    var info = _url2.default.parse(referer);\n    return info.hostname;\n  };\n  /**\n   * check http method is get\n   * @return {Boolean} []\n   */\n\n\n  _class.prototype.isGet = function isGet() {\n    return this.method === 'GET';\n  };\n  /**\n   * check http method is post\n   * @return {Boolean} []\n   */\n\n\n  _class.prototype.isPost = function isPost() {\n    return this.method === 'POST';\n  };\n  /**\n   * is cli request\n   * @return {Boolean} []\n   */\n\n\n  _class.prototype.isCli = function isCli() {\n    return this._cli;\n  };\n  /**\n   * is ajax request\n   * @param  {String}  method []\n   * @return {Boolean}        []\n   */\n\n\n  _class.prototype.isAjax = function isAjax(method) {\n    if (method && this.method !== method.toUpperCase()) {\n      return false;\n    }\n    return this.headers['x-requested-with'] === 'XMLHttpRequest';\n  };\n  /**\n   * is jsonp request\n   * @param  {String}  name [callback name]\n   * @return {Boolean}      []\n   */\n\n\n  _class.prototype.isJsonp = function isJsonp(name) {\n    name = name || this.config('callback_name');\n    return !!this.get(name);\n  };\n  /**\n   * get or set get params\n   * @param  {String} name []\n   * @return {Object | String}      []\n   */\n\n\n  _class.prototype.get = function get(name, value) {\n    if (value === undefined) {\n      if (name === undefined) {\n        return this._get;\n      } else if (think.isString(name)) {\n        //may be value is false or 0\n        value = this._get[name];\n        if (value === undefined) {\n          value = '';\n        }\n        return value;\n      }\n      this._get = name;\n    } else {\n      this._get[name] = value;\n    }\n  };\n  /**\n   * get or set post params\n   * @param  {String} name []\n   * @return {Object | String}      []\n   */\n\n\n  _class.prototype.post = function post(name, value) {\n    if (value === undefined) {\n      if (name === undefined) {\n        return this._post;\n      } else if (think.isString(name)) {\n        //may be value is false or 0\n        value = this._post[name];\n        if (value === undefined) {\n          value = '';\n        }\n        return value;\n      }\n      this._post = name;\n    } else {\n      this._post[name] = value;\n    }\n  };\n  /**\n   * get post or get params\n   * @param  {String} name []\n   * @return {Object | String}      []\n   */\n\n\n  _class.prototype.param = function param(name) {\n    if (name === undefined) {\n      return think.extend({}, this._get, this._post);\n    }\n    return this._post[name] || this._get[name] || '';\n  };\n  /**\n   * get or set file data\n   * @param  {String} name []\n   * @return {Object}      []\n   */\n\n\n  _class.prototype.file = function file(name, value) {\n    if (value === undefined) {\n      if (name === undefined) {\n        return think.extend({}, this._file);\n      }\n      return think.extend({}, this._file[name]);\n    }\n    this._file[name] = value;\n  };\n  /**\n   * get or set header\n   * @param  {String} name  [header name]\n   * @param  {String} value [header value]\n   * @return {}       []\n   */\n\n\n  _class.prototype.header = function header(name, value) {\n    if (name === undefined) {\n      return this.headers;\n    } else if (value === undefined) {\n      return this.headers[name.toLowerCase()] || '';\n    }\n    //check content type is send\n    if (name.toLowerCase() === 'content-type') {\n      if (this._contentTypeIsSend) {\n        return;\n      }\n      this._contentTypeIsSend = true;\n    }\n    //set header\n    if (!this.res.headersSent) {\n      this.res.setHeader(name, value);\n    }\n  };\n  /**\n   * set http status\n   * @param  {Number} status []\n   * @return {}        []\n   */\n\n\n  _class.prototype.status = function status() {\n    var _status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n\n    var res = this.res;\n    if (!res.headersSent) {\n      res.statusCode = _status;\n    }\n    return this;\n  };\n  /**\n   * get uesr ip\n   * @return {String} [ip4 or ip6]\n   */\n\n\n  _class.prototype.ip = function ip(forward) {\n    var proxy = think.config('proxy_on') || this.host === this.hostname;\n    var userIP = void 0;\n    var localIP = '127.0.0.1';\n    if (proxy) {\n      if (forward) {\n        return (this.headers['x-forwarded-for'] || '').split(/\\s*,\\s*/).filter(function (item) {\n          item = item.trim();\n          if (think.isIP(item)) {\n            return item;\n          }\n        });\n      }\n      userIP = this.headers['x-real-ip'];\n    } else {\n      var connection = this.req.connection;\n      var socket = this.req.socket;\n      if (connection && connection.remoteAddress !== localIP) {\n        userIP = connection.remoteAddress;\n      } else if (socket && socket.remoteAddress !== localIP) {\n        userIP = socket.remoteAddress;\n      }\n    }\n    if (!userIP) {\n      return localIP;\n    }\n    if (userIP.indexOf(':') > -1) {\n      userIP = userIP.split(':').slice(-1)[0];\n    }\n    if (!think.isIP(userIP)) {\n      return localIP;\n    }\n    return userIP;\n  };\n  /**\n   * get or set language\n   * @return {String}           []\n   */\n\n\n  _class.prototype.lang = function lang(_lang, asViewPath) {\n    if (_lang) {\n      this._lang = _lang;\n      this._langAsViewPath = asViewPath;\n      return;\n    }\n    //get from property\n    if (this._lang) {\n      return this._lang;\n    }\n    //get from cookie\n    var key = this.config('locale').cookie_name;\n    var value = this.cookie(key);\n    if (value) {\n      this._lang = value;\n      return value;\n    }\n    //get from header\n    _lang = this.header('accept-language');\n    //language to lowercase\n    this._lang = (_lang.split(',')[0] || '').toLowerCase();\n    return this._lang;\n  };\n  /**\n   * get or set theme\n   * @param  {String} theme []\n   * @return {String}       []\n   */\n\n\n  _class.prototype.theme = function theme(_theme) {\n    if (_theme) {\n      this._theme = _theme;\n      return;\n    }\n    return this._theme;\n  };\n  /**\n   * get or set cookie\n   * @param  {} name    []\n   * @param  {} value   []\n   * @param  {} options []\n   * @return {}         []\n   */\n\n\n  _class.prototype.cookie = function cookie(name, value, options) {\n    //send cookies\n    if (name === true) {\n      if (think.isEmpty(this._sendCookie)) {\n        return;\n      }\n      var cookies = (0, _values2.default)(this._sendCookie).map(function (item) {\n        return _cookie3.default.stringify(item.name, item.value, item);\n      });\n      this.header('Set-Cookie', cookies);\n      this._sendCookie = {};\n      return;\n    }\n    //parse cookie\n    if (think.isEmpty(this._cookie) && this.headers.cookie) {\n      this._cookie = _cookie3.default.parse(this.headers.cookie);\n    }\n    if (name === undefined) {\n      return this._cookie;\n    } else if (value === undefined) {\n      return this._cookie[name] || this._sendCookie[name] && this._sendCookie[name].value || '';\n    }\n    //set cookie\n    if (typeof options === 'number') {\n      options = { timeout: options };\n    }\n    options = think.extend({}, this.config('cookie'), options);\n    if (value === null) {\n      options.timeout = -1000;\n    }\n    if (options.timeout !== 0) {\n      options.expires = new Date(Date.now() + options.timeout * 1000);\n    }\n    if (options.timeout > 0) {\n      options.maxage = options.timeout;\n    }\n    options.name = name;\n    options.value = value;\n    this._sendCookie[name] = options;\n  };\n  /**\n   * redirect\n   * @param  {String} url  [redirect url]\n   * @param  {Number} code []\n   * @return {}      []\n   */\n\n\n  _class.prototype.redirect = function redirect(url, code) {\n    this.res.statusCode = code || 302;\n    this.header('Location', url || '/');\n    this.end();\n  };\n  /**\n   * send time\n   * @param  {String} name [time type]\n   * @return {}      []\n   */\n\n\n  _class.prototype.sendTime = function sendTime(name) {\n    var time = Date.now() - this.startTime;\n    this.header('X-' + (name || 'EXEC-TIME'), time + 'ms');\n  };\n  /**\n   * output with success errno & errmsg\n   * @param  {Object} data    [output data]\n   * @param  {String} message [errmsg]\n   * @return {Promise}         [pedding promise]\n   */\n\n\n  _class.prototype.success = function success() {\n    var _obj;\n\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n    var error = this.config('error');\n    var obj = (_obj = {}, _obj[error.key] = 0, _obj[error.msg] = message, _obj.data = data, _obj);\n    this.type(this.config('json_content_type'));\n    this.end(obj);\n  };\n  /**\n   * output with fail errno & errmsg\n   * @param  {Number} errno  [error number]\n   * @param  {String} errmsg [error message]\n   * @param  {Object} data   [output data]\n   * @return {Promise}        [pedding promise]\n   */\n\n\n  _class.prototype.fail = function fail(errno) {\n    var errmsg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n    var obj = void 0;\n    var error = this.config('error');\n    if (think.isObject(errno)) {\n      obj = think.extend({}, errno);\n    } else {\n      var _obj2;\n\n      if (/^[A-Z\\_]+$/.test(errno)) {\n        var msg = this.locale(errno);\n        if (think.isArray(msg)) {\n          errno = msg[0];\n          errmsg = msg[1];\n        }\n      }\n      if (!think.isNumber(errno)) {\n        data = errmsg;\n        errmsg = errno;\n        errno = error.default_errno;\n      }\n      //read errmsg from config/locale/[lang].js\n      if (!errmsg) {\n        errmsg = this.locale(errno) || '';\n      }\n      obj = (_obj2 = {}, _obj2[error.key] = errno, _obj2[error.msg] = errmsg, _obj2);\n      if (data) {\n        obj.data = data;\n      }\n    }\n    this.type(this.config('json_content_type'));\n    this.end(obj);\n  };\n  /**\n   * output with jsonp\n   * @param  {Object} data [output data]\n   * @return {}      []\n   */\n\n\n  _class.prototype.jsonp = function jsonp(data) {\n    this.type(this.config('json_content_type'));\n    var callback = this.get(this.config('callback_name'));\n    //remove unsafe chars\n    callback = callback.replace(/[^\\w\\.]/g, '');\n    if (callback) {\n      data = callback + '(' + (data !== undefined ? (0, _stringify2.default)(data) : '') + ')';\n    }\n    this.end(data);\n  };\n  /**\n   * output with json\n   * @param  {Object} data [output data]\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.json = function json(data) {\n    this.type(this.config('json_content_type'));\n    this.end(data);\n  };\n  /**\n   * get view instance\n   * @return {Object} []\n   */\n\n\n  _class.prototype.view = function view() {\n    if (!this._view) {\n      var cls = think.require('view');\n      this._view = new cls(this);\n    }\n    return this._view;\n  };\n  /**\n   * set cache-control and expires header\n   * @return {} []\n   */\n\n\n  _class.prototype.expires = function expires(time) {\n    time = time * 1000;\n    var date = new Date(Date.now() + time);\n    this.header('Cache-Control', 'max-age=' + time);\n    this.header('Expires', date.toUTCString());\n  };\n  /**\n   * get locale value\n   * @param  {String} key []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.locale = function locale() {\n    return think.locale.apply(this, arguments);\n  };\n  /**\n  * get or set session\n  * @param  {String} name  [session name]\n  * @param  {mixed} value [session value]\n  * @return {Promise}       []\n  */\n\n\n  _class.prototype.session = function session(name, value) {\n    think.session(this);\n    var instance = this._session;\n    if (name === undefined) {\n      return instance.delete();\n    }\n    if (value !== undefined) {\n      return instance.set(name, value);\n    }\n    return instance.get(name);\n  };\n  /**\n   * write content\n   * @param  {mixed} obj      []\n   * @param  {String} encoding []\n   * @return {Promise}          []\n   */\n\n\n  _class.prototype.write = function write(obj) {\n    var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.config('encoding');\n\n    if (!this.res.connection) {\n      return;\n    }\n    this.type(this.config('view.content_type'));\n    this.cookie(true);\n    if (obj === undefined) {\n      return;\n    }\n    if (think.isPromise(obj)) {\n      //ignore Content-Type header before set\n      this._contentTypeIsSend = false;\n      throw new Error('can not write promise');\n    }\n    if (think.isArray(obj) || think.isObject(obj)) {\n      obj = (0, _stringify2.default)(obj);\n    } else if (!think.isBuffer(obj)) {\n      obj += '';\n    }\n\n    //write after end\n    if (this._isEnd) {\n      if (think.isBuffer(obj)) {\n        think.log('write after end, content is buffer', 'WARNING');\n      } else {\n        var pos = obj.indexOf('\\n');\n        if (pos > -1) {\n          obj = obj.slice(0, pos) + '...';\n        }\n        think.log('write after end, content is `' + obj + '`', 'WARNING');\n      }\n      return;\n    }\n    var outputConfig = this.config('output_content');\n    if (!outputConfig) {\n      return this.res.write(obj, encoding);\n    }\n    var fn = think.co.wrap(outputConfig);\n    var promise = fn(obj, encoding, this);\n    this._outputContentPromise.push(promise);\n  };\n  /**\n   * end\n   * @return {} []\n   */\n\n\n  _class.prototype._end = function _end() {\n    var _this3 = this;\n\n    this.cookie(true);\n    this.res.end();\n\n    process.nextTick(function () {\n      _this3._afterEnd();\n    });\n  };\n  /**\n   * after end\n   * @return {} []\n   */\n\n\n  _class.prototype._afterEnd = function _afterEnd() {\n    var _this4 = this;\n\n    //flush session\n    if (this._session && this._session.flush) {\n      this._session.flush();\n    }\n\n    //show request info\n    if (this.config('log_request') && !this._isResource) {\n      think.log(function (colors) {\n        var msg = [_this4.method, _this4.url, colors.cyan('' + _this4.res.statusCode)].join(' ');\n        return msg;\n      }, 'HTTP', this.startTime);\n    }\n\n    //remove upload tmp files\n    if (!think.isEmpty(this._file)) {\n      var key, filepath;\n      for (key in this._file) {\n        filepath = this._file[key].path;\n        if (think.isFile(filepath)) {\n          _fs2.default.unlink(filepath, function () {});\n        }\n      }\n    }\n  };\n  /**\n   * http end\n   * @return {} []\n   */\n\n\n  _class.prototype.end = function end(obj, encoding) {\n    var _this5 = this;\n\n    if (this._isEnd) {\n      return;\n    }\n    if (this.timeoutTimer) {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = 0;\n    }\n    this.write(obj, encoding);\n    //set http end flag\n    this._isEnd = true;\n    if (!this._outputContentPromise.length) {\n      return this._end();\n    }\n\n    return _promise2.default.all(this._outputContentPromise).then(function () {\n      _this5._outputContentPromise = [];\n      _this5._end();\n    }).catch(function () {\n      _this5._end();\n    });\n  };\n\n  return _class;\n}();\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/util/await.js":"'use strict';\n/**\n * waiting class\n * @type {}\n */\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function () {\n  /**\n   * constructor\n   * @param  {} args []\n   * @return {}         []\n   */\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n\n    this.init();\n  }\n  /**\n   * init\n   * @return {} []\n   */\n\n\n  _class.prototype.init = function init() {\n    this.queue = {};\n  };\n  /**\n   * run\n   * @param  {String}   key []\n   * @param  {Function} fn  []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.run = function run(key, fn) {\n    var _this = this;\n\n    if (!(key in this.queue)) {\n      this.queue[key] = [];\n      return _promise2.default.resolve(fn()).then(function (data) {\n        process.nextTick(function () {\n          _this.queue[key].forEach(function (deferred) {\n            return deferred.resolve(data);\n          });\n          delete _this.queue[key];\n        });\n        return data;\n      }).catch(function (err) {\n        process.nextTick(function () {\n          _this.queue[key].forEach(function (deferred) {\n            return deferred.reject(err);\n          });\n          delete _this.queue[key];\n        });\n        return think.reject(err);\n      });\n    } else {\n      var deferred = think.defer();\n      this.queue[key].push(deferred);\n      return deferred.promise;\n    }\n  };\n\n  return _class;\n}();\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/think_validate.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _validator = require('../util/validator.js');\n\nvar _validator2 = _interopRequireDefault(_validator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * validate data\n * {\n *   name: {\n *     value: 'test',\n *     required: true,\n *     length: [4, 20],\n *     email: true\n *   },\n *   pwd: {\n *     value: '12345678',\n *     required: true,\n *     length: [6, 20]\n *   }\n *   confirm_pwd: {\n *     value: '12345678',\n *     required: true,\n *     equals: 'pwd'\n *   }\n * }\n * @param  {String | Object}   name     []\n * @param  {Function} callback []\n * @return {}            []\n */\n\n//get error message\nvar _getValidateErrorMsg = function _getValidateErrorMsg(type, name, value, args, msgs) {\n  var key = 'validate_' + type;\n  var keyWithName = key + '_' + name;\n  var msg = msgs[keyWithName];\n  if (!msg && think.locale(keyWithName) !== keyWithName) {\n    msg = think.locale(keyWithName);\n  }\n  msg = msg || msgs[key];\n  if (!msg && think.locale(key) !== key) {\n    msg = think.locale(key);\n  }\n  msg = msg || think.locale('PARAMS_NOT_VALID');\n  return msg.replace('{name}', name).replace('{value}', value).replace('{args}', args.join(','));\n};\n\nvar _getValidateRuleFnAndArgs = function _getValidateRuleFnAndArgs(type, args, rules) {\n  var fn = _validator2.default[type];\n  if (!think.isFunction(fn)) {\n    throw new Error(think.locale('CONFIG_NOT_FUNCTION', type + ' type'));\n  }\n  if (think.isBoolean(args)) {\n    args = [];\n  } else if (!think.isArray(args)) {\n    args = [args];\n  }\n  var parseArgs = _validator2.default['_' + type];\n  //parse args\n  if (think.isFunction(parseArgs)) {\n    args = parseArgs(args, rules);\n  }\n  return { fn: fn, args: args };\n};\n\n/**\n * get all rule values, for default function to get value\n * @param  {Object} rules []\n * @return {Object}       []\n */\nvar _getRuleValues = function _getRuleValues(rules) {\n  var ret = {};\n  for (var name in rules) {\n    ret[name] = rules[name].value;\n  }\n  return ret;\n};\n\n/**\n * to boolean\n * @param  {Mixed} value []\n * @return {Boolean}       []\n */\nvar _toBoolean = function _toBoolean(value) {\n  return ['yes', 'on', '1', 'true', true].indexOf(value) > -1;\n};\n\n/**\n * parse value\n * @param  {Mixed} value []\n * @param  {Object} item  []\n * @return {Mixed}       []\n */\nvar _parseValue = function _parseValue(value, item) {\n  if (item.int || item.type === 'int') {\n    return parseInt(value);\n  } else if (item.float || item.type === 'float') {\n    return parseFloat(value);\n  } else if (item.boolean || item.type === 'boolean') {\n    return _toBoolean(value);\n  }\n  return value;\n};\n/**\n * get item value\n * @param  {Object} item   []\n * @param  {Object} values []\n * @return {Mixed}        []\n */\nvar _getItemValue = function _getItemValue(item, values, parse) {\n  //get item value\n  //avoid default is undefined, but check type is string\n  var itemValue = item.value;\n  //trim value\n  if (item.trim && itemValue && itemValue.trim) {\n    itemValue = itemValue.trim();\n  }\n  var _default = item.default;\n  if (!itemValue && !think.isTrueEmpty(_default)) {\n    itemValue = item.default;\n  }\n  if (think.isFunction(itemValue)) {\n    itemValue = itemValue.call(values);\n  }\n\n  //make data to array when type is array\n  if (item.value && item.array && !think.isArray(item.value)) {\n    if (think.isString(itemValue)) {\n      try {\n        itemValue = JSON.parse(itemValue);\n      } catch (e) {\n        itemValue = itemValue.split(/\\s*,\\s*/);\n      }\n    } else {\n      itemValue = [itemValue];\n    }\n  }\n  //make data to object when type is object\n  else if (item.value && item.object && think.isString(itemValue)) {\n      try {\n        itemValue = JSON.parse(itemValue);\n      } catch (e) {}\n    } else if (item.boolean) {\n      itemValue = _toBoolean(itemValue);\n    }\n\n  //parse value\n  if (parse) {\n    if (item.array) {\n      itemValue = itemValue.map(function (it) {\n        return _parseValue(it, item);\n      });\n    } else {\n      itemValue = _parseValue(itemValue, item);\n    }\n  }\n\n  return itemValue;\n};\n\nvar Validate = function Validate(name, callback) {\n  // register validate callback\n  if (think.isString(name)) {\n    // think.validate('test', function(){})\n    if (think.isFunction(callback)) {\n      _validator2.default[name] = callback;\n      return;\n    }\n    // get validator callback\n    return _validator2.default[name];\n  }\n  return Validate.exec(name, callback);\n};\n\n/**\n * exec validate\n * @param  {Object} rules []\n * @param  {Object} msgs  []\n * @return {Object}       []\n */\nValidate.exec = function (rules) {\n  var msgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var ret = {};\n  var values = _getRuleValues(rules);\n\n  var _loop = function _loop(name) {\n    var item = rules[name];\n    var itemValue = _getItemValue(item, values);\n\n    var _loop2 = function _loop2(vtype) {\n      if (vtype === 'value' || vtype === 'default' || vtype === 'trim') {\n        return 'continue';\n      }\n      //if has array rule, then foreach check value for every rule\n      if (item.array && vtype !== 'array' && think.isArray(itemValue)) {\n        var flag = itemValue.some(function (ivalue) {\n          var _getValidateRuleFnAnd = _getValidateRuleFnAndArgs(vtype, item[vtype], rules),\n              fn = _getValidateRuleFnAnd.fn,\n              args = _getValidateRuleFnAnd.args;\n\n          var result = fn.apply(undefined, [ivalue].concat(args));\n          if (!result) {\n            var msg = _getValidateErrorMsg(vtype, name, ivalue, args, msgs);\n            ret[name] = msg;\n            return true;\n          }\n        });\n        if (flag) {\n          return 'break';\n        }\n      } else {\n        var _getValidateRuleFnAnd2 = _getValidateRuleFnAndArgs(vtype, item[vtype], rules),\n            fn = _getValidateRuleFnAnd2.fn,\n            args = _getValidateRuleFnAnd2.args;\n\n        var result = fn.apply(undefined, [itemValue].concat(args));\n        if (!result) {\n          var msg = _getValidateErrorMsg(vtype, name, itemValue, args, msgs);\n          ret[name] = msg;\n          return 'break';\n        }\n      }\n    };\n\n    _loop3: for (var vtype in item) {\n      var _ret2 = _loop2(vtype);\n\n      switch (_ret2) {\n        case 'continue':\n          continue;\n\n        case 'break':\n          break _loop3;}\n    }\n  };\n\n  for (var name in rules) {\n    _loop(name);\n  }\n  return ret;\n};\n\n/**\n * get new values for rules\n * @param  {Object} rules []\n * @return {Object}       []\n */\nValidate.values = function (rules) {\n  var ret = {};\n  var values = _getRuleValues(rules);\n  for (var name in rules) {\n    var _itemValue = _getItemValue(rules[name], values, true);\n    ret[name] = _itemValue;\n  }\n  return ret;\n};\n\n/**\n * parse string rule to object\n * @param  {String} rule []\n * @return {Object}      []\n */\nValidate.parse = function (rule) {\n  var rules = rule.split('|');\n  var ret = {};\n  rules.forEach(function (item) {\n    item = item.trim();\n    if (!item) {\n      return;\n    }\n    var pos = item.indexOf(':');\n    if (pos > -1) {\n      var name = item.substr(0, pos);\n      var args = item.substr(pos + 1).trim();\n      if (args[0] === '{' || args[0] === '[') {\n        var value = new Function('', 'return ' + args)();\n        args = name === 'default' ? value : [value];\n      } else if (name !== 'default') {\n        args = args.split(/\\s*,\\s*/);\n      }\n      ret[name] = args;\n    } else {\n      ret[item] = true;\n    }\n  });\n  return ret;\n};\n\nexports.default = Validate;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/util/validator.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _net = require('net');\n\nvar _net2 = _interopRequireDefault(_net);\n\nvar _validator = require('validator');\n\nvar _validator2 = _interopRequireDefault(_validator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Validator\n * @type {Object}\n */\nvar Validator = {};\n/**\n * check value is set\n * @param  {String} value []\n * @return {Boolean}       []\n */\n\n\n//https://github.com/chriso/validator.js\nValidator.required = function (value) {\n  return !think.isEmpty(value);\n};\n/**\n * The field under validation must be present if the anotherfield field is equal to any value.\n * @param  {String}    value        []\n * @param  {Stromg}    anotherfield []\n * @param  {Array} values       []\n * @return {Boolean}                 []\n */\nValidator.requiredIf = function (value, anotherField) {\n  for (var _len = arguments.length, values = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    values[_key - 2] = arguments[_key];\n  }\n\n  if (values.indexOf(anotherField) > -1) {\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse requiredIf args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredIf = function (args, data) {\n  var arg0 = args[0];\n  args[0] = data[arg0] ? data[arg0].value : '';\n  return args;\n};\n/**\n * The field under validation must be present not if the anotherfield field is equal to any value.\n * @param  {String}    value        []\n * @param  {Stromg}    anotherfield []\n * @param  {Array} values       []\n * @return {Boolean}                 []\n */\nValidator.requiredNotIf = function (value, anotherField) {\n  for (var _len2 = arguments.length, values = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    values[_key2 - 2] = arguments[_key2];\n  }\n\n  if (values.indexOf(anotherField) === -1) {\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse requiredNotIf args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredNotIf = function (args, data) {\n  return Validator._requiredIf(args, data);\n};\n/**\n * The field under validation must be present only if any of the other specified fields are present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWith = function (value) {\n  for (var _len3 = arguments.length, anotherFields = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    anotherFields[_key3 - 1] = arguments[_key3];\n  }\n\n  var flag = anotherFields.some(function (item) {\n    return Validator.required(item);\n  });\n  if (flag) {\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required with args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWith = function (args, data) {\n  return args.map(function (item) {\n    return data[item] ? data[item].value : '';\n  });\n};\n/**\n * The field under validation must be present only if all of the other specified fields are present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWithAll = function (value) {\n  for (var _len4 = arguments.length, anotherFields = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    anotherFields[_key4 - 1] = arguments[_key4];\n  }\n\n  var flag = anotherFields.every(function (item) {\n    return Validator.required(item);\n  });\n  if (flag) {\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required with all args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWithAll = function (args, data) {\n  return Validator._requiredWith(args, data);\n};\n/**\n * The field under validation must be present only when any of the other specified fields are not present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWithout = function (value) {\n  for (var _len5 = arguments.length, anotherFields = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    anotherFields[_key5 - 1] = arguments[_key5];\n  }\n\n  var flag = anotherFields.some(function (item) {\n    return !Validator.required(item);\n  });\n  if (flag) {\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required without args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWithout = function (args, data) {\n  return Validator._requiredWith(args, data);\n};\n/**\n * The field under validation must be present only when all of the other specified fields are not present.\n * @param  {String}    value         []\n * @param  {Array} anotherFields []\n * @return {Boolean}                  []\n */\nValidator.requiredWithoutAll = function (value) {\n  for (var _len6 = arguments.length, anotherFields = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    anotherFields[_key6 - 1] = arguments[_key6];\n  }\n\n  var flag = anotherFields.every(function (item) {\n    return !Validator.required(item);\n  });\n  if (flag) {\n    return Validator.required(value);\n  }\n  return true;\n};\n/**\n * parse required without all args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._requiredWithoutAll = function (args, data) {\n  return Validator._requiredWith(args, data);\n};\n/**\n * check if the string contains the seed.\n * @param  {String} value []\n * @param  {String} str   []\n * @return {Boolean}       []\n */\nValidator.contains = function (value, str) {\n  return !value || _validator2.default.contains(value, str);\n};\n/**\n * check if the string matches the comparison.\n * @param  {String} value      []\n * @param  {String} comparison []\n * @return {Boolean}            []\n */\nValidator.equals = function (value, comparison) {\n  return !value || _validator2.default.equals(value, comparison);\n};\n/**\n * parse equal args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._equals = function (args, data) {\n  var item = data[args[0]];\n  return [item ? item.value : ''];\n};\n/**\n * check if the string matches the comparison.\n * @param  {String} value      []\n * @param  {String} comparison []\n * @return {Boolean}            []\n */\nValidator.equalsValue = function (value, comparison) {\n  return !value || _validator2.default.equals(value, comparison);\n};\n/**\n * check if the string not matches the comparison.\n * @type {Boolean}\n */\nValidator.different = function (value, comparison) {\n  return !value || value !== comparison;\n};\n/**\n * parse different args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._different = function (args, data) {\n  return Validator._equals(args, data);\n};\n/**\n * check if the string is a date that's after the specified date (defaults to now).\n * @param  {String} value []\n * @param  {String} date  []\n * @return {Boolean}       []\n */\nValidator.after = function (value, date) {\n  return !value || _validator2.default.isAfter(value, date);\n};\n/**\n * parse after args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._after = function (args, data) {\n  var arg = args[0];\n  if (arg in data) {\n    return [data[arg].value];\n  }\n  return args;\n};\n/**\n * check if the string contains only letters (a-zA-Z).\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alpha = function (value) {\n  return !value || _validator2.default.isAlpha(value);\n};\n/**\n * check if the string contains only letters and dashes(a-zA-Z_).\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alphaDash = function (value) {\n  return !value || /^[A-Z_]+$/i.test(value);\n};\n/**\n * check if the string contains only letters and numbers.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alphaNumeric = function (value) {\n  return !value || _validator2.default.isAlphanumeric(value);\n};\n/**\n * check if the string contains only letters or numbers or dash.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.alphaNumericDash = function (value) {\n  return !value || /^\\w+$/i.test(value);\n};\n/**\n * check if the string contains ASCII chars only.\n * @param  {String} value []\n * @return {Boolean}      []\n */\nValidator.ascii = function (value) {\n  return !value || _validator2.default.isAscii(value);\n};\n/**\n * check if a string is base64 encoded.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.base64 = function (value) {\n  return !value || _validator2.default.isBase64(value);\n};\n/**\n * check if the string is a date that's before the specified date.\n * @param  {String} value []\n * @param  {String} date  []\n * @return {Boolean}       []\n */\nValidator.before = function (value, date) {\n  return !value || _validator2.default.isBefore(value, date);\n};\n/**\n * parse before args\n * @param  {Array} args []\n * @param  {Object} data []\n * @return {Array}      []\n */\nValidator._before = function (args, data) {\n  return Validator._after(args, data);\n};\n/**\n * check if the string's length (in bytes) falls in a range.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.byteLength = function (value, min, max) {\n  return !value || _validator2.default.isByteLength(value, min, max);\n};\n/**\n *  check if the string is a credit card.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.creditcard = function (value) {\n  return !value || _validator2.default.isCreditCard(value);\n};\n/**\n * check if the string is a valid currency amount. options is an object which defaults to\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.currency = function (value, options) {\n  return !value || _validator2.default.isCurrency(value, options);\n};\n/**\n * check if the string is a date.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.date = function (value) {\n  return !value || _validator2.default.isDate(value);\n};\n/**\n * check if the string represents a decimal number, such as 0.1, .3, 1.1, 1.00003, 4.0, etc.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.decimal = function (value) {\n  return !value || _validator2.default.isDecimal(value);\n};\n/**\n * check if the string is a number that's divisible by another.\n * @param  {Number} value  []\n * @param  {Number} number []\n * @return {Boolean}        []\n */\nValidator.divisibleBy = function (value, number) {\n  return !value || _validator2.default.isDivisibleBy(value, number);\n};\n/**\n * check if the string is an email. \n * options is an object which defaults to { \n *   allow_display_name: false, \n *   allow_utf8_locale_part: true, \n *   require_tld: true \n *  }. \n *  If allow_display_name is set to true, the validator will also match Display Name <email-address>. \n *  If allow_utf8_locale_part is set to false, the validator will not allow any non-English UTF8 character in email address' locale part. \n *  If require_tld is set to false, e-mail addresses without having TLD in their domain will also be matched.\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.email = function (value, options) {\n  return !value || _validator2.default.isEmail(value, options);\n};\n/**\n * check if the string is a fully qualified domain name (e.g. domain.com). \n * options is an object which defaults to { \n *   require_tld: true, \n *   allow_underscores: false, \n *   allow_trailing_dot: false \n * }.\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.fqdn = function (value, options) {\n  return !value || _validator2.default.isFQDN(value, options);\n};\n/**\n *  check if the string is a float. \n *  options is an object which can contain the keys min and/or max to validate the float is within boundaries \n *  (e.g. { min: 7.22, max: 9.55 }).\n * @param  {String} value   []\n * @param  {Object} options []\n * @return {Boolean}         []\n */\nValidator.float = function (value, min, max) {\n  if (!value) {\n    return true;\n  }\n  var options = {};\n  if (min) {\n    options.min = min;\n  }\n  if (max) {\n    options.max = max;\n  }\n  return _validator2.default.isFloat(value, options);\n};\n/**\n * check if the string contains any full-width chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.fullWidth = function (value) {\n  return !value || _validator2.default.isFullWidth(value);\n};\n/**\n * check if the string contains any half-width chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.halfWidth = function (value) {\n  return !value || _validator2.default.isHalfWidth(value);\n};\n/**\n * check if the string is a hexadecimal color.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.hexColor = function (value) {\n  return !value || _validator2.default.isHexColor(value);\n};\n/**\n * check if the string is a hexadecimal number.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.hex = function (value) {\n  return !value || _validator2.default.isHexadecimal(value);\n};\n/**\n * check if the string is an IP (version 4 or 6).\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.ip = function (value) {\n  return !value || !!_net2.default.isIP(value);\n};\n/**\n * check if the string is an IP v4\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.ip4 = function (value) {\n  return !value || _net2.default.isIPv4(value);\n};\n/**\n * check if the string is an IP v6\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.ip6 = function (value) {\n  return !value || _net2.default.isIPv6(value);\n};\n/**\n * check if the string is an ISBN (version 10 or 13).\n * @param  {String} value   []\n * @param  {Number} version []\n * @return {Boolean}         []\n */\nValidator.isbn = function (value, version) {\n  return !value || _validator2.default.isISBN(value, version);\n};\n/**\n * check if the string is an ISIN (stock/security identifier).\n * https://en.wikipedia.org/wiki/International_Securities_Identification_Number\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.isin = function (value) {\n  return !value || _validator2.default.isISIN(value);\n};\n/**\n * check if the string is a valid ISO 8601 date.\n * https://en.wikipedia.org/wiki/ISO_8601\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.iso8601 = function (value) {\n  return !value || _validator2.default.isISO8601(value);\n};\n/**\n * check if the string is in a array of allowed values.\n * @type {Boolean}\n */\nValidator.in = function (value) {\n  for (var _len7 = arguments.length, values = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n    values[_key7 - 1] = arguments[_key7];\n  }\n\n  return !value || _validator2.default.isIn(value, values);\n};\n/**\n * check if the string is not in a array of allowed values.\n * @type {Boolean}\n */\nValidator.notIn = function (value) {\n  for (var _len8 = arguments.length, values = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n    values[_key8 - 1] = arguments[_key8];\n  }\n\n  return !value || !_validator2.default.isIn(value, values);\n};\n/**\n * check if the string is an integer. \n * options is an object which can contain the keys min and/or max to check the integer is within boundaries (e.g. { min: 10, max: 99 }).\n * @type {Boolean}\n */\nValidator.int = function (value, min, max) {\n  if (!value) {\n    return true;\n  }\n  var options = {};\n  if (min) {\n    options.min = min | 0;\n  }\n  if (max) {\n    options.max = max | 0;\n  }\n  return !isNaN(value) && _validator2.default.isInt(value, options);\n};\n/**\n * check if the string greater than min value\n * @param  {String} value []\n * @param  {Number} min   []\n * @return {Boolean}       []\n */\nValidator.min = function (value, min) {\n  return !value || _validator2.default.isInt(value, {\n    min: min | 0\n  });\n};\n/**\n * check if the string less than max value\n * @param  {String} value []\n * @param  {Number} max   []\n * @return {Boolean}       []\n */\nValidator.max = function (value, max) {\n  return !value || _validator2.default.isInt(value, {\n    min: 0,\n    max: max | 0\n  });\n};\n/**\n * check if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * @param  {String} value []\n * @param  {Number} min   []\n * @param  {Number} max   []\n * @return {Boolean}       []\n */\nValidator.length = function (value, min, max) {\n  if (!value) {\n    return true;\n  }\n  if (min) {\n    min = min | 0;\n  } else {\n    min = 1;\n  }\n  if (max) {\n    max = max | 0;\n  }\n  return _validator2.default.isLength(value, min, max);\n};\n/**\n * check if the string's length is max than min\n * @param  {String} value []\n * @param  {Number} min   []\n * @return {Boolean}       []\n */\nValidator.minLength = function (value, min) {\n  return !value || _validator2.default.isLength(value, min | 0);\n};\n/**\n * check is the string's length is min than max\n * @param  {String} value []\n * @param  {Number} max   []\n * @return {Boolean}       []\n */\nValidator.maxLength = function (value, max) {\n  return !value || _validator2.default.isLength(value, 0, max | 0);\n};\n/**\n * check if the string is lowercase.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.lowercase = function (value) {\n  return !value || _validator2.default.isLowercase(value);\n};\n/**\n * check if the string is a mobile phone number, \n * (locale is one of ['zh-CN', 'en-ZA', 'en-AU', 'en-HK', 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU']).\n * @param  {String} value []\n * @param  {[type]} locale []\n * @return {Boolean}       []\n */\nValidator.mobile = function (value) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zh-CN';\n\n  return !value || _validator2.default.isMobilePhone(value, locale);\n};\n/**\n *  check if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.mongoId = function (value) {\n  return !value || _validator2.default.isMongoId(value);\n};\n/**\n * check if the string contains one or more multibyte chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.multibyte = function (value) {\n  return !value || _validator2.default.isMultibyte(value);\n};\n/**\n * check if the string contains only numbers.\n * @param  {String} value []\n * @return {Boolean}       []\n */\n// Validator.number = value => {\n//   return validator.isNumeric(value);\n// };\n/**\n * check if the string is an URL. \n * options is an object which defaults to { \n *   protocols: ['http','https','ftp'], \n *   require_tld: true, \n *   require_protocol: false, \n *   require_valid_protocol: true, \n *   allow_underscores: false, \n *   host_whitelist: false, \n *   host_blacklist: false, \n *   allow_trailing_dot: false, \n *   allow_protocol_relative_urls: false \n * }.\n * @type {Boolean}\n */\nValidator.url = function (value, options) {\n  if (!value) {\n    return true;\n  }\n  options = think.extend({\n    require_protocol: true,\n    protocols: ['http', 'https']\n  }, options);\n  return _validator2.default.isURL(value, options);\n};\n/**\n * check if the string is uppercase.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.uppercase = function (value) {\n  return !value || _validator2.default.isUppercase(value);\n};\n/**\n * check if the string contains a mixture of full and half-width chars.\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.variableWidth = function (value) {\n  return !value || _validator2.default.isVariableWidth(value);\n};\n/**\n * check is sql order string\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.order = function (value) {\n  if (!value) {\n    return true;\n  }\n  return value.split(/\\s*,\\s*/).every(function (item) {\n    return (/^\\w+\\s+(?:ASC|DESC)$/i.test(item)\n    );\n  });\n};\n/**\n * check is sql field string\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.field = function (value) {\n  if (!value) {\n    return true;\n  }\n  return value.split(/\\s*,\\s*/).every(function (item) {\n    return item === '*' || /^\\w+$/.test(item);\n  });\n};\n/**\n * check is image file\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.image = function (value) {\n  if (!value) {\n    return true;\n  }\n  if (think.isObject(value)) {\n    value = value.originalFilename;\n  }\n  return (/\\.(?:jpeg|jpg|png|bmp|gif|svg)$/i.test(value)\n  );\n};\n/**\n * check is string start with str\n * @param  {String} value []\n * @param  {String} str   []\n * @return {Boolean}       []\n */\nValidator.startWith = function (value, str) {\n  return !value || value.indexOf(str) === 0;\n};\n/**\n * check is string end with str\n * @param  {String} value []\n * @param  {String} str   []\n * @return {Boolean}       []\n */\nValidator.endWith = function (value, str) {\n  return !value || value.lastIndexOf(str) === value.length - str.length;\n};\n/**\n * check value is string value\n * @param  {String} value []\n * @return {Boolean}       []\n */\nValidator.string = function (value) {\n  return think.isString(value);\n};\n/**\n * check value is array value\n * @param  {Array} value []\n * @return {Boolean}       []\n */\nValidator.array = function (value) {\n  return think.isArray(value);\n};\n/**\n * check value is true\n * @param  {Boolean} value []\n * @return {Boolean}       []\n */\nValidator.boolean = function (value) {\n  return think.isBoolean(value);\n};\n/**\n * check value is object\n * @param  {Object} value []\n * @return {Boolean}       []\n */\nValidator.object = function (value) {\n  return think.isObject(value);\n};\n\n/**\n * check value with regexp\n * @param  {Mixed} value []\n * @param  {RegExp} reg   []\n * @return {Boolean}       []\n */\nValidator.regexp = function (value, reg) {\n  if (!value) {\n    return true;\n  }\n  return reg.test(value);\n};\n/**\n * check type\n * @param  {Mixed} value []\n * @param  {String} type  []\n * @return {Boolean}       []\n */\nValidator.type = function (value, type) {\n  if (!value) {\n    return true;\n  }\n  switch (type) {\n    case 'int':\n      return Validator.int(value);\n    case 'float':\n      return Validator.float(value);\n    case 'boolean':\n      return Validator.boolean(value);\n    case 'array':\n      return Validator.array(value);\n    case 'object':\n      return Validator.object(value);\n  }\n  return Validator.string(value);\n};\n\nexports.default = Validator;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/think_middleware.js":"'use strict';\n\n/**\n * create or exec middleware\n * @param  {Function} superClass []\n * @param  {Object} methods      []\n * @return {mixed}            []\n */\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Middleware = function Middleware() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var superClass = args[0],\n      methods = args[1],\n      data = args[2];\n\n  var length = args.length;\n\n  // register functional or class middleware\n  // think.middleware('parsePayLoad', function(){})\n  if (think.isString(superClass) && think.isFunction(methods)) {\n    thinkData.middleware[superClass] = methods;\n    return;\n  }\n  // exec middleware\n  // think.middleware('parsePayLoad', http, data)\n  if (length >= 2 && think.isHttp(methods)) {\n    return Middleware.exec(superClass, methods, data);\n  }\n  // get middleware\n  // think.middleware('parsePayLoad')\n  if (length === 1 && think.isString(superClass)) {\n    return Middleware.get(superClass);\n  }\n  return Middleware.create(superClass, methods);\n};\n\n/**\n * create middleware\n * @param  {Class} superClass []\n * @param  {Object} methods    []\n * @return {Class}            []\n */\nMiddleware.create = function (superClass, methods) {\n  var middleware = thinkCache(thinkCache.COLLECTION, 'middleware');\n  if (!middleware) {\n    middleware = think.Class('middleware');\n    thinkCache(thinkCache.COLLECTION, 'middleware', middleware);\n  }\n  // create middleware\n  return middleware(superClass, methods);\n};\n\n/**\n * get middleware\n * @param  {String} name []\n * @return {Class}      []\n */\nMiddleware.get = function (name) {\n  var middlware = thinkData.middleware[name];\n  if (middlware) {\n    return middlware;\n  }\n  var cls = think.require('middleware_' + name, true);\n  if (cls) {\n    return cls;\n  }\n  throw new Error(think.locale('MIDDLEWARE_NOT_FOUND', name));\n};\n\n/**\n * exec middleware\n * @param  {String} name []\n * @param  {Object} http []\n * @param  {Mixed} data []\n * @return {Promise}      []\n */\nMiddleware.exec = function (name, http, data) {\n  if (think.isString(name)) {\n    var fn = thinkData.middleware[name];\n    // name is in middleware cache\n    if (fn) {\n      //class middleware must have run method\n      if (fn.prototype.run) {\n        var instance = new fn(http);\n        return think.co(instance.run(data));\n      } else {\n        return think.co(fn(http, data));\n      }\n    } else {\n      var Cls = think.require('middleware_' + name, true);\n      if (Cls) {\n        var _instance = new Cls(http);\n        return think.co(_instance.run(data));\n      }\n      var err = new Error(think.locale('MIDDLEWARE_NOT_FOUND', name));\n      return _promise2.default.reject(err);\n    }\n  }\n  return think.co(name(http, data));\n};\n\nexports.default = Middleware;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/think_hook.js":"'use strict';\n\n/**\n * regitster or exec hook\n * @param  {String} name []\n * @return {}      []\n */\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Hook = function Hook() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var name = args[0],\n      http = args[1],\n      data = args[2];\n  //get hook data\n\n  if (args.length === 1) {\n    return thinkData.hook[name] || [];\n  }\n  //remove hook\n  if (http === null) {\n    thinkData.hook[name] = [];\n    return;\n  }\n  // set hook data\n  // think.hook('test', ['middleware1', 'middleware2'])\n  if (think.isArray(http) || !think.isHttp(http)) {\n    return Hook.set(name, http, data);\n  }\n  //exec hook\n  return Hook.exec(name, http, data);\n};\n\n/**\n * set hook\n * @return {} []\n */\nHook.set = function (name, hooks, flag) {\n  //think.hook.set('test', function or class)\n  if (think.isFunction(hooks)) {\n    var mname = 'middleware_' + think.uuid();\n    think.middleware(mname, hooks);\n    hooks = [mname];\n  } else if (!think.isArray(hooks)) {\n    hooks = [hooks];\n  } else {\n    var first = hooks[0];\n    if (first === 'append' || first === 'prepend') {\n      flag = hooks.shift();\n    }\n  }\n  var oriHooks = thinkData.hook[name] || [];\n  if (flag === 'append') {\n    oriHooks = oriHooks.concat(hooks);\n  } else if (flag === 'prepend') {\n    oriHooks = hooks.concat(oriHooks);\n  } else {\n    oriHooks = hooks;\n  }\n  thinkData.hook[name] = oriHooks;\n};\n\n/**\n * exec hook\n * @param  {String} name [hook name]\n * @param  {Object} http []\n * @param  {Mixed} data []\n * @return {Promise}      []\n */\n// think.hook.exec = async (name, http, data) => {\n//   //exec hook \n//   let list = thinkData.hook[name];\n//   if (!list || list.length === 0) {\n//     return Promise.resolve(data);\n//   }\n\n//   let length = list.length;\n//   for(let i = 0; i < length; i++){\n//     let result = await think.middleware.exec(list[i], http, data);\n//     //prevent next middlewares invoked in hook\n//     if(result === null){\n//       break;\n//     }else if (result !== undefined) {\n//       data = result;\n//     }\n//   }\n//   return data;\n// };\n\nvar _execItemMiddleware = function _execItemMiddleware(list, index, http, data) {\n  var item = list[index];\n  if (!item) {\n    return data;\n  }\n  return think.middleware.exec(item, http, data).then(function (result) {\n    if (result === null) {\n      return data;\n    } else if (result !== undefined) {\n      data = result;\n    }\n    return _execItemMiddleware(list, index + 1, http, data);\n  });\n};\n\nHook.exec = function (name, http, data) {\n  //exec hook \n  var list = thinkData.hook[name];\n  if (!list || list.length === 0) {\n    return _promise2.default.resolve(data);\n  }\n  return _execItemMiddleware(list, 0, http, data);\n};\n\nexports.default = Hook;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/think_route.js":"'use strict';\n\n/**\n * load route\n * route detail config\n *\n * module.exports = {\n *   admin: {\n *     reg: /^admin/, //module reg\n *     children: [\n *       /^admin\\/reg/, 'admin/index/reg'\n *     ]\n *   },\n *   home: {\n *     children: [\n *       \n *     ]\n *   }\n * }\n * \n * @return {} []\n */\n\nexports.__esModule = true;\nvar _getDynamicRoute = function _getDynamicRoute(fn) {\n  return think.co(fn()).then(function () {\n    var route = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    thinkData.route = route;\n    return route;\n  });\n};\n\nvar _getModuleRoute = function _getModuleRoute(config) {\n  for (var module in config) {\n    var filepath = think.getPath(module, think.dirname.config) + '/route.js';\n    var moduleConfig = think.safeRequire(filepath);\n    config[module].children = moduleConfig || [];\n  }\n  thinkData.route = config;\n  return config;\n};\n/**\n * get route\n * @param  {} key []\n * @return {}     []\n */\nvar _getRoute = function _getRoute() {\n  var file = think.getPath(undefined, think.dirname.config) + '/route.js';\n  var config = think.safeRequire(file) || [];\n\n  //route config is funciton, may be is dynamic save in db\n  if (think.isFunction(config)) {\n    return _getDynamicRoute(config);\n  }\n  //get module route config\n  if (think.isObject(config) && think.mode === think.mode_module) {\n    return _getModuleRoute(config);\n  }\n  thinkData.route = config;\n  return config;\n};\n\nvar Route = function Route(routes) {\n  //remove route\n  if (routes === null) {\n    thinkData.route = null;\n    return;\n  }\n  //set route\n  if (think.isArray(routes) || think.isObject(routes)) {\n    thinkData.route = routes;\n    return;\n  }\n  //get route\n  if (thinkData.route) {\n    return thinkData.route;\n  }\n  return _getRoute();\n};\n\nexports.default = Route;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/think_config.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * get item config\n * @param  {} configPath []\n * @param  {} item       []\n * @return {}            []\n */\nvar _getItemConfig = function _getItemConfig(configPath, item) {\n  var fileFilters = ['config', 'route', 'hook'];\n  var dirFilters = ['env', 'sys'];\n  if (think.isDir(configPath + '/' + item)) {\n    if (dirFilters.indexOf(item) === -1) {\n      var _ref;\n\n      return _ref = {}, _ref[item] = _getConfig(configPath + '/' + item), _ref;\n    }\n    return;\n  }\n  item = item.slice(0, -3);\n  if (item[0] === '_' || fileFilters.indexOf(item) > -1) {\n    return;\n  }\n  var conf = think.safeRequire(configPath + '/' + item + '.js');\n  if (conf) {\n    var _ref2;\n\n    return _ref2 = {}, _ref2[item] = conf, _ref2;\n  }\n};\n\n/**\n * get module config\n * @param  {String} module []\n * @return {Object}        []\n */\nvar _getConfig = function _getConfig(configPath) {\n  var config = {};\n  if (!think.isDir(configPath)) {\n    return config;\n  }\n  _fs2.default.readdirSync(configPath).forEach(function (item) {\n    var data = _getItemConfig(configPath, item);\n    config = think.extend(config, data);\n  });\n  return config;\n};\n\n/**\n * transform config\n * @param  {Object} config []\n * @return {Object}        []\n */\nvar _transformConfig = function _transformConfig(config, transforms) {\n  for (var key in transforms) {\n    if (!(key in config)) {\n      continue;\n    }\n    var value = transforms[key];\n    if (think.isFunction(value)) {\n      config[key] = value(config[key], config);\n    } else {\n      config[key] = _transformConfig(config[key], value);\n    }\n  }\n  return config;\n};\n\nvar _getModuleConfig = function _getModuleConfig() {\n  var module = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : think.dirname.common;\n\n\n  //get module config from cache\n  var moduleConfig = thinkData.config;\n  if (moduleConfig[module]) {\n    return moduleConfig[module];\n  }\n\n  var rootPath = void 0;\n  //get sys config\n  if (module === true) {\n    rootPath = think.THINK_LIB_PATH + '/config';\n  } else {\n    rootPath = think.getPath(module, think.dirname.config);\n  }\n\n  //config.js\n  var config = think.safeRequire(rootPath + '/config.js');\n  var envConfig = {},\n      extraConfig = _getConfig(rootPath);\n\n  envConfig = think.safeRequire(rootPath + '/env/' + think.env + '.js');\n  envConfig = think.extend(envConfig, _getConfig(rootPath + '/env/' + think.env));\n\n  //merge all configs\n  config = think.extend({}, config, extraConfig, envConfig);\n  //merge sys, common configs to module\n  if (module !== true) {\n    if (module === think.dirname.common) {\n      config = think.extend({}, _getModuleConfig(true), config);\n    } else {\n      config = think.extend({}, _getModuleConfig(), config);\n    }\n  }\n  //transform config\n  var transforms = think.safeRequire(think.THINK_LIB_PATH + '/config/sys/transform.js');\n  config = _transformConfig(config, transforms);\n\n  if (module !== true) {\n    thinkData.config[module] = config;\n  }\n\n  return config;\n};\n\n/**\n * get or set config\n * @return {mixed} []\n */\n//if set common config, must sync to module config\nvar _setConfig = function _setConfig(name, value, flag, data) {\n  var configs = [];\n  if (flag) {\n    configs = think.module.map(function (item) {\n      return _getModuleConfig(item);\n    });\n  }\n  [data].concat(configs).forEach(function (itemData) {\n    if (think.isObject(name)) {\n      think.extend(itemData, name);\n    } else if (think.isString(name)) {\n      //name = name.toLowerCase();\n      if (name.indexOf('.') === -1) {\n        itemData[name] = value;\n      } else {\n        var names = name.split('.');\n        itemData[names[0]] = itemData[names[0]] || {};\n        itemData[names[0]][names[1]] = value;\n      }\n    }\n  });\n};\n\nvar Config = function Config(name, value, data) {\n  var flag = !data;\n\n  //convert data to undefined when is null (in http._config)\n  if (data === null) {\n    data = undefined;\n  }\n  //get data from module config\n  if (!think.isObject(data)) {\n    data = _getModuleConfig(data);\n  }\n  // get all config\n  if (name === undefined) {\n    return data;\n  }\n  // merge config\n  if (think.isObject(name) || value !== undefined) {\n    return _setConfig(name, value, flag, data);\n  }\n  //get config\n  if (name.indexOf('.') === -1) {\n    return data[name];\n  }\n  name = name.split('.');\n  value = data[name[0]] || {};\n  return value[name[1]];\n};\n\nexports.default = Config;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/think_adapter.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * create, register, call adapter\n * @param  {String} name []\n * @return {void}      []\n */\nvar Adapter = function Adapter() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var type = args[0],\n      name = args[1],\n      fn = args[2];\n\n  var length = args.length,\n      key = 'adapter_';\n  if (length === 3) {\n    //register adapter\n    //think.adapter('session', 'redis', function(){})\n    if (think.isFunction(fn)) {\n      key += type + '_' + name;\n      thinkData.export[key] = fn;\n      return;\n    }\n    //create adapter\n    //module.exports = think.adapter('session', 'memory', {})\n    else if (think.isObject(fn)) {\n        return think.Class(think.adapter(type, name), fn);\n      }\n  }\n  //type has not _\n  else if (length === 2 && think.isString(type) && type.indexOf('_') === -1) {\n      //create adapter\n      //module.exports = think.adapter('session', {})\n      if (think.isObject(name)) {\n        return think.Class(think.adapter(type, 'base'), name);\n      }\n      //get adapter\n      //think.adapter('session', 'redis')\n      else if (think.isString(name)) {\n          return Adapter.get(type, name);\n        }\n    }\n\n  return Adapter.create(type, name);\n};\n\n//get adapter\n//think.adapter('session', 'redis')\nAdapter.get = function (type, name) {\n  var key = 'adapter_';\n  var nameLower = name.toLowerCase();\n  if (name !== nameLower) {\n    name = nameLower;\n    think.log(function (colors) {\n      return colors.yellow('[WARNING]') + (' adapter type `' + name + '` has uppercase chars.');\n    });\n  }\n\n  key += type + '_' + name;\n  var cls = think.require(key, true);\n  if (cls) {\n    return cls;\n  } else {\n    Adapter.load(type, name);\n    var _cls = think.require(key, true);\n    if (_cls) {\n      return _cls;\n    }\n  }\n  throw new Error(think.locale('ADAPTER_NOT_FOUND', key));\n};\n\n//create adapter\n//module.exports = think.adapter({})\n//module.exports = think.adapter(function(){}, {});\nAdapter.create = function (type, name) {\n  var superClass = void 0;\n  if (think.isFunction(type)) {\n    superClass = type;\n  } else if (think.isString(type)) {\n    superClass = think.require(type);\n  }\n  //create clean Class\n  if (!superClass) {\n    return think.Class(type);\n  }\n  return think.Class(superClass, name);\n};\n\n/**\n * load system & comon module adapter\n * @return {} []\n */\nAdapter.load = function (type) {\n  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base';\n\n  var paths = ['' + think.THINK_LIB_PATH + think.sep + 'adapter'];\n\n  //load base adapter\n  if (!think.adapter.base) {\n    think.adapter.base = think.safeRequire(paths[0] + '/base.js');\n  }\n\n  //common module adapter\n  var adapterPath = think.getPath(undefined, think.dirname.adapter);\n  if (think.isDir(adapterPath)) {\n    paths.push(adapterPath);\n  }\n  paths.forEach(function (path) {\n    if (type) {\n      var filepath = '' + path + think.sep + type + think.sep + name + '.js';\n      if (think.isFile(filepath)) {\n        thinkData.alias['adapter_' + type + '_' + name] = filepath;\n      }\n    } else {\n      var dirs = _fs2.default.readdirSync(path);\n      dirs.forEach(function (dir) {\n        if (!think.isDir(path + '/' + dir)) {\n          return;\n        }\n        think.alias('adapter_' + dir, '' + path + think.sep + dir);\n      });\n    }\n  });\n};\n\nexports.default = Adapter;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/think_cache.js":"'use strict';\n\n/**\n * global memory cache\n * @type {Object}\n */\n\nglobal.thinkCache = function (type, name, value) {\n  type = '_' + type;\n  if (!thinkCache[type]) {\n    thinkCache[type] = {};\n  }\n  // get cache\n  if (name === undefined) {\n    return thinkCache[type];\n  }\n  //remove cache\n  if (name === null) {\n    thinkCache[type] = {};\n    return;\n  }\n  // get cache\n  if (value === undefined) {\n    if (think.isString(name)) {\n      return thinkCache[type][name];\n    }\n    thinkCache[type] = name;\n    return;\n  }\n  //remove cache\n  if (value === null) {\n    delete thinkCache[type][name];\n    return;\n  }\n  //set cache\n  thinkCache[type][name] = value;\n};\n/**\n * cache type\n * @type {String}\n */\n/**\n * memory cache\n * @type {String}\n */\nthinkCache.MEMORY = 'memory';\n/**\n * store controller/action template file\n * @type {String}\n */\nthinkCache.VIEW = 'view';\n/**\n * store view content\n * @type {String}\n */\nthinkCache.VIEW_CONTENT = 'view_content';\n/**\n * store db instance\n * @type {String}\n */\nthinkCache.DB = 'db';\n/**\n * store table info\n * @type {String}\n */\nthinkCache.TABLE = 'table';\n/**\n * memory session\n * @type {String}\n */\nthinkCache.SESSION = 'session';\n/**\n * store redis instance\n * @type {String}\n */\nthinkCache.REDIS = 'redis';\n/**\n * store memcache instance\n * @type {String}\n */\nthinkCache.MEMCACHE = 'memcache';\n/**\n * think timer\n * @type {String}\n */\nthinkCache.TIMER = 'timer';\n/**\n * file auto reload\n * @type {String}\n */\nthinkCache.AUTO_RELOAD = 'auto_reload';\n/**\n * think collection class or function\n * @type {String}\n */\nthinkCache.COLLECTION = 'collection';\n/**\n * store websockets\n * @type {String}\n */\nthinkCache.WEBSOCKET = 'websocket';\n/**\n * store limit instance\n * @type {String}\n */\nthinkCache.LIMIT = 'limit';\n/**\n * app use\n * @type {String}\n */\nthinkCache.APP = 'app';","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/think_data.js":"'use strict';\n/**\n * global thinkData, for store config, hook, route, alias etc\n * @type {Object}\n */\n\nglobal.thinkData = {};\n/**\n * store hook list\n * @type {Object}\n */\nthinkData.hook = {};\n/**\n * store module config\n * @type {Object}\n */\nthinkData.config = {};\n/**\n * module alias\n * @type {Object}\n */\nthinkData.alias = {};\n/**\n * module exports object\n * @type {Object}\n */\nthinkData.export = {};\n/**\n * store route\n * default is null, can not set [] or {}\n * @type {Object}\n */\nthinkData.route = null;\n/**\n * store middleware, which dynamic registed\n * @type {Object}\n */\nthinkData.middleware = {};\n/**\n * store system error message\n * message in file `config/sys/error.js`\n */\nthinkData.error = {};\n/**\n * store template file list, for check template file exist in view class\n * @type {Object}\n */\nthinkData.template = {};\n/**\n * store sorted controllers in module, for parse route which support sub controllers\n * {\n *   home: ['test/index']\n * }\n * @type {Object}\n */\nthinkData.subController = {};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/bin/index.js":"#!/usr/bin/env node\n\nrequire('../lib/command.js');","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/command.js":"'use strict';\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _commander = require('commander');\n\nvar _commander2 = _interopRequireDefault(_commander);\n\nrequire('./core/think.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// thinkjs command\n\nvar sep = _path2.default.sep;\n\nvar cwd = process.cwd();\nvar templatePath = _path2.default.dirname(__dirname) + sep + 'template';\nvar projectRootPath = cwd; //project root path\nvar modeList = ['normal', 'module'];\n\nthink.mode = think.mode_module;\n\n/**\n * get date time\n * @return {} []\n */\nvar getDateTime = function getDateTime() {\n  var fn = function fn(d) {\n    return ('0' + d).slice(-2);\n  };\n  var d = new Date();\n  var date = d.getFullYear() + '-' + fn(d.getMonth() + 1) + '-' + fn(d.getDate());\n  var time = fn(d.getHours()) + ':' + fn(d.getMinutes()) + ':' + fn(d.getSeconds());\n  return date + ' ' + time;\n};\n/**\n * log\n * @param  {Function} fn []\n * @return {}      []\n */\nvar log = function log(fn) {\n  think.log(function (colors) {\n    return '  ' + fn(colors);\n  }, '', null);\n};\n\n/**\n * mkdir\n * @param  {String} dir []\n * @return {}     []\n */\nvar mkdir = function mkdir(dir) {\n  if (think.isDir(dir)) {\n    return;\n  }\n  think.mkdir(dir);\n  log(function (colors) {\n    return colors.cyan('create') + ' : ' + _path2.default.relative(cwd, dir);\n  });\n};\n\n/**\n * get version\n * @return {String} []\n */\nvar getVersion = function getVersion() {\n  var filepath = _path2.default.resolve(__dirname, '../package.json');\n  var version = JSON.parse(_fs2.default.readFileSync(filepath)).version;\n  return version;\n};\n\n/**\n * get app root path\n * @return {} []\n */\nvar getProjectAppPath = function getProjectAppPath() {\n  var path = projectRootPath + think.sep;\n  path += !_commander2.default.es5 || _commander2.default.ts ? 'src' : 'app';\n  return path;\n};\n/**\n * get app name\n * @return {} []\n */\nvar getAppName = function getAppName() {\n  var filepath = _path2.default.normalize(cwd + '/' + projectRootPath).replace(/\\\\/g, '');\n  var matched = filepath.match(/([^\\/]+)\\/?$/);\n  return matched[1];\n};\n\n/**\n * copy file\n * @param  {String} source []\n * @param  {String} target []\n * @return {}        []\n */\nvar copyFile = function copyFile(source, target, replace, showWarning) {\n\n  if (showWarning === undefined) {\n    showWarning = true;\n  }\n\n  if (think.isBoolean(replace)) {\n    showWarning = replace;\n    replace = '';\n  }\n\n  //if target file is exist, ignore it\n  if (think.isFile(target)) {\n    if (showWarning) {\n      log(function (colors) {\n        return colors.yellow('exist') + ' : ' + _path2.default.normalize(target);\n      });\n    }\n    return;\n  }\n\n  mkdir(_path2.default.dirname(target));\n\n  var es5 = _commander2.default.es5;\n\n  //TypeScript\n  if (_commander2.default.ts) {\n    var tsSource = source.replace(/\\.\\w+$/, function (a) {\n      return a === '.js' ? '.ts' : '_ts' + a;\n    });\n    if (think.isFile(templatePath + '/' + tsSource)) {\n      source = tsSource;\n    }\n    if (target.indexOf(think.sep + 'src' + think.sep) > -1) {\n      //replace target file extname to .ts\n      target = target.replace(/\\.js$/, '.ts');\n    }\n  }\n  //ECMAScript 2015/2016\n  else if (!es5) {\n      var esSource = source.replace(/\\.\\w+$/, function (a) {\n        return a === '.js' ? '.es' : '_es' + a;\n      });\n      if (think.isFile(templatePath + think.sep + esSource)) {\n        source = esSource;\n      }\n    }\n\n  //if source file is not exist\n  if (!think.isFile(templatePath + think.sep + source)) {\n    return;\n  }\n\n  var content = _fs2.default.readFileSync(templatePath + think.sep + source, 'utf8');\n  //replace content \n  if (think.isObject(replace)) {\n    for (var key in replace) {\n      /*eslint-disable no-constant-condition*/\n      while (1) {\n        var content1 = content.replace(key, replace[key]);\n        if (content1 === content) {\n          content = content1;\n          break;\n        }\n        content = content1;\n      }\n    }\n  }\n\n  _fs2.default.writeFileSync(target, content);\n  log(function (colors) {\n    return colors.cyan('create') + ' : ' + _path2.default.relative(cwd, target);\n  });\n};\n\n/**\n * check is thinkjs app\n * @param  {String}  projectRootPath []\n * @return {Boolean}             []\n */\nvar isThinkApp = function isThinkApp(projectRootPath) {\n  if (think.isDir(projectRootPath)) {\n    var filepath = projectRootPath + '/.thinkjsrc';\n    if (think.isFile(filepath)) {\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * is module exist\n * @param  {String}  module []\n * @return {Boolean}        []\n */\nvar isModuleExist = function isModuleExist(module) {\n  var modelPath = think.getPath(module, 'model');\n  // if(think.mode === think.mode_normal){\n  //   modelPath = think.getPath(module, 'controller');\n  // }\n  return think.isDir(modelPath);\n};\n/**\n * parse app config\n * @param  {} projectRootPath []\n * @return {}             []\n */\nvar parseAppConfig = function parseAppConfig() {\n  var filepath = projectRootPath + '/.thinkjsrc';\n  var content = _fs2.default.readFileSync(filepath, 'utf8');\n  var data = JSON.parse(content);\n\n  _commander2.default.ts = data.ts;\n  //commander.es = data.es || data.es6; //compatible with 2.0.x\n  think.mode = think['mode_' + data.mode];\n\n  think.APP_PATH = getProjectAppPath();\n};\n\n/**\n * get view root path;\n * @return {String}             []\n */\nvar getProjectViewPath = function getProjectViewPath(module) {\n  var APP_PATH = think.APP_PATH;\n\n  think.APP_PATH = projectRootPath + '/view';\n\n  //read view config, view root_path may be changed it.\n  var viewConfigFile = projectRootPath + '/app/common/config/view.js';\n  if (think.mode === think.mode_normal) {\n    viewConfigFile = projectRootPath + '/app/config/view.js';\n  }\n  think.ROOT_PATH = projectRootPath;\n  if (think.isFile(viewConfigFile)) {\n    var data = require(viewConfigFile);\n    var viewRootPath = _path2.default.normalize(data.root_path || data.default && data.default.root_path);\n    think.APP_PATH = viewRootPath;\n  }\n  var viewPath = think.getPath(module, '');\n\n  think.APP_PATH = APP_PATH;\n  return _path2.default.normalize(viewPath).slice(0, -1);\n};\n\n/**\n * check env\n * @return {} []\n */\nvar _checkEnv = function _checkEnv() {\n  if (!isThinkApp('./')) {\n    console.log();\n    log(function (colors) {\n      return colors.red('current path is not thinkjs project.\\n');\n    });\n    process.exit();\n  }\n  parseAppConfig();\n  console.log();\n};\n\n/**\n * copy common files\n * @param  {String} projectRootPath []\n * @return {}             []\n */\nvar _copyWwwFiles = function _copyWwwFiles() {\n  mkdir(projectRootPath);\n\n  var name = _commander2.default.test ? 'package_test' : 'package';\n  copyFile(name + '.json', projectRootPath + '/package.json');\n\n  copyFile('.babelrc', projectRootPath + '/.babelrc');\n\n  var mode = 'normal';\n  if (think.mode === think.mode_module) {\n    mode = 'module';\n  }\n  copyFile('thinkjsrc.json', projectRootPath + '/.thinkjsrc', {\n    '<createAt>': getDateTime(),\n    '<mode>': mode\n  });\n\n  var ROOT_PATH = projectRootPath + '/www';\n  copyFile('nginx.conf', projectRootPath + '/nginx.conf', {\n    '<ROOT_PATH>': ROOT_PATH\n  });\n\n  copyFile('pm2.json', projectRootPath + '/pm2.json', {\n    '<ROOT_PATH>': _path2.default.dirname(ROOT_PATH),\n    '<APP_NAME>': getAppName()\n  });\n\n  copyFile('gitignore.log', projectRootPath + '/.gitignore');\n  copyFile('README.md', projectRootPath + '/README.md');\n\n  if (_commander2.default.ts) {\n    copyFile('bin/compile.ts', projectRootPath + '/bin/compile.js');\n    copyFile('think.d.ts', projectRootPath + '/typings/thinkjs/think.d.ts');\n  }\n\n  mkdir(projectRootPath + '/www');\n  copyFile('www/development.js', projectRootPath + '/www/development.js');\n  copyFile('www/production.js', projectRootPath + '/www/production.js');\n  copyFile('www/testing.js', projectRootPath + '/www/testing.js');\n  copyFile('www/README.md', projectRootPath + '/www/README.md');\n\n  mkdir(projectRootPath + '/www/static/');\n  mkdir(projectRootPath + '/www/static/js');\n  mkdir(projectRootPath + '/www/static/css');\n  mkdir(projectRootPath + '/www/static/img');\n};\n/**\n * copy error template files\n * @param  {String} projectRootPath []\n * @return {}             []\n */\nvar _copyErrorTemplateFiles = function _copyErrorTemplateFiles() {\n\n  var module = 'common';\n  if (think.mode === think.mode_normal) {\n    module = 'home';\n  }\n\n  var controllerPath = think.getPath(module, 'controller');\n  mkdir(controllerPath);\n  copyFile('controller/error.js', controllerPath + '/error.js');\n\n  var commonViewPath = getProjectViewPath(module);\n\n  mkdir(commonViewPath);\n  copyFile('view/error_400.html', commonViewPath + '/error_400.html');\n  copyFile('view/error_403.html', commonViewPath + '/error_403.html');\n  copyFile('view/error_404.html', commonViewPath + '/error_404.html');\n  copyFile('view/error_500.html', commonViewPath + '/error_500.html');\n  copyFile('view/error_503.html', commonViewPath + '/error_503.html');\n};\n\nvar getSecret = function getSecret(length) {\n  length = length || 8;\n  var str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$%^&*()`1234567890';\n  var arr = str.split('').sort(function () {\n    return Math.random() >= 0.5 ? 1 : -1;\n  }).slice(0, length);\n  return arr.join('');\n};\n/**\n * copy common config files\n * @return {}             []\n */\nvar _copyCommonConfigFiles = function _copyCommonConfigFiles() {\n  var rootPath = think.getPath('common', 'config');\n  mkdir(rootPath);\n\n  copyFile('config/config.js', rootPath + '/config.js', false);\n  copyFile('config/view.js', rootPath + '/view.js');\n  copyFile('config/db.js', rootPath + '/db.js');\n  copyFile('config/hook.js', rootPath + '/hook.js');\n  copyFile('config/session.js', rootPath + '/session.js', {\n    '<SECRET>': getSecret()\n  });\n  copyFile('config/error.js', rootPath + '/error.js');\n\n  mkdir(rootPath + '/env');\n  copyFile('config/env/development.js', rootPath + '/env/development.js');\n  copyFile('config/env/testing.js', rootPath + '/env/testing.js');\n  copyFile('config/env/production.js', rootPath + '/env/production.js');\n\n  mkdir(rootPath + '/locale');\n  copyFile('config/locale/en.js', rootPath + '/locale/en.js');\n};\n/**\n * copy bootstrap files\n * @return {}             []\n */\nvar _copyCommonBootstrapFiles = function _copyCommonBootstrapFiles() {\n  var rootPath = think.getPath('common', 'bootstrap');\n  mkdir(rootPath);\n\n  copyFile('bootstrap/middleware.js', rootPath + '/middleware.js');\n  copyFile('bootstrap/global.js', rootPath + '/global.js');\n};\n\n/**\n * create module\n * @param  {String} module      []\n * @return {}             []\n */\nvar _createModule = function _createModule(module) {\n  if (think.mode !== think.mode_module && module !== 'home') {\n    log(function (colors) {\n      return colors.red('app mode is not module, can not create module.\\n');\n    });\n    process.exit();\n  }\n  if (isModuleExist(module)) {\n    log(function (colors) {\n      return colors.red('module `' + module + '` is exist.\\n');\n    });\n    process.exit();\n  }\n\n  //config files\n  var configPath = think.getPath(module, 'config');\n  mkdir(configPath);\n  copyFile('config/config.js', configPath + '/config.js', false);\n\n  //controller files\n  var controllerPath = think.getPath(module, 'controller');\n  mkdir(controllerPath);\n  copyFile('controller/base.js', controllerPath + '/base.js');\n  copyFile('controller/index.js', controllerPath + '/index.js');\n\n  //logic files\n  var logicPath = think.getPath(module, 'logic');\n  mkdir(logicPath);\n  copyFile('logic/index.js', logicPath + '/index.js');\n\n  //model files\n  var modelPath = think.getPath(module, 'model');\n  mkdir(modelPath);\n  copyFile('model/index.js', modelPath + '/index.js', false);\n\n  //view files\n  var viewPath = getProjectViewPath(module);\n  mkdir(viewPath);\n  copyFile('view/index_index.html', viewPath + '/index_index.html');\n};\n\n/**\n * create module\n * @param  {} module []\n * @return {}        []\n */\nvar createModule = function createModule(module) {\n  _checkEnv();\n\n  if (module === 'common') {\n    return;\n  }\n\n  _createModule(module);\n};\n/**\n * create controller\n * @param  {} controller []\n * @return {}            []\n */\nvar createController = function createController(controller) {\n  _checkEnv();\n\n  controller = controller.split('/');\n  var module = 'common';\n  if (controller.length >= 2) {\n    module = controller[0];\n    controller = controller.slice(1).join('/');\n  } else {\n    controller = controller[0];\n  }\n\n  if (!isModuleExist(module)) {\n    createModule(module);\n  }\n\n  var controllerPath = think.getPath(module, 'controller');\n  var file = 'index.js';\n  if (_commander2.default.rest) {\n    file = 'rest.js';\n  }\n  copyFile('controller/' + file, controllerPath + '/' + controller + '.js');\n\n  var logicPath = think.getPath(module, 'logic');\n  copyFile('logic/index.js', logicPath + '/' + controller + '.js');\n\n  console.log();\n};\n\n/**\n * create service\n * @param  {} controller []\n * @return {}            []\n */\nvar createService = function createService(service) {\n  _checkEnv();\n\n  service = service.split('/');\n  var module = 'common';\n  if (service.length === 2) {\n    module = service[0];\n    service = service[1];\n  } else {\n    service = service[0];\n  }\n\n  if (!isModuleExist(module)) {\n    createModule(module);\n  }\n\n  var servicePath = think.getPath(module, 'service');\n  copyFile('service/index.js', servicePath + '/' + service + '.js');\n\n  console.log();\n};\n/**\n * create model file\n * @param  {String} model []\n * @return {}       []\n */\nvar createModel = function createModel(model) {\n  _checkEnv();\n\n  model = model.split('/');\n  var module = 'common';\n  if (model.length === 2) {\n    module = model[0];\n    model = model[1];\n  } else {\n    model = model[0];\n  }\n\n  if (!isModuleExist(module)) {\n    createModule(module);\n  }\n\n  var file = 'index.js';\n  if (_commander2.default.relation) {\n    file = 'relation.js';\n  } else if (_commander2.default.mongo) {\n    file = 'mongo.js';\n  }\n  var controllerPath = think.getPath(module, 'model');\n  copyFile('model/' + file, controllerPath + '/' + model + '.js');\n\n  console.log();\n};\n\n/**\n * create middleware\n * @param  {String} middleware []\n * @return {[type]}            []\n */\nvar createMiddleware = function createMiddleware(middleware) {\n  _checkEnv();\n  var midlewarePath = think.getPath('common', 'middleware');\n  var filepath = midlewarePath + '/' + middleware + '.js';\n  mkdir(midlewarePath);\n  copyFile('middleware/base.js', filepath);\n\n  console.log();\n};\n\n/**\n * create adapter\n * @param  {String} adatper []\n * @return {}         []\n */\nvar createAdapter = function createAdapter(adapter) {\n  _checkEnv();\n\n  adapter = adapter.split('/');\n\n  var type = adapter[0];\n  var name = adapter[1] || 'base';\n\n  var adapterPath = think.getPath('common', 'adapter');\n\n  copyFile('adapter/base.js', adapterPath + '/' + type + '/' + name + '.js');\n\n  console.log();\n};\n\n/**\n * module app\n * @param  {} projectRootPath []\n * @return {}             []\n */\nvar _createProject = function _createProject() {\n\n  _copyWwwFiles();\n\n  mkdir(think.APP_PATH);\n\n  _copyCommonBootstrapFiles();\n  _copyCommonConfigFiles();\n  _copyErrorTemplateFiles();\n\n  _createModule('home');\n\n  if (_commander2.default.test) {\n    copyFile('test/index.js', projectRootPath + '/test/index.js');\n  }\n};\n/**\n * create project\n * @param  {String} projectRootPath []\n * @return {}             []\n */\nvar createProject = function createProject() {\n  if (isThinkApp(projectRootPath)) {\n    console.log();\n    log(function (colors) {\n      return colors.red('path `' + projectRootPath + '` is already a thinkjs project.\\n');\n    });\n    return;\n  }\n  console.log();\n\n  think.APP_PATH = getProjectAppPath();\n  _createProject();\n\n  var p = projectRootPath.slice(cwd.length);\n  if (p[0] === think.sep) {\n    p = p.slice(1);\n  }\n\n  console.log();\n  console.log('  enter path:');\n  console.log('  $ cd ' + p);\n  console.log();\n\n  console.log('  install dependencies:');\n  console.log('  $ npm install');\n  console.log();\n\n  console.log('  run the app:');\n  console.log('  $ npm start');\n\n  console.log();\n};\n\n/**\n * create plugin\n * @return {} []\n */\nvar createPlugin = function createPlugin() {\n  console.log();\n\n  mkdir(projectRootPath);\n\n  var pluginName = _path2.default.basename(projectRootPath).toLowerCase();\n  pluginName = pluginName.replace(/\\_/g, '-');\n  if (pluginName[0] === '-') {\n    pluginName = pluginName.slice(1);\n  }\n  if (pluginName.indexOf('think-') !== 0) {\n    pluginName = 'think-' + pluginName;\n  }\n\n  copyFile('plugin/src/index.js', projectRootPath + '/src/index.js');\n  copyFile('plugin/test/index.js', projectRootPath + '/test/index.js', {\n    '<PLUGIN_NAME>': pluginName\n  });\n  copyFile('plugin/.eslintrc', projectRootPath + '/.eslintrc');\n  copyFile('plugin/gitignore', projectRootPath + '/.gitignore');\n  copyFile('plugin/.npmignore', projectRootPath + '/.npmignore');\n  copyFile('plugin/.travis.yml', projectRootPath + '/.travis.yml');\n  copyFile('plugin/package.json', projectRootPath + '/package.json', {\n    '<PLUGIN_NAME>': pluginName\n  });\n  copyFile('plugin/README.md', projectRootPath + '/README.md', {\n    '<PLUGIN_NAME>': pluginName\n  });\n\n  console.log();\n  console.log('  enter path:');\n  console.log('  $ cd ' + projectRootPath);\n  console.log();\n\n  console.log('  install dependencies:');\n  console.log('  $ npm install');\n  console.log();\n\n  console.log('  watch compile:');\n  console.log('  $ npm run watch-compile');\n  console.log();\n\n  console.log('  run test:');\n  console.log('  $ npm run test-cov');\n\n  console.log();\n};\n/**\n * display thinkjs version\n * @return {} []\n */\nvar displayVersion = function displayVersion() {\n  var version = getVersion();\n  var chars = [' _______ _     _       _        _  _____ ', '|__   __| |   (_)     | |      | |/ ____|', '   | |  | |__  _ _ __ | | __   | | (___  ', '   | |  | \\'_ \\\\| | \\'_ \\\\| |/ /   | |\\\\___ \\\\ ', '   | |  | | | | | | | |   < |__| |____) |', '   |_|  |_| |_|_|_| |_|_|\\\\_\\\\____/|_____/ ', '                                         '].join('\\n');\n  console.log('\\n v' + version + '\\n');\n  console.log(chars);\n};\n\n_commander2.default.usage('[command] <options ...>');\n_commander2.default.option('-v, --version', 'output the version number', function () {\n  displayVersion();\n});\n_commander2.default.option('-V', 'output the version number', function () {\n  displayVersion();\n});\n_commander2.default.option('--es5', 'use es5 for project, used in `new` command');\n_commander2.default.option('-t, --ts', 'use TypeScript for project, used in `new` command');\n_commander2.default.option('-T, --test', 'add test dirs when create project, used in `new` command');\n_commander2.default.option('-r, --rest', 'create rest controller, used in `controller` command');\n_commander2.default.option('-M, --mongo', 'create mongo model, used in `model` command');\n_commander2.default.option('-R, --relation', 'create relation model, used in `model` command');\n_commander2.default.option('-m, --mode <mode>', 'project mode type(normal, module), default is module, used in `new` command', function (mode) {\n  if (modeList.indexOf(mode) === -1) {\n    console.log('mode value must one of ' + modeList.join(', '));\n    process.exit();\n  }\n  think.mode = think['mode_' + mode];\n});\n\n//create project\n_commander2.default.command('new <projectPath>').description('create project').action(function (projectPath) {\n  projectRootPath = _path2.default.resolve(projectRootPath, projectPath);\n  //commander.es = commander.es || commander.es6;\n  createProject();\n});\n\n//create module\n_commander2.default.command('module <moduleName>').description('add module').action(function (module) {\n  createModule(module.toLowerCase());\n});\n\n//create controlelr\n_commander2.default.command('controller <controllerName>').description('add controller').action(function (controller) {\n  createController(controller.toLowerCase());\n});\n\n//create service\n_commander2.default.command('service <serviceName>').description('add service').action(function (service) {\n  createService(service.toLowerCase());\n});\n\n//create model\n_commander2.default.command('model <modelName>').description('add model').action(function (model) {\n  createModel(model.toLowerCase());\n});\n\n//create middleware\n_commander2.default.command('middleware <middlewareName>').description('add middleware').action(function (middleware) {\n  createMiddleware(middleware.toLowerCase());\n});\n\n//create adapter\n_commander2.default.command('adapter <adapterName>').description('add adapter').action(function (adapter) {\n  createAdapter(adapter.toLowerCase());\n});\n\n//create plugin\n_commander2.default.command('plugin <pluginPath>').description('create ThinkJS plugin').action(function (pluginPath) {\n  projectRootPath = _path2.default.resolve(projectRootPath, pluginPath);\n\n  createPlugin();\n});\n\n_commander2.default.parse(process.argv);","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/base.js":"'use strict';\n\n/**\n * think.adapter.base class\n * all adapter will be inherit this class\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$base) {\n  (0, _inherits3.default)(_class, _think$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$base.apply(this, arguments));\n  }\n\n  /**\n   * parse config when config has parser function\n   * @param  {Object} config []\n   * @param  {Object} extra  []\n   * @param  {String} type   []\n   * @return {Object}        []\n   */\n  _class.prototype.parseConfig = function parseConfig() {\n    var _think;\n\n    return (_think = think).parseConfig.apply(_think, arguments);\n  };\n\n  return _class;\n}(think.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/bootstrap/deprecate.js":"'use strict';\n\n//var util = require('util');","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/bootstrap/middleware.js":"'use strict';","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/cache.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * cache configs\n */\nexports.default = {\n  type: 'file', //cache type\n  timeout: 6 * 3600, //6 hours\n  adapter: {\n    file: {\n      path: think.RUNTIME_PATH + _path2.default.sep + 'cache',\n      path_depth: 2,\n      file_ext: '.json'\n    },\n    redis: {\n      prefix: ''\n    },\n    memcache: {\n      prefix: ''\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/config.js":"'use strict';\n/**\n * default config\n * @type {Object}\n */\n\nexports.__esModule = true;\nvar config = {\n  port: 8360,\n  host: '',\n  encoding: 'utf-8',\n  pathname_prefix: '',\n  pathname_suffix: '.html',\n  proxy_on: false,\n  hook_on: true,\n  cluster_on: false,\n\n  service_on: true, //Service available\n  logic_on: true, //enable logic\n\n  domain_on: false, //use domain\n\n  timeout: 120, //120 seconds\n\n  auto_reload: false, //file auto reload\n  log_auto_reload: false, //log file auto reload\n\n  resource_on: true,\n  resource_reg: /^(static\\/|[^\\/]+\\.(?!js|html)\\w+$)/,\n\n  route_on: true,\n\n  log_request: false,\n\n  log_error: true,\n\n  create_server: undefined,\n  output_content: undefined,\n  deny_module_list: [],\n  default_module: 'home',\n  default_controller: 'index',\n  default_action: 'index',\n  callback_name: 'callback',\n  json_content_type: 'application/json',\n  subdomain: {} //subdomain deploy\n};\n/**\n * extra config on cli mode\n * @type {Object}\n */\nvar cliConfig = {\n  auto_close_socket: true\n};\n\nif (think.cli) {\n  config = think.extend(config, cliConfig);\n}\n\nexports.default = config;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/cookie.js":"'use strict';\n\n/**\n * cookie configs\n */\n\nexports.__esModule = true;\nexports.default = {\n  domain: '',\n  path: '/',\n  httponly: false,\n  secure: false,\n  timeout: 0\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/csrf.js":"'use strict';\n\n/**\n * csrf configs\n */\n\nexports.__esModule = true;\nexports.default = {\n  session_name: '__CSRF__', //name in session\n  form_name: '__CSRF__', //name in form\n  errno: 400,\n  errmsg: 'token error'\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/db.js":"'use strict';\n\n/**\n * db configs\n */\n\nexports.__esModule = true;\nexports.default = {\n  type: 'mysql',\n  host: '127.0.0.1',\n  port: '',\n  database: '',\n  user: '',\n  password: '',\n  prefix: '',\n  encoding: 'utf8',\n  nums_per_page: 10,\n  log_sql: false,\n  log_connect: true,\n  camel_case: false,\n  cache: {\n    on: true,\n    type: '',\n    timeout: 3600\n  }\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/error.js":"'use strict';\n\n/**\n * error configs\n */\n\nexports.__esModule = true;\nexports.default = {\n  key: 'errno', //error number\n  msg: 'errmsg', //error message\n  default_errno: 1000, //default errno\n  validate_errno: 1001\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/gc.js":"'use strict';\n\n/**\n * gc configs\n */\n\nexports.__esModule = true;\nexports.default = {\n  on: true,\n  interval: 3600, // one hour\n  filter: function filter() {\n    var hour = new Date().getHours();\n    if (hour === 4) {\n      return true;\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/hook.js":"'use strict';\n\nexports.__esModule = true;\nexports.default = {\n  request_begin: [],\n  payload_parse: ['parse_form_payload', 'parse_single_file_payload', 'parse_json_payload', 'parse_querystring_payload'],\n  payload_validate: ['validate_payload'],\n  resource: ['check_resource', 'output_resource'],\n  route_parse: ['rewrite_pathname', 'parse_route'],\n  logic_before: [],\n  logic_after: [],\n  controller_before: [],\n  controller_after: [],\n  view_before: [],\n  view_template: ['locate_template'],\n  view_parse: ['parse_template'],\n  view_filter: [],\n  view_after: [],\n  response_end: []\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/locale.js":"'use strict';\n\n/**\n * locale configs\n */\n\nexports.__esModule = true;\nexports.default = {\n  cookie_name: 'think_locale',\n  default: 'en'\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/memcache.js":"'use strict';\n\n/**\n * memcache configs\n */\n\nexports.__esModule = true;\nexports.default = {\n  host: '127.0.0.1',\n  port: 11211,\n  username: '',\n  password: '',\n  timeout: 0,\n  log_connect: true\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/package.js":"'use strict';\n/**\n * dependency package versions\n */\n\nexports.__esModule = true;\nexports.default = {\n  redis: '2.3.0',\n  sqlite3: '3.1.4',\n  ejs: '2.3.4',\n  jade: '1.11.0',\n  mongodb: '2.0.48',\n  memjs: '0.8.7',\n  sockjs: '0.3.15',\n  nunjucks: '2.2.0',\n  'socket.io': '1.3.7',\n  pg: '4.4.3',\n  'source-map-support': '0.4.0'\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/post.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * configs for post request\n */\nexports.default = {\n  json_content_type: ['application/json'],\n  max_file_size: 1024 * 1024 * 1024, //1G\n  max_fields: 100,\n  max_fields_size: 2 * 1024 * 1024, //2M,\n  single_file_header: 'x-filename',\n  file_upload_path: think.RUNTIME_PATH + _path2.default.sep + 'upload',\n  file_auto_remove: true,\n  log_error: false\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/redis.js":"'use strict';\n\n/**\n * redis configs\n */\n\nexports.__esModule = true;\nexports.default = {\n  host: '127.0.0.1',\n  port: 6379,\n  password: '',\n  timeout: 0,\n  log_connect: true\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/session.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * session configs\n */\nexports.default = {\n  name: 'thinkjs',\n  type: 'file',\n  secret: '',\n  timeout: 24 * 3600,\n  cookie: { // cookie options\n    length: 32\n  },\n  adapter: {\n    file: {\n      path: think.RUNTIME_PATH + _path2.default.sep + 'session'\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/view.js":"'use strict';\n\n/**\n * view configs\n */\n\nexports.__esModule = true;\nexports.default = {\n  type: 'ejs',\n  content_type: 'text/html', //send content type when write view content\n  file_ext: '.html', //file extension\n  file_depr: '_', // file depr between controller and action\n  root_path: '', //view root path\n\n  adapter: {\n    ejs: {}\n  }\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/websocket.js":"'use strict';\n\n/**\n * websocket configs \n */\n\nexports.__esModule = true;\nexports.default = {\n  on: false,\n  type: 'socket.io',\n  allow_origin: '',\n  path: '', //url path for websocket\n  messages: {\n    // open: 'home/websocket/open',\n  },\n  adapter: {\n    'socket.io': {\n      adapter: undefined\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/controller/rest.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * REST Base Controller\n * @return {} []\n */\nvar _class = function (_think$controller$bas) {\n  (0, _inherits3.default)(_class, _think$controller$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$controller$bas.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  _class.prototype.init = function init(http) {\n    _think$controller$bas.prototype.init.call(this, http);\n\n    this._isRest = true;\n    this._method = '';\n\n    this.resource = this.getResource();\n    this.id = this.getId();\n    this.modelInstance = this.model(this.resource);\n  };\n  /**\n   * get resource\n   * @return {String} [resource name]\n   */\n\n\n  _class.prototype.getResource = function getResource() {\n    var filename = this.__filename || __filename;\n    var last = filename.lastIndexOf(_path2.default.sep);\n    return filename.substr(last + 1, filename.length - last - 4);\n  };\n  /**\n   * get resource id\n   * @return {String} []\n   */\n\n\n  _class.prototype.getId = function getId() {\n    var id = this.get('id');\n    if (id && think.isString(id) || think.isNumber(id)) {\n      return id;\n    }\n    var last = this.http.pathname.split('/').slice(-1)[0];\n    if (last !== this.resource) {\n      return last;\n    }\n    return '';\n  };\n  /**\n   * get resource\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getAction = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var data, _modelInstance$where, pk;\n\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = void 0;\n\n              if (!this.id) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 4;\n              return this.modelInstance.getPk();\n\n            case 4:\n              pk = _context.sent;\n              _context.next = 7;\n              return this.modelInstance.where((_modelInstance$where = {}, _modelInstance$where[pk] = this.id, _modelInstance$where)).find();\n\n            case 7:\n              data = _context.sent;\n              return _context.abrupt('return', this.success(data));\n\n            case 9:\n              _context.next = 11;\n              return this.modelInstance.select();\n\n            case 11:\n              data = _context.sent;\n              return _context.abrupt('return', this.success(data));\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getAction() {\n      return _ref.apply(this, arguments);\n    }\n\n    return getAction;\n  }();\n  /**\n   * put resource\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.postAction = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {\n      var pk, data, insertId;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.modelInstance.getPk();\n\n            case 2:\n              pk = _context2.sent;\n              data = this.post();\n\n              delete data[pk];\n\n              if (!think.isEmpty(data)) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt('return', this.fail('data is empty'));\n\n            case 7:\n              _context2.next = 9;\n              return this.modelInstance.add(data);\n\n            case 9:\n              insertId = _context2.sent;\n              return _context2.abrupt('return', this.success({ id: insertId }));\n\n            case 11:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function postAction() {\n      return _ref2.apply(this, arguments);\n    }\n\n    return postAction;\n  }();\n  /**\n   * delete resource\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.deleteAction = function () {\n    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {\n      var _modelInstance$where2;\n\n      var pk, rows;\n      return _regenerator2.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.id) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt('return', this.fail('params error'));\n\n            case 2:\n              _context3.next = 4;\n              return this.modelInstance.getPk();\n\n            case 4:\n              pk = _context3.sent;\n              _context3.next = 7;\n              return this.modelInstance.where((_modelInstance$where2 = {}, _modelInstance$where2[pk] = this.id, _modelInstance$where2)).delete();\n\n            case 7:\n              rows = _context3.sent;\n              return _context3.abrupt('return', this.success({ affectedRows: rows }));\n\n            case 9:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function deleteAction() {\n      return _ref3.apply(this, arguments);\n    }\n\n    return deleteAction;\n  }();\n  /**\n   * update resource\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.putAction = function () {\n    var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {\n      var _modelInstance$where3;\n\n      var pk, data, rows;\n      return _regenerator2.default.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this.id) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt('return', this.fail('params error'));\n\n            case 2:\n              _context4.next = 4;\n              return this.modelInstance.getPk();\n\n            case 4:\n              pk = _context4.sent;\n              data = this.post();\n\n              delete data[pk];\n\n              if (!think.isEmpty(data)) {\n                _context4.next = 9;\n                break;\n              }\n\n              return _context4.abrupt('return', this.fail('data is empty'));\n\n            case 9:\n              _context4.next = 11;\n              return this.modelInstance.where((_modelInstance$where3 = {}, _modelInstance$where3[pk] = this.id, _modelInstance$where3)).update(data);\n\n            case 11:\n              rows = _context4.sent;\n              return _context4.abrupt('return', this.success({ affectedRows: rows }));\n\n            case 13:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function putAction() {\n      return _ref4.apply(this, arguments);\n    }\n\n    return putAction;\n  }();\n  /**\n   * call\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.__call = function __call() {\n    return this.fail(think.locale('ACTION_INVALID', this.http.action, this.http.url));\n  };\n\n  return _class;\n}(think.controller.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/app.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _cluster = require('cluster');\n\nvar _cluster2 = _interopRequireDefault(_cluster);\n\nvar _domain = require('domain');\n\nvar _domain2 = _interopRequireDefault(_domain);\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nvar _http = require('http');\n\nvar _http2 = _interopRequireDefault(_http);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$http$base) {\n  (0, _inherits3.default)(_class, _think$http$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$http$base.apply(this, arguments));\n  }\n\n  /**\n   * invoke logic\n   * @return {} []\n   */\n  _class.prototype.invokeLogic = function invokeLogic() {\n    var _this2 = this;\n\n    if (!think.config('logic_on')) {\n      return;\n    }\n\n    return this.hook('logic_before').then(function () {\n      return _this2.execLogic();\n    }).catch(function (err) {\n      //ignore prevent reject promise\n      //make logic_after hook can be invoked\n      if (!think.isPrevent(err)) {\n        return _promise2.default.reject(err);\n      }\n    }).then(function () {\n      return _this2.hook('logic_after');\n    }).then(function () {\n      //http is end\n      if (_this2.http._isEnd) {\n        return think.prevent();\n      }\n    });\n  };\n  /**\n   * exec logic\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.execLogic = function execLogic() {\n    var name = this.http.module + '/' + think.dirname.logic + '/' + this.http.controller;\n    var cls = think.require(name, true);\n    if (!cls) {\n      return _promise2.default.resolve();\n    }\n    var instance = new cls(this.http);\n    var action = think.camelCase(this.http.action);\n    if (instance[action + 'Action']) {\n      return this.action(instance, action, false);\n    }\n    //call action\n    if (instance.__call) {\n      return this.action(instance, '__call', false);\n    }\n    //only has before method\n    if (instance.__before) {\n      return think.co(instance.__before(instance));\n    }\n    return _promise2.default.resolve();\n  };\n  /**\n   * invoke controller\n   * @return {} []\n   */\n\n\n  _class.prototype.invokeController = function invokeController(controller) {\n    var _this3 = this;\n\n    return this.hook('controller_before').then(function () {\n      return _this3.execController(controller);\n    }).catch(function (err) {\n      //ignore prevent reject promise\n      //make controller_after & response_end hook can be invoked\n      if (!think.isPrevent(err)) {\n        return _promise2.default.reject(err);\n      }\n    }).then(function () {\n      return _this3.hook('controller_after');\n    });\n  };\n  /**\n   * get controller instance\n   * @return {} []\n   */\n\n\n  _class.prototype.getControllerInstance = function getControllerInstance() {\n    var http = this.http;\n    var name = http.module + '/' + think.dirname.controller + '/' + http.controller;\n    var Controller = think.require(name, true);\n    if (!Controller) {\n      return;\n    }\n    var instance = new Controller(http);\n    //rewrite action when controller is rest\n    if (instance._isRest) {\n      var method = instance._method;\n      //get method from GET params\n      if (method) {\n        method = instance.get(method).toLowerCase();\n      }\n      if (!method) {\n        method = this.http.method.toLowerCase();\n      }\n      this.http.action = method;\n    }\n    return instance;\n  };\n  /**\n   * exec controller\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.execController = function execController(controller) {\n    if (controller) {\n      return this.execAction(controller);\n    }\n    var http = this.http;\n    http.error = new Error(think.locale('CONTROLLER_NOT_FOUND', http.controller, http.url));\n    return think.statusAction(404, http);\n  };\n  /**\n   * exec action\n   * @param  {Object} controller [controller instance]\n   * @param  {Boolean} call       [is call controller]\n   * @return {Promise}            []\n   */\n\n\n  _class.prototype.execAction = function execAction(controller) {\n    var http = this.http;\n    var action = think.camelCase(http.action);\n    var actionWithSuffix = action + 'Action';\n    //action is exist\n    if (controller[actionWithSuffix]) {\n      return this.action(controller, action, false);\n    }\n    //call action\n    if (controller.__call) {\n      return this.action(controller, '__call', false);\n    }\n    http.error = new Error(think.locale('ACTION_NOT_FOUND', actionWithSuffix, http.url));\n    return think.statusAction(404, http);\n  };\n\n  /**\n   * exec \n   * @return {Promise} []\n   */\n\n\n  _class.prototype.exec = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var controller;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.hook('resource');\n\n            case 2:\n              _context.next = 4;\n              return this.hook('route_parse');\n\n            case 4:\n\n              //set module config, can not set config in request\n              this.http._config = thinkData.config[this.http.module];\n              //console.log(eval('%HasFastProperties(this.http._config)'));\n\n              //babel compile error\n\n              if (!think.compileError) {\n                _context.next = 8;\n                break;\n              }\n\n              this.http.error = think.compileError;\n              return _context.abrupt('return', think.statusAction(500, this.http));\n\n            case 8:\n              //must get controller before invoke logic\n              controller = this.getControllerInstance();\n              _context.next = 11;\n              return this.invokeLogic();\n\n            case 11:\n              _context.next = 13;\n              return this.invokeController(controller);\n\n            case 13:\n              _context.next = 15;\n              return this.hook('response_end');\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function exec() {\n      return _ref.apply(this, arguments);\n    }\n\n    return exec;\n  }();\n  /**\n   * exec error\n   * @param  {Error} err []\n   * @return {}     []\n   */\n\n\n  _class.prototype.execError = function execError(err) {\n    var http = this.http;\n    http.error = err;\n    return think.statusAction(500, http, true).catch(function () {});\n  };\n  /**\n   * run\n   * @return {} []\n   */\n\n\n  _class.prototype.run = function run() {\n    var _this4 = this;\n\n    var http = this.http;\n    http.header('X-Powered-By', 'thinkjs-' + think.version);\n\n    if (think.config('domain_on')) {\n      var instance = _domain2.default.create();\n      instance.on('error', function (err) {\n        _this4.execError(err);\n      });\n      instance.run(function () {\n        _this4.exec().catch(function (err) {\n          _this4.execError(err);\n        });\n      });\n    } else {\n      this.exec().catch(function (err) {\n        _this4.execError(err);\n      });\n    }\n  };\n  /**\n   * create server\n   * @return {} []\n   */\n\n\n  _class.createServer = function createServer() {\n    var _this5 = this;\n\n    var handle = think.config('create_server');\n    var host = think.config('host');\n    var port = think.port || think.config('port');\n    //createServer callback\n    var callback = function callback(req, res) {\n      think.http(req, res).then(function (http) {\n        new _this5(http).run();\n      });\n    };\n    var server = void 0;\n    //define createServer in application\n    if (handle) {\n      server = handle(callback, port, host, this);\n    } else {\n      //create server\n      server = _http2.default.createServer(callback);\n      server.listen(port, host);\n    }\n    think.server = server;\n    //start websocket\n    var websocket = think.parseConfig(think.config('websocket'));\n    if (websocket.on) {\n      var Cls = think.adapter('websocket', websocket.type);\n      var instance = new Cls(server, websocket, this);\n      instance.run();\n    }\n  };\n  /**\n   * log\n   * @return {} []\n   */\n\n\n  _class.log = function log() {\n    var host = think.config('host');\n    var port = think.port || think.config('port');\n    var websocketStatus = think.config('websocket.on') ? 'open' : 'closed';\n    var clusterStatus = think.config('cluster_on') ? 'open' : 'closed';\n\n    var url = 'http://' + (host || '127.0.0.1') + ':' + port + '/';\n    think.log(function (colors) {\n      return 'Server running at ' + colors.green(url);\n    }, 'THINK');\n    think.log(function (colors) {\n      return 'ThinkJS Version: ' + colors.magenta(think.version);\n    }, 'THINK');\n    think.log(function (colors) {\n      return 'Cluster Status: ' + colors.magenta(clusterStatus);\n    }, 'THINK');\n    think.log(function (colors) {\n      return 'WebSocket Status: ' + colors.magenta(websocketStatus);\n    }, 'THINK');\n    think.log(function (colors) {\n      return 'File Auto Compile: ' + colors.magenta(!!think.autoCompile);\n    }, 'THINK');\n    think.log(function (colors) {\n      return 'File Auto Reload: ' + colors.magenta(think.config('auto_reload'));\n    }, 'THINK');\n    think.log(function (colors) {\n      return 'App Enviroment: ' + colors.magenta(think.env) + '\\n';\n    }, 'THINK');\n  };\n  /**\n   * cli mode\n   * @return {} []\n   */\n\n\n  _class.cli = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {\n      var http;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return think.http(think.cli);\n\n            case 2:\n              http = _context2.sent;\n              return _context2.abrupt('return', new this(http).run());\n\n            case 4:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function cli() {\n      return _ref2.apply(this, arguments);\n    }\n\n    return cli;\n  }();\n  /**\n   * http mode\n   * @return {} []\n   */\n\n\n  _class.http = function http() {\n    var nums = think.config('cluster_on');\n    if (!nums) {\n      this.createServer();\n      return this.log();\n    }\n    if (nums === true) {\n      nums = _os2.default.cpus().length;\n    }\n    if (_cluster2.default.isMaster) {\n      for (var i = 0; i < nums; i++) {\n        _cluster2.default.fork();\n      }\n      _cluster2.default.on('exit', function (worker) {\n        think.log(new Error(think.locale('WORKER_DIED', worker.process.pid)), 'THINK');\n        process.nextTick(function () {\n          return _cluster2.default.fork();\n        });\n      });\n      this.log();\n    } else {\n      this.createServer();\n    }\n  };\n  /**\n   * run\n   * @return {} []\n   */\n\n\n  _class.run = function run() {\n    if (think.cli) {\n      return this.cli();\n    }\n    return this.http();\n  };\n\n  return _class;\n}(think.http.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/check_csrf.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _csrf = require('./csrf.js');\n\nvar _csrf2 = _interopRequireDefault(_csrf);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * check csrf\n * @type {}\n */\nvar _class = function (_CSRF) {\n  (0, _inherits3.default)(_class, _CSRF);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _CSRF.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {Promise} []\n   */\n  _class.prototype.run = function run() {\n    think.log('`check_csrf` middleware is deprecated, use `csrf` instead', 'WARNING');\n    return _CSRF.prototype.run.call(this);\n  };\n\n  return _class;\n}(_csrf2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/csrf.js":"'use strict';\n/**\n * check csrf\n * @type {}\n */\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {Promise} []\n   */\n  _class.prototype.run = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var csrf, session, isGet, isPost, isAjax, isJsonp, value, _value, formValue;\n\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              csrf = this.config('csrf');\n\n              think.session(this.http);\n              session = this.http._session;\n              isGet = this.http.isGet();\n              isPost = this.http.isPost();\n              isAjax = this.http.isAjax();\n              isJsonp = this.http.isJsonp();\n\n              if (!(isGet && !isAjax && !isJsonp)) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 10;\n              return session.get(csrf.session_name);\n\n            case 10:\n              value = _context.sent;\n\n              if (value) {\n                _context.next = 15;\n                break;\n              }\n\n              value = think.uuid(32);\n              _context.next = 15;\n              return session.set(csrf.session_name, value);\n\n            case 15:\n              this.http.view().assign(csrf.form_name, value);\n              _context.next = 26;\n              break;\n\n            case 18:\n              if (!(isPost || isAjax || isJsonp)) {\n                _context.next = 26;\n                break;\n              }\n\n              _context.next = 21;\n              return session.get(csrf.session_name);\n\n            case 21:\n              _value = _context.sent;\n              formValue = this.http[isPost ? 'post' : 'param'](csrf.form_name);\n\n              if (!formValue) {\n                formValue = this.http.header('x-' + csrf.form_name);\n              }\n\n              if (!(!_value || formValue !== _value)) {\n                _context.next = 26;\n                break;\n              }\n\n              return _context.abrupt('return', this.http.fail(csrf.errno, csrf.errmsg));\n\n            case 26:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function run() {\n      return _ref.apply(this, arguments);\n    }\n\n    return run;\n  }();\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/check_resource.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _path = require('path');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * resource check\n * @param  {}            \n * @return {}     []\n */\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {Promise} []\n   */\n  _class.prototype.run = function run() {\n    var pathname = this.http.pathname;\n    if (!this.config('resource_on') || !pathname || pathname === '/') {\n      return null;\n    }\n    // pathname maybe not valid, then throw an `URI malformed` error\n    try {\n      pathname = decodeURIComponent(pathname).replace(/\\\\/g, '/');\n    } catch (e) {\n      return null;\n    }\n    pathname = (0, _path.normalize)(pathname);\n    // replace \\ to / on windows\n    pathname = pathname.replace(/\\\\/g, '/');\n    var reg = this.config('resource_reg');\n    if (!reg.test(pathname)) {\n      return null;\n    }\n    var file = (0, _path.normalize)(think.RESOURCE_PATH + '/' + pathname);\n    if (file.indexOf(think.RESOURCE_PATH) !== 0) {\n      return null;\n    }\n    //resource exist\n    if (think.isFile(file)) {\n      var cors = this.config('resource_cors');\n      if (cors) {\n        this.http.header('Access-Control-Allow-Origin', typeof cors === 'string' ? cors : '*');\n      }\n      // extend resource headers\n      var resourceHeaders = this.config('resource_headers') || {};\n      for (var header in resourceHeaders) {\n        this.http.header(header, resourceHeaders[header]);\n      }\n      return file;\n    } else {\n      return true;\n    }\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/force_proxy.js":"'use strict';\n/**\n * force proxy\n * @type {}\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {\n    var http = this.http;\n    //deny access by ip + port\n    if (this.config('proxy_on') && http.host !== http.hostname && !http.socket) {\n      http.error = new Error(think.locale('DISALLOW_PORT'));\n      return think.statusAction(403, http);\n    }\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/locate_template.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * find template file path\n * @param  {String}  \n * @return {Class}\n */\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * get path prefix\n   * @return {String} []\n   */\n  _class.prototype.getPathPrefix = function getPathPrefix(module) {\n    var pathPrefix = void 0,\n        http = this.http,\n        prefix = '';\n    var root_path = this.options.root_path;\n\n    var theme = http.theme();\n    var lang = http._langAsViewPath && http.lang();\n\n    module = module || http.module;\n\n    //support locale\n    if (lang) {\n      prefix += think.sep + lang;\n    }\n    //support theme\n    if (theme) {\n      prefix += think.sep + theme;\n    }\n\n    //view root path is defined\n    if (root_path) {\n      pathPrefix = _path2.default.normalize(root_path);\n      if (think.mode === think.mode_module) {\n        pathPrefix += prefix + think.sep + module;\n      }\n    } else {\n      pathPrefix = think.getPath(module, think.dirname.view, prefix);\n    }\n\n    return pathPrefix;\n  };\n  /**\n   * run\n   * @param  {String} templateFile [template filepath]\n   * @return {}              []\n   */\n\n\n  _class.prototype.run = function run(options) {\n    if (!think.isObject(options)) {\n      options = think.extend({\n        templateFile: options\n      }, this.config('view'));\n    }\n    this.options = options;\n\n    var templateFile = options.templateFile;\n    //is absolute file path\n    if (templateFile && _path2.default.isAbsolute(templateFile)) {\n      return templateFile;\n    }\n    var http = this.http;\n    var _options = options,\n        file_depr = _options.file_depr,\n        file_ext = _options.file_ext;\n\n    var pathPrefix = this.getPathPrefix();\n    var controller = http.controller.replace(/\\//g, think.sep);\n\n    //if file_depr is /, replace to think.sep, avoid error on windows\n    if (file_depr === '/') {\n      file_depr = think.sep;\n    }\n\n    // this.display()\n    if (!templateFile) {\n      return pathPrefix + think.sep + controller + file_depr + http.action + file_ext;\n    }\n    //replace : to /\n    templateFile = templateFile.replace(/\\:/g, '/');\n\n    // this.display('detail')\n    // this.display('index/detail')\n    // this.display('admin/index/detail')\n    // this.display('admin/index/detail.html')\n    var paths = templateFile.split('/');\n    var length = paths.length;\n    var action = paths[length - 1];\n\n    var module = void 0;\n    if (length === 2) {\n      controller = paths[0];\n    } else if (length > 2) {\n      var index = think.module.indexOf(paths[0]) > -1 ? 1 : 0;\n      if (index) {\n        module = paths[0];\n      }\n      var newController = paths.slice(index, length - 1).join(think.sep);\n      if (newController) {\n        controller = newController;\n      }\n    }\n\n    if (module && module !== http.module) {\n      pathPrefix = this.getPathPrefix(module);\n    }\n\n    templateFile = pathPrefix + think.sep + controller + file_depr + action;\n    if (action.indexOf('.') === -1) {\n      templateFile += file_ext;\n    }\n    return templateFile;\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/output_resource.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _mime = require('mime');\n\nvar _mime2 = _interopRequireDefault(_mime);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * output resource\n * @type {}\n */\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run(file) {\n    //not resource\n    if (file === false) {\n      return;\n    }\n    var http = this.http;\n    //is resource but not exist\n    if (file === true) {\n      http.status(404);\n      http.end();\n      return think.prevent();\n    }\n    //flag request is resource\n    http._isResource = true;\n\n    var contentType = _mime2.default.lookup(file);\n    http.type(contentType, false);\n\n    var range = http.header('range');\n    if (!range) {\n      return this.outputNormal(file);\n    }\n    return this.outputRange(file, range);\n  };\n  /**\n   * output normal file\n   * @param  {String} file []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.outputNormal = function outputNormal(file) {\n    var http = this.http;\n    var stream = _fs2.default.createReadStream(file);\n    stream.pipe(http.res);\n    stream.on('end', function () {\n      http.end();\n    });\n    stream.on('error', function () {\n      http.end();\n    });\n    return think.prevent();\n  };\n  /**\n   * output range file\n   * @param  {String} file  []\n   * @param  {String} range []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.outputRange = function outputRange(file, range) {\n    //request has range header\n    var size = _fs2.default.statSync(file).size;\n    var match = range.match(/bytes=(\\d+)\\-(\\d*)/);\n    var slice = 1 * 1024 * 1024;\n    var from = parseInt(match[1]) || 0;\n    var to = parseInt(match[2]) || 0;\n    if (!to) {\n      to = from + slice - 1;\n    }\n    to = Math.min(to, size - 1);\n\n    var http = this.http;\n    http.status(206);\n    http.header('Accept-Ranges', 'bytes');\n    http.header('Content-Range', 'bytes ' + from + '-' + to + '/' + size);\n\n    var fd = _fs2.default.openSync(file, 'r');\n    var buffer = new Buffer(to - from + 1);\n    _fs2.default.readSync(fd, buffer, 0, to - from, from);\n    _fs2.default.closeSync(fd);\n    http.end(buffer);\n\n    return think.prevent();\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/parse_form_payload.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nvar _multiparty = require('multiparty');\n\nvar _multiparty2 = _interopRequireDefault(_multiparty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MULTIPARTY_REG = /^multipart\\/(form-data|related);\\s*boundary=(?:\"([^\"]+)\"|([^;]+))$/i;\n\n/**\n * parse form payload\n * @type {}\n */\n\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {\n    var http = this.http;\n    if (!http.req.readable) {\n      return;\n    }\n\n    //file upload by form or FormData\n    //can not use http.type method\n    if (!MULTIPARTY_REG.test(http.headers['content-type'])) {\n      return;\n    }\n\n    //make upload file path\n    var uploadDir = think.config('post.file_upload_path');\n    if (!uploadDir) {\n      uploadDir = _os2.default.tmpdir() + think.sep + 'thinkjs' + think.sep + 'upload';\n    }\n    think.mkdir(uploadDir);\n\n    return this.getFormData(uploadDir);\n  };\n  /**\n   * get form data\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getFormData = function getFormData(uploadDir) {\n    var http = this.http;\n    var deferred = think.defer();\n    var postConfig = think.config('post');\n    var form = new _multiparty2.default.Form({\n      maxFieldsSize: postConfig.max_fields_size,\n      maxFields: postConfig.max_fields,\n      maxFilesSize: postConfig.max_file_size,\n      uploadDir: uploadDir\n    });\n    //support for file with multiple=\"multiple\"\n    var files = http._file;\n    form.on('file', function (name, value) {\n      if (name in files) {\n        if (!think.isArray(files[name])) {\n          files[name] = [files[name]];\n        }\n        files[name].push(value);\n      } else {\n        files[name] = value;\n      }\n    });\n    form.on('field', function (name, value) {\n      http._post[name] = value;\n    });\n    form.on('close', function () {\n      deferred.resolve(null);\n    });\n    form.on('error', function (err) {\n      http.req.resume();\n      http.res.statusCode = 400;\n      http.end();\n      //log error\n      if (http.config('post.log_error')) {\n        think.log(err);\n      }\n    });\n    form.parse(http.req);\n    return deferred.promise;\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/parse_json_payload.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * parse json payload\n * @type {}\n */\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {\n    var http = this.http;\n    if (!http.req.readable) {\n      return;\n    }\n\n    var types = http.config('post.json_content_type');\n    if (types.indexOf(http.type()) === -1) {\n      return;\n    }\n    return http.getPayload().then(function (payload) {\n      var data = void 0;\n      try {\n        data = JSON.parse(payload);\n      } catch (e) {\n        //log error\n        if (http.config('post.log_error')) {\n          think.log(new Error('JSON.parse error, payload is not a valid JSON data'));\n        }\n        //if using json parse error, then use querystring parse.\n        //sometimes http header has json content-type, but payload data is querystring data\n        data = _querystring2.default.parse(payload);\n      }\n      if (!think.isEmpty(data)) {\n        http._post = think.extend(http._post, data);\n      }\n      return null;\n    });\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/parse_querystring_payload.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * parse json payload\n * @type {}\n */\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {\n    var http = this.http;\n\n    if (!http.req.readable) {\n      return;\n    }\n\n    var contentType = http.type();\n    if (contentType && contentType.indexOf('application/x-www-form-urlencoded') === -1) {\n      return;\n    }\n\n    return http.getPayload().then(function (payload) {\n      http._post = think.extend(http._post, _querystring2.default.parse(payload));\n      return null;\n    });\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/parse_route.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * route array rules:\n * [\n *   [/^user\\/(\\d+)/, 'home/user/detail?id=:1'],\n *   [/^usr\\/(\\d+)/, {\n *     get: 'home/user/detail?id=:1',\n *     post: 'home/user/delete?id=:1'\n *   }],\n *   ...\n * ]\n *\n * route object rules:\n * {\n *   admin: {\n *     reg: /^admin/,\n *     children: [\n *       \n *     ]\n *   }\n * }\n */\n\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {Promise} []\n   */\n  _class.prototype.run = function run() {\n    // cleanPathname\n    this.http.pathname = this.http.pathname.replace(/^\\/|\\/$/g, '');\n\n    if (!this.config('route_on')) {\n      return this.parsePathname();\n    }\n\n    var rules = think.route();\n    if (think.isEmpty(rules)) {\n      return this.parsePathname();\n    }\n    return this.parse(rules);\n  };\n  /**\n   * parse routes\n   * @param  {Array} routes [routes]\n   * @return {}        []\n   */\n\n\n  _class.prototype.parse = function parse(rules) {\n    if (think.isArray(rules)) {\n      return this.parseRules(rules);\n    }\n    for (var module in rules) {\n      var reg = rules[module].reg;\n      if (!reg || reg.test(this.http.pathname)) {\n        this.module = module;\n        return this.parseRules(rules[module].children);\n      }\n    }\n    return this.parsePathname();\n  };\n  /**\n   * parse array rules\n   * @param  {Array} rules []\n   * @return {}       []\n   */\n\n\n  _class.prototype.parseRules = function parseRules(rules) {\n    var length = rules.length;\n    var pathname = this.http.pathname;\n    if (length === 0 || !pathname) {\n      return this.parsePathname();\n    }\n    var match = void 0,\n        item = void 0,\n        route = void 0,\n        rule = void 0;\n    for (var i = 0; i < length; i++) {\n      item = rules[i];\n      route = this.getRoute(item[1]);\n      if (!route) {\n        continue;\n      }\n      rule = item[0];\n      //regexp route\n      if (think.isRegExp(rule)) {\n        match = pathname.match(rule);\n        if (match) {\n          return this.parseRegExpRule(match, route);\n        }\n      }\n      //is string route\n      else if (this.checkUrlMatch(rule)) {\n          return this.parseRoute(route);\n        }\n    }\n    return this.parsePathname();\n  };\n  /**\n   * get module from pathname\n   * @return {String} []\n   */\n\n\n  _class.prototype.parseModule = function parseModule() {\n    var defaultModule = think.config('default_module');\n    if (think.mode === think.mode_normal) {\n      return defaultModule;\n    }\n    var http = this.http;\n    var pathname = http.pathname;\n    var pos = pathname.indexOf('/');\n    var mod = pos === -1 ? pathname : pathname.substr(0, pos);\n    if (this.module) {\n      if (this.module === mod) {\n        http.pathname = pathname.substr(mod.length + 1);\n      } else {\n        mod = this.module;\n      }\n    } else if (mod && mod !== think.dirname.common && think.module.indexOf(mod) > -1) {\n      http.pathname = pathname.substr(mod.length + 1);\n    } else {\n      mod = '';\n    }\n    return this.getModule(mod);\n  };\n  /**\n   * get controller from pathname\n   * @return {} []\n   */\n\n\n  _class.prototype.parseController = function parseController(module) {\n    var subControllers = thinkData.subController[module];\n    var http = this.http;\n    var pathname = http.pathname;\n    if (!pathname) {\n      return '';\n    }\n    var pos = pathname.indexOf('/');\n    //search sub controller\n    if (pos > -1 && subControllers) {\n      for (var i = 0, length = subControllers.length, item; i < length; i++) {\n        item = subControllers[i];\n        if (pathname === item || pathname.indexOf(item + '/') === 0) {\n          http.pathname = http.pathname.substr(item.length + 1);\n          return item;\n        }\n      }\n    }\n    var controller = pos === -1 ? pathname : pathname.substr(0, pos);\n    http.pathname = http.pathname.substr(controller.length + 1);\n    return controller;\n  };\n  /**\n   * parse pathname\n   * @return {} []\n   */\n\n\n  _class.prototype.parsePathname = function parsePathname() {\n    var http = this.http;\n    if (!http.pathname) {\n      this.http.module = this.getModule();\n      this.http.controller = this.getController();\n      this.http.action = this.getAction();\n      return;\n    }\n    var module = this.parseModule();\n    var controller = this.parseController(module);\n    var paths = http.pathname.split('/');\n    var action = paths.shift();\n\n    this.parseExtPath(paths);\n\n    this.http.module = module; //module not need check\n    this.http.controller = this.getController(controller);\n    this.http.action = this.getAction(action);\n\n    if (!this.http.controller) {\n      this.http.error = new Error(think.locale('CONTROLLER_INVALID', controller, this.http.url));\n      return think.statusAction(400, http);\n    }\n    if (!this.http.action) {\n      this.http.error = new Error(think.locale('ACTION_INVALID', action, this.http.url));\n      return think.statusAction(400, http);\n    }\n  };\n  /**\n   * parse extra path\n   * @param  {Array} paths [extra path]\n   * @return {}       []\n   */\n\n\n  _class.prototype.parseExtPath = function parseExtPath(paths) {\n    if (paths.length === 0) {\n      return;\n    }\n    if (!think.isArray(paths)) {\n      if (paths[0] === '/') {\n        paths = paths.slice(1);\n      }\n      paths = paths.split('/');\n    }\n    for (var i = 0, name, length = Math.ceil(paths.length) / 2; i < length; i++) {\n      name = paths[i * 2];\n      if (name) {\n        this.http._get[name] = decodeURIComponent(paths[i * 2 + 1] || '');\n      }\n    }\n  };\n  /**\n   * check url is match\n   * @param  {String} rule [url rule]\n   * @return {Boolean}      []\n   */\n\n\n  _class.prototype.checkUrlMatch = function checkUrlMatch(rule) {\n    var pathname = this.http.pathname.split('/');\n    rule = rule.split('/');\n    var i = 0,\n        length = rule.length,\n        plength = pathname.length,\n        item = void 0,\n        pitem = void 0;\n    //if rule lenth is more than pathname, it will be false\n    if (length > plength) {\n      return false;\n    }\n    var match = {};\n    for (; i < length; i++) {\n      item = rule[i];\n      pitem = pathname[i];\n      if (item.indexOf(':') === 0) {\n        match[item.slice(1)] = pitem;\n      } else {\n        if (pitem.toLowerCase() !== item.toLowerCase()) {\n          return false;\n        }\n      }\n    }\n    //append match data to this.http._get\n    for (var key in match) {\n      this.http._get[key] = match[key];\n    }\n    if (plength > length) {\n      this.parseExtPath(pathname.slice(length));\n    }\n    return true;\n  };\n  /**\n   * get route\n   * @param  {Object} route   []\n   * @param  {Array} matches []\n   * @return {[type]}         []\n   */\n\n\n  _class.prototype.getRoute = function getRoute(route) {\n    if (think.isString(route)) {\n      return route;\n    }\n    for (var method in route) {\n      if (method.toUpperCase().indexOf(this.http.method) > -1) {\n        return route[method];\n      }\n    }\n    return '';\n  };\n  /**\n   * parse route string\n   * @param  {String} route []\n   * @return {}       []\n   */\n\n\n  _class.prototype.parseRoute = function parseRoute(route) {\n    if (route.indexOf('?') > -1) {\n      var urlInfo = _url2.default.parse(route, true);\n      var query = urlInfo.query;\n      for (var key in query) {\n        if (query[key] || !(key in this.http._get)) {\n          this.http._get[key] = query[key];\n        }\n      }\n      route = urlInfo.pathname;\n    }\n    if (route[0] === '/') {\n      route = route.slice(1);\n    }\n    this.http.pathname = route;\n    return this.parsePathname();\n  };\n  /**\n   * parse regexp rule\n   * @param  {Array} matches  [route matches]\n   * @param  {String | Object} route    [route]\n   * @return {Boolean}          []\n   */\n\n\n  _class.prototype.parseRegExpRule = function parseRegExpRule(matches, route) {\n    //replace :1, :2 in route\n    //such as: group/detail?date=:1&groupId=:2&page=:3\n    route = route.replace(/:(\\d+)/g, function (a, b) {\n      return matches[b] || '';\n    });\n    var pathname = this.http.pathname.slice(matches[0].length);\n    this.parseExtPath(pathname);\n    this.parseRoute(route);\n  };\n  /**\n   * check value is lowerCase\n   * @param  {String} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.checkLowerCase = function checkLowerCase(value) {\n    // if value has - chars, not check, for REST API\n    if (value.indexOf('-') > -1) {\n      return;\n    }\n    var lower = value.toLowerCase();\n    if (value !== lower) {\n      think.log(function (colors) {\n        return colors.yellow('[WARNING]') + ' ' + think.locale('URL_HAS_UPPERCASE', value);\n      });\n    }\n  };\n  /**\n   * get module name\n   * @param  {String} module []\n   * @return {String}        []\n   */\n\n\n  _class.prototype.getModule = function getModule(module) {\n    if (!module || think.mode === think.mode_normal) {\n      return think.config('default_module');\n    }\n    this.checkLowerCase(module);\n    return module.toLowerCase();\n  };\n  /**\n   * get controller name\n   * @param  {String} controller []\n   * @return {String}            []\n   */\n\n\n  _class.prototype.getController = function getController(controller) {\n    if (!controller) {\n      return think.config('default_controller');\n    }\n    //has / in controller\n    if (/^[\\w\\/]+$/.test(controller)) {\n      this.checkLowerCase(controller);\n      return controller.toLowerCase();\n    }\n    return '';\n  };\n  /**\n   * get action\n   * @param  {String} action [action name]\n   * @return {String}        []\n   */\n\n\n  _class.prototype.getAction = function getAction(action) {\n    if (!action) {\n      return think.config('default_action');\n    }\n    // action name support `-` char, for REST API\n    // /api/system/3b6c279c-bd61-f093-c543-56f9ab4300b7\n    if (/^[\\w\\-]+$/.test(action)) {\n      this.checkLowerCase(action);\n      return action.toLowerCase();\n    }\n    return '';\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/parse_single_file_payload.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * parse single file payload, uploaded with ajax\n * @type {}\n */\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {\n    var http = this.http;\n\n    if (!http.req.readable) {\n      return;\n    }\n\n    var post = this.config('post');\n    var filename = http.header(post.single_file_header);\n    if (!filename) {\n      return;\n    }\n\n    var uploadDir = post.file_upload_path;\n    if (!uploadDir) {\n      uploadDir = _os2.default.tmpdir() + think.sep + 'thinkjs' + think.sep + 'upload';\n    }\n    think.mkdir(uploadDir);\n\n    return this.getUploadFile(uploadDir, filename);\n  };\n  /**\n   * get upload file\n   * @param  {String} uploadDir []\n   * @param  {String} filename  []\n   * @return {Promise}           []\n   */\n\n\n  _class.prototype.getUploadFile = function getUploadFile(uploadDir, filename) {\n    var deferred = think.defer();\n    var http = this.http;\n    var name = think.uuid(20);\n    var filepath = uploadDir + think.sep + name + _path2.default.extname(filename).slice(0, 5);\n    var stream = _fs2.default.createWriteStream(filepath);\n    http.req.pipe(stream);\n    stream.on('error', function (err) {\n      http.res.statusCode = 400;\n      http.end();\n      //log error\n      if (http.config('post.log_error')) {\n        think.log(err);\n      }\n    });\n    stream.on('close', function () {\n      http._file.file = {\n        fieldName: 'file',\n        originalFilename: filename,\n        path: filepath,\n        size: _fs2.default.statSync(filepath).size\n      };\n      deferred.resolve(null);\n    });\n    return deferred.promise;\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/parse_template.js":"'use strict';\n\n/**\n * parse template content\n * @param  {Object} \n * @return {Promise}         []\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @param  {Object} data [render template data]\n   * @return {Promise}      []\n   */\n  _class.prototype.run = function run(data) {\n    var file = data.file;\n    this.http.tpl_file = file;\n    var config = data.config || {};\n    var engine = config.type || this.config('view.type') || 'base';\n    var Cls = think.adapter('template', engine);\n    var instance = new Cls();\n    return instance.run(file, data.var, config);\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/rewrite_pathname.js":"'use strict';\n/**\n * rewrite pathname\n * @type {}\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {\n    var http = this.http;\n    var pathname = http.pathname;\n    if (!pathname || pathname === '/') {\n      return;\n    }\n    var prefix = http.config('pathname_prefix');\n    if (prefix && pathname.indexOf(prefix) === 0) {\n      pathname = pathname.substr(prefix.length);\n    }\n    var suffix = http.config('pathname_suffix');\n    if (suffix && pathname.substr(0 - suffix.length) === suffix) {\n      pathname = pathname.substr(0, pathname.length - suffix.length);\n    }\n    http.pathname = pathname;\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/service_off.js":"'use strict';\n/**\n * service off\n * @type {}\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {\n    if (!this.config('service_on')) {\n      var http = this.http;\n      http.error = new Error(think.locale('SERVICE_UNAVAILABLE'));\n      return think.statusAction(503, http);\n    }\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/subdomain_deploy.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _subdomain2 = require('./subdomain.js');\n\nvar _subdomain3 = _interopRequireDefault(_subdomain2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * subdomain deploy\n * @type {}\n */\nvar _class = function (_subdomain) {\n  (0, _inherits3.default)(_class, _subdomain);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _subdomain.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {Promise} []\n   */\n  _class.prototype.run = function run() {\n    think.log('`subdomain_deploy` middleware is deprecated, use `subdomain` instead', 'WARNING');\n    return _subdomain.prototype.run.call(this);\n  };\n\n  return _class;\n}(_subdomain3.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/subdomain.js":"'use strict';\n/**\n * subdomain\n * @type {}\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {\n    var subdomain = this.config('subdomain');\n    if (think.isEmpty(subdomain)) {\n      return;\n    }\n    var http = this.http;\n    var hostname = http.hostname.split('.')[0];\n    var value = subdomain[hostname];\n    if (!value) {\n      return;\n    }\n    http.pathname = value + '/' + http.pathname;\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/validate_payload.js":"'use strict';\n\n/**\n * validate post data\n * @type {}\n */\n\nexports.__esModule = true;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$middleware$bas) {\n  (0, _inherits3.default)(_class, _think$middleware$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$middleware$bas.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {\n    var http = this.http;\n    var post = http._post;\n    var length = (0, _keys2.default)(post).length;\n    if (length > think.config('post.max_fields')) {\n      http.res.statusCode = 400;\n      http.end();\n      return think.prevent();\n    }\n    var maxFilesSize = think.config('post.max_fields_size');\n    for (var name in post) {\n      if (post[name] && post[name].length > maxFilesSize) {\n        http.res.statusCode = 400;\n        http.end();\n        return think.prevent();\n      }\n    }\n  };\n\n  return _class;\n}(think.middleware.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/model/adv.js":"// 'use strict';\n\n// /**\n//  * adv model\n//  */\n// export default class extends think.model.base {\n\n// }\n\"use strict\";","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/model/_base.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _maxSafeInteger = require('babel-runtime/core-js/number/max-safe-integer');\n\nvar _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _think_validate = require('../core/think_validate.js');\n\nvar _think_validate2 = _interopRequireDefault(_think_validate);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar forceNewNum = 1;\n\n/**\n * base model class\n */\n\nvar _class = function (_think$base) {\n  (0, _inherits3.default)(_class, _think$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {} name   []\n   * @param  {} config []\n   * @return {}        []\n   */\n  _class.prototype.init = function init() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    var options = {\n      pk: 'id', //primary key\n      name: '', //model name\n      tablePrefix: undefined, //table prefix\n      tableName: '', //table name, without prefix\n      /**\n       * schema\n       * {\n       *   name: {\n       *     type: 'string',\n       *     required: true,\n       *     default: '',\n       *     unique: true,\n       *     primary: true,\n       *     auto_increment: true\n       *   }\n       * }\n       */\n      schema: {}, //table schema\n      /**\n       * table indexes\n       * {\n       *   name: {name: 1, $unique: true}, //single indexes\n       *   test1: {name1: 1, title1: 1, $unique: 1}, //compound indexes\n       * }\n       * @type {Object}\n       */\n      indexes: {}\n      //readonlyFields: []// readonly fields\n    };\n    //if is set in subclass, can't be override\n    for (var key in options) {\n      if (this[key] === undefined) {\n        this[key] = options[key];\n      }\n    }\n\n    if (think.isObject(name)) {\n      config = name;\n      name = '';\n    }\n\n    config = think.parseConfig(true, config);\n\n    //change property name `name`\n    if (config.name && !config.database) {\n      config.database = config.name;\n      delete config.name;\n      think.log('db.name is deprecated, use db.database instead', 'WARNING');\n    }\n\n    if (config.pwd && !config.password) {\n      config.password = config.pwd;\n      delete config.pwd;\n      think.log('db.pwd is deprecated, use db.password instead', 'WARNING');\n    }\n\n    //check property name `fields`\n    if (!think.isEmpty(this.fields)) {\n      this.schema = this.fields;\n      delete this.fields;\n      think.log('fields property is deprecated, use schema instead', 'WARNING');\n    }\n\n    this.config = config;\n    this._db = null;\n    this._data = {};\n    this._options = {};\n\n    //model name\n    if (name) {\n      this.name = name;\n    }\n    // get table prefix from config\n    if (this.config.prefix && this.tablePrefix === undefined) {\n      this.tablePrefix = this.config.prefix;\n    }\n  };\n  /**\n   * get model instance\n   * @param  {String} name    [model name]\n   * @param  {Object} options [options]\n   * @return {Object}         []\n   */\n\n\n  _class.prototype.model = function model(name, options, module) {\n    if (think.isString(options) && think.module.indexOf(options) > -1) {\n      module = options;\n      options = {};\n    }\n    module = module || this.parseModuleFromPath();\n    if (think.isString(options)) {\n      options = { type: options };\n    }\n    options = think.extend({}, this.config, options);\n    return think.model(name, options, module);\n  };\n  /**\n   * get table prefix\n   * @return {String} []\n   */\n\n\n  _class.prototype.getTablePrefix = function getTablePrefix() {\n    return this.tablePrefix || '';\n  };\n  /**\n   * get db instance\n   * @return {Object} []\n   */\n\n\n  _class.prototype.db = function db() {\n    var forceNew = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    // set db\n    if (think.isObject(forceNew)) {\n      this._db = forceNew;\n      return this;\n    }\n    if (this._db && !forceNew && !this.config.parser) {\n      return this._db;\n    }\n    var DB = think.adapter('db', this.config.type || 'mysql');\n    var config = this.config;\n    if (forceNewNum > _maxSafeInteger2.default - 1) {\n      forceNewNum = 1;\n    }\n    if (forceNew) {\n      config = think.extend({}, config, { forceNewNum: forceNewNum++ });\n    }\n    this._db = new DB(config);\n    return this._db;\n  };\n  /**\n   * get model name\n   * @return {String} []\n   */\n\n\n  _class.prototype.getModelName = function getModelName() {\n    if (this.name) {\n      return this.name;\n    }\n    var filename = this.__filename || __filename;\n    var last = filename.lastIndexOf(think.sep);\n    this.name = filename.substr(last + 1, filename.length - last - 4);\n    return this.name;\n  };\n  /**\n   * get table name\n   * @return {String} []\n   */\n\n\n  _class.prototype.getTableName = function getTableName() {\n    if (!this.tableName) {\n      this.tableName = this.getModelName();\n    }\n    return this.getTablePrefix() + this.tableName;\n  };\n  /**\n   * set cache options\n   * @param  {String} key     []\n   * @param  {Number} timeout []\n   * @return {}         []\n   */\n\n\n  _class.prototype.cache = function cache(key) {\n    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.config.cache.timeout;\n\n    if (key === undefined) {\n      return this;\n    }\n    var options = void 0;\n    if (!think.isObject(key)) {\n      if (think.isNumber(key)) {\n        timeout = key;\n        key = '';\n      }\n      options = think.extend({}, this.config.cache, { key: key, timeout: timeout });\n    } else {\n      options = key;\n    }\n    this._options.cache = options;\n    return this;\n  };\n  /**\n   * set limit options\n   * @param  {Number} offset []\n   * @param  {Number} length []\n   * @return {}        []\n   */\n\n\n  _class.prototype.limit = function limit(offset, length) {\n    if (offset === undefined) {\n      return this;\n    }\n    if (think.isArray(offset)) {\n      length = offset[1] || length;\n      offset = offset[0];\n    }\n    offset = Math.max(parseInt(offset) || 0, 0);\n    if (length) {\n      length = Math.max(parseInt(length) || 0, 0);\n    }\n    this._options.limit = [offset, length];\n    return this;\n  };\n  /**\n   * set page options\n   * @param  {Number} page     []\n   * @param  {} listRows []\n   * @return {}          []\n   */\n\n\n  _class.prototype.page = function page(_page) {\n    var listRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.config.nums_per_page;\n\n    if (_page === undefined) {\n      return this;\n    }\n    if (think.isArray(_page)) {\n      listRows = _page[1] || listRows;\n      _page = _page[0];\n    }\n    _page = Math.max(parseInt(_page) || 1, 1);\n    listRows = Math.max(parseInt(listRows) || 10, 1);\n    this._options.limit = [listRows * (_page - 1), listRows];\n    return this;\n  };\n  /**\n   * set where options\n   * @return {} []\n   */\n\n\n  _class.prototype.where = function where(_where) {\n    if (!_where) {\n      return this;\n    }\n    if (think.isString(_where)) {\n      _where = { _string: _where };\n    }\n    var options = this._options;\n    if (options.where && think.isString(options.where)) {\n      options.where = { _string: options.where };\n    }\n    options.where = think.extend({}, options.where, _where);\n    return this;\n  };\n  /**\n   * set field options\n   * @param  {String} field   []\n   * @param  {Boolean} reverse []\n   * @return {}         []\n   */\n\n\n  _class.prototype.field = function field(_field) {\n    var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!_field) {\n      return this;\n    }\n    if (think.isString(_field)) {\n      if (_field.indexOf(')') === -1) {\n        _field = _field.split(/\\s*,\\s*/);\n      }\n    }\n    this._options.field = _field;\n    this._options.fieldReverse = reverse;\n    return this;\n  };\n  /**\n   * set field reverse\n   * @param  {String} field [field list]\n   * @return {Object}       []\n   */\n\n\n  _class.prototype.fieldReverse = function fieldReverse(field) {\n    return this.field(field, true);\n  };\n  /**\n   * set table name\n   * @param  {String} table []\n   * @return {}       []\n   */\n\n\n  _class.prototype.table = function table(_table, hasPrefix) {\n    if (!_table) {\n      return this;\n    }\n    _table = _table.trim();\n    //table is sql, `SELECT * FROM`\n    if (_table.indexOf(' ') > -1) {\n      hasPrefix = true;\n    }\n    this._options.table = hasPrefix ? _table : this.getTablePrefix() + _table;\n    return this;\n  };\n  /**\n   * union options\n   * @param  {} union []\n   * @param  {} all   []\n   * @return {}       []\n   */\n\n\n  _class.prototype.union = function union(_union) {\n    var all = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (!_union) {\n      return this;\n    }\n    if (!this._options.union) {\n      this._options.union = [];\n    }\n    this._options.union.push({\n      union: _union,\n      all: all\n    });\n    return this;\n  };\n  /**\n   * .join({\n   *   'xxx': {\n   *     join: 'left',\n   *     as: 'c',\n   *     on: ['id', 'cid']\n   *   }\n   * })\n   * @param  {[type]} join [description]\n   * @return {[type]}      [description]\n   */\n\n\n  _class.prototype.join = function join(_join) {\n    if (!_join) {\n      return this;\n    }\n    if (!this._options.join) {\n      this._options.join = [];\n    }\n    if (think.isArray(_join)) {\n      this._options.join = this._options.join.concat(_join);\n    } else {\n      this._options.join.push(_join);\n    }\n    return this;\n  };\n  /**\n   * set order options\n   * @param  {String} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.order = function order(value) {\n    this._options.order = value;\n    return this;\n  };\n  /**\n   * set table alias\n   * @param  {String} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.alias = function alias(value) {\n    this._options.alias = value;\n    return this;\n  };\n  /**\n   * set having options\n   * @param  {String} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.having = function having(value) {\n    this._options.having = value;\n    return this;\n  };\n  /**\n   * set group options\n   * @param  {String} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.group = function group(value) {\n    this._options.group = value;\n    return this;\n  };\n  /**\n   * set lock options\n   * @param  {String} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.lock = function lock(value) {\n    this._options.lock = value;\n    return this;\n  };\n  /**\n   * set auto options\n   * @param  {String} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.auto = function auto(value) {\n    this._options.auto = value;\n    return this;\n  };\n  /**\n   * set filter options\n   * @param  {String} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.filter = function filter(value) {\n    this._options.filter = value;\n    return this;\n  };\n  /**\n   * set distinct options\n   * @param  {String} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.distinct = function distinct(data) {\n    this._options.distinct = data;\n    if (think.isString(data)) {\n      this._options.field = data;\n    }\n    return this;\n  };\n  /**\n   * set explain\n   * @param  {Boolean} explain []\n   * @return {}         []\n   */\n\n\n  _class.prototype.explain = function explain(_explain) {\n    this._options.explain = _explain;\n    return this;\n  };\n  /**\n   * options filter\n   * @param  {Object} options []\n   * @return {}         []\n   */\n\n\n  _class.prototype.optionsFilter = function optionsFilter(options) {\n    return options;\n  };\n  /**\n   * data filter\n   * @param  {Object} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.dataFilter = function dataFilter(data) {\n    return data;\n  };\n  /**\n   * before add\n   * @param  {Object} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.beforeAdd = function beforeAdd(data, options, schema) {\n    var _this2 = this;\n\n    //for addMany invoked\n    if (think.isArray(data)) {\n      return data.map(function (item) {\n        return _this2.beforeAdd(item, options);\n      });\n    }\n\n    var ret = {};\n    var extRet = {};\n    schema = schema || this.schema;\n    //fields in schema\n    for (var field in schema) {\n      var fieldSchema = schema[field];\n      var _default = fieldSchema.default;\n      //default value is setted\n      if (!think.isTrueEmpty(_default)) {\n        ret[field] = {\n          value: data[field],\n          default: _default\n        };\n      } else {\n        if (this._isSubSchema(fieldSchema)) {\n          extRet[field] = this.beforeAdd(data[field] || {}, options, fieldSchema);\n        }\n      }\n    }\n    for (var _field2 in data) {\n      if (!ret[_field2] && !extRet[_field2]) {\n        ret[_field2] = {\n          value: data[_field2]\n        };\n      }\n    }\n    ret = _think_validate2.default.values(ret);\n    if (!think.isEmpty(extRet)) {\n      ret = think.extend(ret, extRet);\n    }\n    return ret;\n  };\n  /**\n   * check is sub schema\n    // meta: {\n    //   createAt: {\n    //     default: ()=>new Date()\n    //   },\n    //   updateAt: {\n    //     default: ()=>new Date()\n    //   }\n    // }\n   * @param  {Mixed}  schema []\n   * @return {Boolean}        []\n   */\n\n\n  _class.prototype._isSubSchema = function _isSubSchema(schema) {\n    if (!schema || !think.isObject(schema)) {\n      return false;\n    }\n    var keys = (0, _keys2.default)(schema);\n    return keys.length && keys.every(function (key) {\n      return think.isObject(schema[key]);\n    });\n  };\n  /**\n   * after add\n   * @param  {} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.afterAdd = function afterAdd(data) {\n    return data;\n  };\n  /**\n   * before delete\n   */\n\n\n  _class.prototype.beforeDelete = function beforeDelete(options) {\n    return options;\n  };\n  /**\n   * after delete\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.afterDelete = function afterDelete(data) {\n    return data;\n  };\n  /**\n   * before update\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.beforeUpdate = function beforeUpdate(data, options, schema) {\n    var _this3 = this;\n\n    //check property readonlyFields\n    if (!think.isEmpty(this.readonlyFields)) {\n      (function () {\n        var ret = {};\n        _this3.readonlyFields.forEach(function (item) {\n          ret[item] = { readonly: true };\n        });\n        delete _this3.readonlyFields;\n        _this3.schema = think.extend(ret, _this3.schema);\n        think.log('readonlyFields property is deprecated, use schema[field].readonly instead', 'WARNING');\n      })();\n    }\n\n    var ret = {};\n    var extRet = {};\n    schema = schema || this.schema;\n\n    for (var field in data) {\n      var fieldSchema = schema[field];\n      if (!fieldSchema) {\n        ret[field] = { value: data[field] };\n      } else {\n        if (this._isSubSchema(fieldSchema)) {\n          var result = this.beforeUpdate(data[field] || {}, options, fieldSchema);\n          if (!think.isEmpty(result)) {\n            extRet[field] = result;\n          }\n        } else if (!fieldSchema.readonly) {\n          ret[field] = { value: data[field] };\n        }\n      }\n    }\n\n    for (var _field3 in schema) {\n      var _fieldSchema = schema[_field3];\n      var _default = _fieldSchema.default;\n      if (!think.isTrueEmpty(_default) && !_fieldSchema.readonly && _fieldSchema.update) {\n        ret[_field3] = {\n          value: data[_field3],\n          default: _default\n        };\n      } else if (this._isSubSchema(_fieldSchema)) {\n        var _result = this.beforeUpdate(data[_field3] || {}, options, _fieldSchema);\n        if (!think.isEmpty(_result)) {\n          extRet[_field3] = _result;\n        }\n      }\n    }\n    ret = _think_validate2.default.values(ret);\n    if (!think.isEmpty(extRet)) {\n      ret = think.extend(ret, extRet);\n    }\n    return ret;\n  };\n  /**\n   * after update\n   * @param  {} data    []\n   * @param  {} options []\n   * @return {}         []\n   */\n\n\n  _class.prototype.afterUpdate = function afterUpdate(data) {\n    return data;\n  };\n  /**\n   * before find\n   */\n\n\n  _class.prototype.beforeFind = function beforeFind(options) {\n    return options;\n  };\n  /**\n   * after find\n   * @return {} []\n   */\n\n\n  _class.prototype.afterFind = function afterFind(data) {\n    return data;\n  };\n  /**\n   * before select\n   */\n\n\n  _class.prototype.beforeSelect = function beforeSelect(options) {\n    return options;\n  };\n  /**\n   * after select\n   * @param  {Mixed} result []\n   * @return {}        []\n   */\n\n\n  _class.prototype.afterSelect = function afterSelect(data) {\n    return data;\n  };\n  /**\n   * set data\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.data = function data(_data) {\n    if (_data === true) {\n      return this._data;\n    }\n    this._data = _data;\n    return this;\n  };\n  /**\n   * set options\n   * @param  {Mixed} options []\n   * @return {}         []\n   */\n\n\n  _class.prototype.options = function options(_options) {\n    if (!_options) {\n      return this._options;\n    }\n    this._options = _options;\n    //page to limit\n    if (_options.page) {\n      this.page(_options.page);\n    }\n    return this;\n  };\n  /**\n   * close db socket\n   * @return {} []\n   */\n\n\n  _class.prototype.close = function close() {\n    if (this._db) {\n      this._db.close();\n      this._db = null;\n    }\n  };\n\n  return _class;\n}(think.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/model/mongo.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./_base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * mongodb model\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * get primary key\n   * @return {Promise} []\n   */\n  _class.prototype.getPk = function getPk() {\n    this.pk = '_id';\n    return _promise2.default.resolve(this.pk);\n  };\n  /**\n   * create index from this.indexes\n   * http://docs.mongodb.org/manual/core/indexes-introduction/\n   * @return {Promise} []\n   */\n\n\n  _class.prototype._createIndexes = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var storeKey, isSet, indexes;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              storeKey = 'mongo_' + this.getTableName() + '_indexes';\n              isSet = thinkCache(thinkCache.TABLE, storeKey);\n\n              if (!isSet) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt('return');\n\n            case 4:\n              indexes = this.indexes;\n\n              if (!think.isEmpty(indexes)) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt('return');\n\n            case 7:\n              return _context.abrupt('return', think.await(storeKey, function () {\n                var promises = [];\n                for (var key in indexes) {\n                  var value = indexes[key];\n                  if (think.isObject(value)) {\n                    var options = {};\n                    var val = {};\n                    for (var k in value) {\n                      //key start with $ is options\n                      if (k[0] === '$') {\n                        options[k.slice(1)] = value[k];\n                      } else {\n                        val[k] = value[k];\n                      }\n                    }\n                    //if value is empty, auto add key itself\n                    if (think.isEmpty(val)) {\n                      val[key] = 1;\n                    }\n                    promises.push(_this2.createIndex(val, options));\n                  } else {\n                    var _value;\n\n                    value = (_value = {}, _value[key] = value, _value);\n                    promises.push(_this2.createIndex(value));\n                  }\n                }\n                return _promise2.default.all(promises).then(function () {\n                  thinkCache(thinkCache.TABLE, storeKey, 1);\n                });\n              }));\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function _createIndexes() {\n      return _ref.apply(this, arguments);\n    }\n\n    return _createIndexes;\n  }();\n  /**\n   * parse options\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.parseOptions = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(oriOpts, extraOptions) {\n      var options;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = think.extend({}, this._options);\n\n              if (think.isObject(oriOpts)) {\n                options = think.extend(options, oriOpts, extraOptions);\n              }\n              //clear options\n              this._options = {};\n              //get table name\n              options.table = options.table || this.getTableName();\n\n              options.tablePrefix = this.tablePrefix;\n              options.model = this.getModelName();\n\n              if (!think.isObject(oriOpts)) {\n                options = think.extend(options, oriOpts, extraOptions);\n              }\n\n              _context2.next = 9;\n              return this._createIndexes();\n\n            case 9:\n              return _context2.abrupt('return', this.optionsFilter(options));\n\n            case 10:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function parseOptions(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return parseOptions;\n  }();\n  /**\n   * parse data\n   * @param  {Object} data []\n   * @return {Object}      []\n   */\n\n\n  _class.prototype.parseData = function parseData(data) {\n    return data;\n  };\n  /**\n   * get table connection\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.collection = function collection(table) {\n    table = table || this.getTableName();\n    return this.db().collection(table);\n  };\n  /**\n   * add data\n   * @param {Object} data    []\n   * @param {Object} options []\n   */\n\n\n  _class.prototype.add = function () {\n    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(data, options) {\n      var msg;\n      return _regenerator2.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              //copy data\n              data = think.extend({}, this._data, data);\n              //clear data\n              this._data = {};\n\n              if (!think.isEmpty(data)) {\n                _context3.next = 5;\n                break;\n              }\n\n              msg = new Error(think.locale('DATA_EMPTY'));\n              return _context3.abrupt('return', think.reject(msg));\n\n            case 5:\n              _context3.next = 7;\n              return this.parseOptions(options);\n\n            case 7:\n              options = _context3.sent;\n              _context3.next = 10;\n              return this.beforeAdd(data, options);\n\n            case 10:\n              data = _context3.sent;\n\n              data = this.parseData(data);\n              _context3.next = 14;\n              return this.db().add(data, options);\n\n            case 14:\n              _context3.next = 16;\n              return this.afterAdd(data, options);\n\n            case 16:\n              return _context3.abrupt('return', this.db().getLastInsertId());\n\n            case 17:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function add(_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return add;\n  }();\n  /**\n  * then add\n  * @param  {Object} data       []\n  * @param  {Object} where      []\n  * @return {}            []\n  */\n\n\n  _class.prototype.thenAdd = function () {\n    var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(data, where) {\n      var _ref6;\n\n      var findData, _ref5, insertId;\n\n      return _regenerator2.default.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.where(where).find();\n\n            case 2:\n              findData = _context4.sent;\n\n              if (think.isEmpty(findData)) {\n                _context4.next = 5;\n                break;\n              }\n\n              return _context4.abrupt('return', (_ref5 = {}, _ref5[this.pk] = findData[this.pk], _ref5.type = 'exist', _ref5));\n\n            case 5:\n              _context4.next = 7;\n              return this.add(data);\n\n            case 7:\n              insertId = _context4.sent;\n              return _context4.abrupt('return', (_ref6 = {}, _ref6[this.pk] = insertId, _ref6.type = 'add', _ref6));\n\n            case 9:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function thenAdd(_x5, _x6) {\n      return _ref4.apply(this, arguments);\n    }\n\n    return thenAdd;\n  }();\n  /**\n   * update data when exist, otherwise add data\n   * @return {id}\n   */\n\n\n  _class.prototype.thenUpdate = function () {\n    var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(data, where) {\n      var findData;\n      return _regenerator2.default.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.where(where).find();\n\n            case 2:\n              findData = _context5.sent;\n\n              if (!think.isEmpty(findData)) {\n                _context5.next = 5;\n                break;\n              }\n\n              return _context5.abrupt('return', this.add(data));\n\n            case 5:\n              _context5.next = 7;\n              return this.where(where).update(data);\n\n            case 7:\n              return _context5.abrupt('return', findData[this.pk]);\n\n            case 8:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function thenUpdate(_x7, _x8) {\n      return _ref7.apply(this, arguments);\n    }\n\n    return thenUpdate;\n  }();\n  /**\n   * add multi data\n   * @param {Object} data    []\n   * @param {} options []\n   * @param {} replace []\n   */\n\n\n  _class.prototype.addMany = function () {\n    var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(data, options) {\n      var err;\n      return _regenerator2.default.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(!think.isArray(data) || !think.isObject(data[0]))) {\n                _context6.next = 3;\n                break;\n              }\n\n              err = new Error(think.locale('DATA_MUST_BE_ARRAY'));\n              return _context6.abrupt('return', think.reject(err));\n\n            case 3:\n              _context6.next = 5;\n              return this.parseOptions(options);\n\n            case 5:\n              options = _context6.sent;\n              _context6.next = 8;\n              return this.beforeAdd(data, options);\n\n            case 8:\n              data = _context6.sent;\n              _context6.next = 11;\n              return this.db().addMany(data, options);\n\n            case 11:\n              _context6.next = 13;\n              return this.afterAdd(data, options);\n\n            case 13:\n              return _context6.abrupt('return', this.db().getLastInsertId());\n\n            case 14:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function addMany(_x9, _x10) {\n      return _ref8.apply(this, arguments);\n    }\n\n    return addMany;\n  }();\n  /**\n   * delete data\n   * @return {} []\n   */\n\n\n  _class.prototype.delete = function () {\n    var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(options) {\n      var data;\n      return _regenerator2.default.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.parseOptions(options);\n\n            case 2:\n              options = _context7.sent;\n              _context7.next = 5;\n              return this.beforeDelete(options);\n\n            case 5:\n              options = _context7.sent;\n              _context7.next = 8;\n              return this.db().delete(options);\n\n            case 8:\n              data = _context7.sent;\n              _context7.next = 11;\n              return this.afterDelete(options);\n\n            case 11:\n              return _context7.abrupt('return', data.result.n || 0);\n\n            case 12:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function _delete(_x11) {\n      return _ref9.apply(this, arguments);\n    }\n\n    return _delete;\n  }();\n  /**\n   * update data\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.update = function () {\n    var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(data, options, ignoreDefault) {\n      var pk, _where, result;\n\n      return _regenerator2.default.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (think.isBoolean(options)) {\n                ignoreDefault = options;\n                options = {};\n              }\n              _context8.next = 3;\n              return this.parseOptions(options);\n\n            case 3:\n              options = _context8.sent;\n              _context8.next = 6;\n              return this.getPk();\n\n            case 6:\n              pk = _context8.sent;\n\n              if (data[pk]) {\n                this.where((_where = {}, _where[pk] = data[pk], _where));\n                delete data[pk];\n              }\n\n              if (!(ignoreDefault !== true)) {\n                _context8.next = 12;\n                break;\n              }\n\n              _context8.next = 11;\n              return this.beforeUpdate(data, options);\n\n            case 11:\n              data = _context8.sent;\n\n            case 12:\n              _context8.next = 14;\n              return this.db().update(data, options);\n\n            case 14:\n              result = _context8.sent;\n              _context8.next = 17;\n              return this.afterUpdate(data, options);\n\n            case 17:\n              return _context8.abrupt('return', result.result.nModified || 0);\n\n            case 18:\n            case 'end':\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function update(_x12, _x13, _x14) {\n      return _ref10.apply(this, arguments);\n    }\n\n    return update;\n  }();\n  /**\n   * update many data\n   * @param  {Promise} dataList []\n   * @return {Promise}          []\n   */\n\n\n  _class.prototype.updateMany = function () {\n    var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(dataList, options) {\n      var _this3 = this;\n\n      var promises;\n      return _regenerator2.default.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (think.isArray(dataList)) {\n                _context9.next = 2;\n                break;\n              }\n\n              return _context9.abrupt('return', think.reject(new Error(think.locale('DATA_MUST_BE_ARRAY'))));\n\n            case 2:\n              promises = dataList.map(function (data) {\n                return _this3.update(data, options);\n              });\n              return _context9.abrupt('return', _promise2.default.all(promises).then(function (data) {\n                return data.reduce(function (a, b) {\n                  return a + b;\n                });\n              }));\n\n            case 4:\n            case 'end':\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function updateMany(_x15, _x16) {\n      return _ref11.apply(this, arguments);\n    }\n\n    return updateMany;\n  }();\n  /**\n   * select data\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.select = function () {\n    var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(options) {\n      var data;\n      return _regenerator2.default.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.parseOptions(options);\n\n            case 2:\n              options = _context10.sent;\n              _context10.next = 5;\n              return this.beforeSelect(options);\n\n            case 5:\n              options = _context10.sent;\n              _context10.next = 8;\n              return this.db().select(options);\n\n            case 8:\n              data = _context10.sent;\n              return _context10.abrupt('return', this.afterSelect(data, options));\n\n            case 10:\n            case 'end':\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function select(_x17) {\n      return _ref12.apply(this, arguments);\n    }\n\n    return select;\n  }();\n  /**\n   * count select\n   * @param  {Object} options  []\n   * @param  {Boolean} pageFlag []\n   * @return {Promise}          []\n   */\n\n\n  _class.prototype.countSelect = function () {\n    var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(options, pageFlag) {\n      var count, numsPerPage, data, totalPage, result;\n      return _regenerator2.default.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              count = void 0;\n\n              if (think.isBoolean(options)) {\n                pageFlag = options;\n                options = {};\n              } else if (think.isNumber(options)) {\n                count = options;\n                options = {};\n              }\n\n              _context11.next = 4;\n              return this.parseOptions(options);\n\n            case 4:\n              options = _context11.sent;\n\n              if (count) {\n                _context11.next = 9;\n                break;\n              }\n\n              _context11.next = 8;\n              return this.options(options).count();\n\n            case 8:\n              count = _context11.sent;\n\n            case 9:\n\n              options.limit = options.limit || [0, this.config.nums_per_page];\n\n              numsPerPage = options.limit[1];\n              //get page options\n\n              data = { numsPerPage: numsPerPage };\n\n              data.currentPage = parseInt(options.limit[0] / options.limit[1] + 1);\n              totalPage = Math.ceil(count / data.numsPerPage);\n\n              if (think.isBoolean(pageFlag) && data.currentPage > totalPage) {\n                if (pageFlag) {\n                  data.currentPage = 1;\n                  options.limit = [0, numsPerPage];\n                } else {\n                  data.currentPage = totalPage;\n                  options.limit = [(totalPage - 1) * numsPerPage, numsPerPage];\n                }\n              }\n              result = think.extend({ count: count, totalPages: totalPage }, data);\n\n              if (!count) {\n                _context11.next = 22;\n                break;\n              }\n\n              _context11.next = 19;\n              return this.select(options);\n\n            case 19:\n              _context11.t0 = _context11.sent;\n              _context11.next = 23;\n              break;\n\n            case 22:\n              _context11.t0 = [];\n\n            case 23:\n              result.data = _context11.t0;\n              return _context11.abrupt('return', result);\n\n            case 25:\n            case 'end':\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function countSelect(_x18, _x19) {\n      return _ref13.apply(this, arguments);\n    }\n\n    return countSelect;\n  }();\n  /**\n   * select one row data\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.find = function () {\n    var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12(options) {\n      var data;\n      return _regenerator2.default.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.parseOptions(options, { limit: 1 });\n\n            case 2:\n              options = _context12.sent;\n              _context12.next = 5;\n              return this.beforeFind(options);\n\n            case 5:\n              options = _context12.sent;\n              _context12.next = 8;\n              return this.db().select(options);\n\n            case 8:\n              data = _context12.sent;\n              return _context12.abrupt('return', this.afterFind(data[0] || {}, options));\n\n            case 10:\n            case 'end':\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function find(_x20) {\n      return _ref14.apply(this, arguments);\n    }\n\n    return find;\n  }();\n  /**\n   * increment field data\n   * @param  {String} field []\n   * @param  {Number} step  []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.increment = function () {\n    var _ref15 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(field) {\n      var _$inc;\n\n      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var options;\n      return _regenerator2.default.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.parseOptions();\n\n            case 2:\n              options = _context13.sent;\n              return _context13.abrupt('return', this.db().update({\n                $inc: (_$inc = {}, _$inc[field] = step, _$inc)\n              }, options).then(function (data) {\n                return data.result.n;\n              }));\n\n            case 4:\n            case 'end':\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function increment(_x21, _x22) {\n      return _ref15.apply(this, arguments);\n    }\n\n    return increment;\n  }();\n  /**\n   * decrement field data\n   * @param  {String} field []\n   * @param  {Number} step  []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.decrement = function () {\n    var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(field) {\n      var _$inc2;\n\n      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var options;\n      return _regenerator2.default.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.parseOptions();\n\n            case 2:\n              options = _context14.sent;\n              return _context14.abrupt('return', this.db().update({\n                $inc: (_$inc2 = {}, _$inc2[field] = 0 - step, _$inc2)\n              }, options).then(function (data) {\n                return data.result.n;\n              }));\n\n            case 4:\n            case 'end':\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function decrement(_x24, _x25) {\n      return _ref16.apply(this, arguments);\n    }\n\n    return decrement;\n  }();\n  /**\n   * get count \n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.count = function () {\n    var _ref17 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15(field) {\n      var options;\n      return _regenerator2.default.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              this.field(field);\n              _context15.next = 3;\n              return this.parseOptions();\n\n            case 3:\n              options = _context15.sent;\n              return _context15.abrupt('return', this.db().count(options));\n\n            case 5:\n            case 'end':\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function count(_x27) {\n      return _ref17.apply(this, arguments);\n    }\n\n    return count;\n  }();\n  /**\n   * get sum\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.sum = function () {\n    var _ref18 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16(field) {\n      var options;\n      return _regenerator2.default.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              this.field(field);\n              _context16.next = 3;\n              return this.parseOptions();\n\n            case 3:\n              options = _context16.sent;\n              return _context16.abrupt('return', this.db().sum(options));\n\n            case 5:\n            case 'end':\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function sum(_x28) {\n      return _ref18.apply(this, arguments);\n    }\n\n    return sum;\n  }();\n  /**\n   * aggregate\n   * http://docs.mongodb.org/manual/reference/sql-aggregation-comparison/\n   * @param  {} options []\n   * @return {}         []\n   */\n\n\n  _class.prototype.aggregate = function aggregate(options) {\n    return this.db().aggregate(this.getTableName(), options);\n  };\n  /**\n   * map reduce\n   * Examples: http://docs.mongodb.org/manual/tutorial/map-reduce-examples/\n   * @param  {Function} map    []\n   * @param  {Function} reduce []\n   * @param  {Object} out    []\n   * @return {Promise}        []\n   */\n\n\n  _class.prototype.mapReduce = function mapReduce(map, reduce, out) {\n    return this.collection().then(function (collection) {\n      return collection.mapReduce(map, reduce, out);\n    });\n  };\n  /**\n   * create indexes\n   * @param  {Object} indexes []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.createIndex = function createIndex(indexes, options) {\n    return this.db().ensureIndex(this.getTableName(), indexes, options);\n  };\n  /**\n   * get collection indexes\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getIndexes = function getIndexes() {\n    return this.collection().then(function (collection) {\n      return collection.indexes();\n    });\n  };\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/model/relation.js":"'use strict';\n\n//model relation type\n\nexports.__esModule = true;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nthink.model.HAS_ONE = 1;\nthink.model.BELONG_TO = 2;\nthink.model.HAS_MANY = 3;\nthink.model.MANY_TO_MANY = 4;\n/**\n * relation model\n * @type {Class}\n */\n\nvar _class = function (_think$model$base) {\n  (0, _inherits3.default)(_class, _think$model$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$model$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {String} name   []\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.init = function init() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _think$model$base.prototype.init.call(this, name, config);\n    /**\n     * @example\n     'profile': {\n        type: think.model.HAS_ONE, //relation type\n        model: 'profile', //model name\n        name: 'profile', //data name\n        key: 'id', \n        fKey: 'user_id', //forign key\n        field: 'id,name',\n        where: 'name=xx',\n        order: '',\n        limit: ''\n      }\n     */\n    if (this.relation === undefined) {\n      this.relation = {};\n    }\n    this._relationName = true;\n  };\n  /**\n   * set relation\n   * @param {String} name []\n   */\n\n\n  _class.prototype.setRelation = function setRelation(name, value) {\n    //ignore undefined name\n    if (name === undefined) {\n      return this;\n    }\n\n    //config relation data\n    if (think.isObject(name) || !think.isEmpty(value)) {\n      var _ref;\n\n      var obj = think.isObject(name) ? name : (_ref = {}, _ref[name] = value, _ref);\n      think.extend(this.relation, obj);\n      return this;\n    }\n\n    if (think.isBoolean(name)) {\n      this._relationName = name;\n      return this;\n    }\n\n    //enable relation\n    if (think.isString(name)) {\n      name = name.split(/\\s*,\\s*/);\n    }\n\n    name = name || [];\n    //filter relation name\n    if (value === false) {\n      var filterRelations = (0, _keys2.default)(this.relation).filter(function (item) {\n        return name.indexOf(item) === -1;\n      });\n      name = filterRelations;\n    }\n\n    this._relationName = name;\n    return this;\n  };\n  /**\n   * after find\n   * @param  {Object} data []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.afterFind = function afterFind(data, options) {\n    return this.getRelation(data, options);\n  };\n  /**\n   * after select\n   * @param  {Object} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.afterSelect = function afterSelect(data, options) {\n    return this.getRelation(data, options);\n  };\n  /**\n   * get relation data\n   * @param  {}  data       []\n   * @param  Boolean isDataList \n   * @return {}\n   */\n\n\n  _class.prototype.getRelation = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(data) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var pk, promises;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(think.isEmpty(data) || think.isEmpty(this.relation) || think.isEmpty(this._relationName))) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return', data);\n\n            case 2:\n              _context.next = 4;\n              return this.getPk();\n\n            case 4:\n              pk = _context.sent;\n              promises = (0, _keys2.default)(this.relation).map(function (key) {\n                //relation is disabled\n                if (_this2._relationName !== true && _this2._relationName.indexOf(key) === -1) {\n                  return;\n                }\n                var item = _this2.relation[key];\n                if (!think.isObject(item)) {\n                  item = { type: item };\n                }\n                //get relation model options\n                var opts = think.extend({\n                  name: key,\n                  type: think.model.HAS_ONE,\n                  key: pk,\n                  fKey: _this2.name + '_id',\n                  relation: true\n                }, item);\n\n                //relation data is exist\n                var itemData = think.isArray(data) ? data[0] : data;\n                var relData = itemData[opts.name];\n                if (think.isArray(relData) || think.isObject(relData)) {\n                  return;\n                }\n\n                var modelOpts = think.extend({}, {\n                  cache: options.cache\n                });\n                //remove cache key\n                if (modelOpts.cache && modelOpts.cache.key) {\n                  delete modelOpts.cache.key;\n                }\n\n                ['where', 'field', 'order', 'limit', 'page'].forEach(function (optItem) {\n                  if (think.isFunction(item[optItem])) {\n                    modelOpts[optItem] = item[optItem](_this2);\n                  } else {\n                    modelOpts[optItem] = item[optItem];\n                  }\n                });\n                //get relation model instance\n                var model = _this2.model(item.model || key).options(modelOpts);\n\n                //set relation to relate model\n                if (model.setRelation) {\n                  model.setRelation(opts.relation, false);\n                }\n\n                opts.model = model;\n\n                switch (item.type) {\n                  case think.model.BELONG_TO:\n                    // if(item.model) {\n                    //   delete item.model;\n                    // }\n                    opts = think.extend(opts, {\n                      key: opts.model.getModelName() + '_id',\n                      fKey: 'id'\n                    }, item);\n                    opts.model = model; //get ref back\n                    return _this2._getBelongsToRelation(data, opts, options);\n                  case think.model.HAS_MANY:\n                    return _this2._getHasManyRelation(data, opts, options);\n                  case think.model.MANY_TO_MANY:\n                    return _this2._getManyToManyRelation(data, opts, options);\n                  default:\n                    return _this2._getHasOneRelation(data, opts, options);\n                }\n              });\n              _context.next = 8;\n              return _promise2.default.all(promises);\n\n            case 8:\n              return _context.abrupt('return', data);\n\n            case 9:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getRelation(_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return getRelation;\n  }();\n  /**\n   * has one\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype._getHasOneRelation = function () {\n    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(data, mapOpts /*, options*/) {\n      var where, mapData;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              where = this.parseRelationWhere(data, mapOpts);\n              // if (where === false) {\n              //   return {};\n              // }\n\n              _context2.next = 3;\n              return mapOpts.model.where(where).select();\n\n            case 3:\n              mapData = _context2.sent;\n              return _context2.abrupt('return', this.parseRelationData(data, mapData, mapOpts));\n\n            case 5:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function _getHasOneRelation(_x6, _x7) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return _getHasOneRelation;\n  }();\n  /**\n   * belongs to\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype._getBelongsToRelation = function () {\n    var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(data, mapOpts /*, options*/) {\n      var where, mapData;\n      return _regenerator2.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              where = this.parseRelationWhere(data, mapOpts);\n              _context3.next = 3;\n              return mapOpts.model.where(where).select();\n\n            case 3:\n              mapData = _context3.sent;\n              return _context3.abrupt('return', this.parseRelationData(data, mapData, mapOpts));\n\n            case 5:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function _getBelongsToRelation(_x8, _x9) {\n      return _ref4.apply(this, arguments);\n    }\n\n    return _getBelongsToRelation;\n  }();\n  /**\n   * has many\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype._getHasManyRelation = function () {\n    var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(data, mapOpts /*, options*/) {\n      var where, mapData;\n      return _regenerator2.default.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              where = this.parseRelationWhere(data, mapOpts);\n              // if (where === false) {\n              //   return [];\n              // }\n\n              _context4.next = 3;\n              return mapOpts.model.where(where).select();\n\n            case 3:\n              mapData = _context4.sent;\n              return _context4.abrupt('return', this.parseRelationData(data, mapData, mapOpts, true));\n\n            case 5:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function _getHasManyRelation(_x10, _x11) {\n      return _ref5.apply(this, arguments);\n    }\n\n    return _getHasManyRelation;\n  }();\n  /**\n   * many to many\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype._getManyToManyRelation = function () {\n    var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(data, mapOpts, options) {\n      var where, sql, field, pk, table, table1, where1, rkey, where2, mapData;\n      return _regenerator2.default.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              where = this.parseRelationWhere(data, mapOpts);\n              sql = 'SELECT %s, a.%s FROM %s as a, %s as b %s AND a.%s=b.%s %s';\n              field = this.db().parseField(mapOpts.field).split(',').map(function (item) {\n                return 'b.' + item;\n              }).join(',');\n              _context5.next = 5;\n              return mapOpts.model.getPk();\n\n            case 5:\n              pk = _context5.sent;\n              table = mapOpts.rModel;\n\n              if (table) {\n                if (this.tablePrefix && table.indexOf(this.tablePrefix) !== 0) {\n                  table = this.tablePrefix + table;\n                }\n              } else {\n                table = this.getRelationTableName(mapOpts.model);\n              }\n\n              table1 = mapOpts.model.getTableName();\n              where1 = this.db().parseWhere(where);\n              rkey = mapOpts.rfKey || mapOpts.model.getModelName() + '_id';\n              where2 = mapOpts.where ? ' AND ' + this.db().parseWhere(mapOpts.where).trim().slice(6) : '';\n\n              sql = this.parseSql(sql, field, mapOpts.fKey, table, table1, where1, rkey, pk, where2);\n              _context5.next = 15;\n              return this.db().select(sql, options.cache);\n\n            case 15:\n              mapData = _context5.sent;\n              return _context5.abrupt('return', this.parseRelationData(data, mapData, mapOpts, true));\n\n            case 17:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function _getManyToManyRelation(_x12, _x13, _x14) {\n      return _ref6.apply(this, arguments);\n    }\n\n    return _getManyToManyRelation;\n  }();\n  /**\n   * get relation table name\n   * @param  {Object} model []\n   * @return {}       []\n   */\n\n\n  _class.prototype.getRelationTableName = function getRelationTableName(model) {\n    var table = [this.tablePrefix, this.tableName || this.name, '_', model.getModelName()].join('');\n    return table.toLowerCase();\n  };\n  /**\n   * get relation model\n   * @param  {} model []\n   * @return {}       []\n   */\n\n\n  _class.prototype.getRelationModel = function getRelationModel(model) {\n    var name = (this.tableName || this.name) + '_' + model.getModelName();\n    return this.model(name);\n  };\n  /**\n   * parese relation where\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {}         []\n   */\n\n\n  _class.prototype.parseRelationWhere = function parseRelationWhere(data, mapOpts) {\n    var _ref7;\n\n    if (think.isArray(data)) {\n      var _ret = function () {\n        var _v;\n\n        var keys = {};\n        data.forEach(function (item) {\n          keys[item[mapOpts.key]] = 1;\n        });\n        var value = (0, _keys2.default)(keys);\n        return {\n          v: (_v = {}, _v[mapOpts.fKey] = ['IN', value], _v)\n        };\n      }();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === \"object\") return _ret.v;\n    }\n    return _ref7 = {}, _ref7[mapOpts.fKey] = data[mapOpts.key], _ref7;\n  };\n  /**\n   * parse relation data\n   * @param  {Object}  data     []\n   * @param  {}  mapData  []\n   * @param  {}  mapOpts  []\n   * @param  {Boolean} isArrMap []\n   * @return {}           []\n   */\n\n\n  _class.prototype.parseRelationData = function parseRelationData(data, mapData, mapOpts, isArrMap) {\n    if (think.isArray(data)) {\n      if (isArrMap) {\n        data.forEach(function (item, i) {\n          data[i][mapOpts.name] = [];\n        });\n      }\n      mapData.forEach(function (mapItem) {\n        data.forEach(function (item, i) {\n          if (mapItem[mapOpts.fKey] !== item[mapOpts.key]) {\n            return;\n          }\n          if (isArrMap) {\n            data[i][mapOpts.name].push(mapItem);\n          } else {\n            data[i][mapOpts.name] = mapItem;\n          }\n        });\n      });\n    } else {\n      data[mapOpts.name] = isArrMap ? mapData : mapData[0] || {};\n    }\n    return data;\n  };\n  /**\n   * after add\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n\n\n  _class.prototype.afterAdd = function afterAdd(data, options) {\n    return this.postRelation('ADD', data, options);\n  };\n  /**\n   * after delete\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n\n\n  _class.prototype.afterDelete = function afterDelete() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    return this.postRelation('DELETE', options.where, options);\n  };\n  /**\n   * after update\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n\n\n  _class.prototype.afterUpdate = function afterUpdate(data, options) {\n    return this.postRelation('UPDATE', data, options);\n  };\n  /**\n   * post relation\n   * @param  {} postType      []\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n\n\n  _class.prototype.postRelation = function () {\n    var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(postType, data /*, parsedOptions*/) {\n      var _this3 = this;\n\n      var pk, promises;\n      return _regenerator2.default.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(think.isEmpty(data) || think.isEmpty(this.relation) || think.isEmpty(this._relationName))) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt('return', data);\n\n            case 2:\n              _context6.next = 4;\n              return this.getPk();\n\n            case 4:\n              pk = _context6.sent;\n              promises = (0, _keys2.default)(this.relation).map(function (key) {\n                var item = _this3.relation[key];\n                if (!think.isObject(item)) {\n                  item = { type: item };\n                }\n                var opts = think.extend({\n                  type: think.model.HAS_ONE,\n                  postType: postType,\n                  name: key,\n                  key: pk,\n                  fKey: _this3.name + '_id'\n                }, item);\n                if (_this3._relationName !== true && _this3._relationName.indexOf(opts.name) === -1) {\n                  return;\n                }\n                if (postType === 'DELETE') {\n                  opts.data = data;\n                } else {\n                  var mapData = data[opts.name];\n                  if (think.isEmpty(mapData)) {\n                    return;\n                  }\n                  opts.data = mapData;\n                }\n                opts.model = _this3.model(item.model || key).where(item.where);\n                switch (item.type) {\n                  case think.model.BELONG_TO:\n                    return _this3._postBelongsToRelation(data, opts);\n                  case think.model.HAS_MANY:\n                    return _this3._postHasManyRelation(data, opts);\n                  case think.model.MANY_TO_MANY:\n                    return _this3._postManyToManyRelation(data, opts);\n                  default:\n                    return _this3._postHasOneRelation(data, opts);\n                }\n              });\n              _context6.next = 8;\n              return _promise2.default.all(promises);\n\n            case 8:\n              return _context6.abrupt('return', data);\n\n            case 9:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function postRelation(_x16, _x17) {\n      return _ref8.apply(this, arguments);\n    }\n\n    return postRelation;\n  }();\n  /**\n   * has one post\n   * @param  {} data          []\n   * @param  {} value         []\n   * @param  {} mapOptions    []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n\n\n  _class.prototype._postHasOneRelation = function _postHasOneRelation(data, mapOpts) {\n    var _where, _where2;\n\n    var where = void 0;\n    switch (mapOpts.postType) {\n      case 'ADD':\n        mapOpts.data[mapOpts.fKey] = data[mapOpts.key];\n        return mapOpts.model.add(mapOpts.data);\n      case 'DELETE':\n        where = (_where = {}, _where[mapOpts.fKey] = data[mapOpts.key], _where);\n        return mapOpts.model.where(where).delete();\n      case 'UPDATE':\n        where = (_where2 = {}, _where2[mapOpts.fKey] = data[mapOpts.key], _where2);\n        return mapOpts.model.where(where).update(mapOpts.data);\n    }\n  };\n  /**\n   * belongs to\n   * @param  {} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype._postBelongsToRelation = function _postBelongsToRelation(data) {\n    return data;\n  };\n  /**\n   * has many\n   * @param  {} data          []\n   * @param  {} value         []\n   * @param  {} mapOptions    []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n\n\n  _class.prototype._postHasManyRelation = function _postHasManyRelation(data, mapOpts) {\n    var _where3;\n\n    var mapData = mapOpts.data;\n    var model = mapOpts.model;\n    if (!think.isArray(mapData)) {\n      mapData = [mapData];\n    }\n    switch (mapOpts.postType) {\n      case 'ADD':\n        mapData = mapData.map(function (item) {\n          item[mapOpts.fKey] = data[mapOpts.key];\n          return item;\n        });\n        return model.addMany(mapData);\n      case 'UPDATE':\n        return model.getSchema().then(function () {\n          var pk = model.getPk();\n          var promises = mapData.map(function (item) {\n            if (item[pk]) {\n              return model.update(item);\n            } else {\n              item[mapOpts.fKey] = data[mapOpts.key];\n              //ignore error when add data\n              return model.add(item).catch(function () {});\n            }\n          });\n          return _promise2.default.all(promises);\n        });\n      case 'DELETE':\n        var where = (_where3 = {}, _where3[mapOpts.fKey] = data[mapOpts.key], _where3);\n        return model.where(where).delete();\n    }\n  };\n  /**\n   * many to many post\n   * @param  Object data          []\n   * @param  object value         []\n   * @param  {} mapOptions    []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n\n\n  _class.prototype._postManyToManyRelation = function () {\n    var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(data, mapOpts) {\n      var model, rfKey, relationModel, type, _where4, where, mapData, firstItem, postData, unqiueField, ids, _postData;\n\n      return _regenerator2.default.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              model = mapOpts.model;\n              _context7.next = 3;\n              return model.getSchema();\n\n            case 3:\n              rfKey = mapOpts.rfKey || model.getModelName().toLowerCase() + '_id';\n              relationModel = mapOpts.rModel ? this.model(mapOpts.rModel) : this.getRelationModel(model);\n              type = mapOpts.postType;\n\n              if (!(type === 'DELETE' || type === 'UPDATE')) {\n                _context7.next = 10;\n                break;\n              }\n\n              where = (_where4 = {}, _where4[mapOpts.fKey] = data[mapOpts.key], _where4);\n              _context7.next = 10;\n              return relationModel.where(where).delete();\n\n            case 10:\n              if (!(type === 'ADD' || type === 'UPDATE')) {\n                _context7.next = 31;\n                break;\n              }\n\n              mapData = mapOpts.data;\n\n              if (!think.isArray(mapData)) {\n                mapData = think.isString(mapData) ? mapData.split(',') : [mapData];\n              }\n              firstItem = mapData[0];\n\n              if (!(think.isNumberString(firstItem) || think.isObject(firstItem) && rfKey in firstItem)) {\n                _context7.next = 20;\n                break;\n              }\n\n              postData = mapData.map(function (item) {\n                var _ref10;\n\n                return _ref10 = {}, _ref10[mapOpts.fKey] = data[mapOpts.key], _ref10[rfKey] = item[rfKey] || item, _ref10;\n              });\n              _context7.next = 18;\n              return relationModel.addMany(postData);\n\n            case 18:\n              _context7.next = 31;\n              break;\n\n            case 20:\n              _context7.next = 22;\n              return model.getUniqueField();\n\n            case 22:\n              unqiueField = _context7.sent;\n\n              if (unqiueField) {\n                _context7.next = 25;\n                break;\n              }\n\n              return _context7.abrupt('return', think.reject(new Error('table `' + model.getTableName() + '` has no unqiue field')));\n\n            case 25:\n              _context7.next = 27;\n              return this._getRalationAddIds(mapData, model, unqiueField);\n\n            case 27:\n              ids = _context7.sent;\n              _postData = ids.map(function (id) {\n                var _ref11;\n\n                return _ref11 = {}, _ref11[mapOpts.fKey] = data[mapOpts.key], _ref11[rfKey] = id, _ref11;\n              });\n              _context7.next = 31;\n              return relationModel.addMany(_postData);\n\n            case 31:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function _postManyToManyRelation(_x18, _x19) {\n      return _ref9.apply(this, arguments);\n    }\n\n    return _postManyToManyRelation;\n  }();\n  /**\n   * insert data, add ids\n   * @param  {Array} dataList    []\n   * @param  {Object} model       []\n   * @param  {String} unqiueField []\n   * @return {Promise}             []\n   */\n\n\n  _class.prototype._getRalationAddIds = function () {\n    var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(dataList, model, unqiueField) {\n      var ids, pk, promises;\n      return _regenerator2.default.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              ids = [];\n              _context8.next = 3;\n              return model.getPk();\n\n            case 3:\n              pk = _context8.sent;\n              promises = dataList.map(function (item) {\n                var _where5;\n\n                if (!think.isObject(item)) {\n                  var _item;\n\n                  item = (_item = {}, _item[unqiueField] = item, _item);\n                }\n                var value = item[unqiueField];\n                var where = (_where5 = {}, _where5[unqiueField] = value, _where5);\n                return model.where(where).field(pk).find().then(function (data) {\n                  if (think.isEmpty(data)) {\n                    return model.add(item).then(function (insertId) {\n                      ids.push(insertId);\n                    });\n                  } else {\n                    ids.push(data[pk]);\n                  }\n                });\n              });\n              _context8.next = 7;\n              return _promise2.default.all(promises);\n\n            case 7:\n              return _context8.abrupt('return', ids);\n\n            case 8:\n            case 'end':\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function _getRalationAddIds(_x20, _x21, _x22) {\n      return _ref12.apply(this, arguments);\n    }\n\n    return _getRalationAddIds;\n  }();\n\n  return _class;\n}(think.model.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/util/parallel_limit.js":"'use strict';\n\n/**\n * parallel limit\n */\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$base) {\n  (0, _inherits3.default)(_class, _think$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$base.apply(this, arguments));\n  }\n\n  /**\n   * limit\n   * @param  {[type]}   limit    []\n   * @param  {Function} callback []\n   * @return {[type]}            []\n   */\n  _class.prototype.init = function init(limit, callback) {\n    if (think.isFunction(limit)) {\n      callback = limit;\n      limit = 0;\n    }\n    this.limit = limit || 10;\n    this.index = 0;\n    this.doing = 0;\n    this.callback = callback;\n    this.deferreds = [];\n  };\n  /**\n   * add item data\n   * @param {data} item []\n   */\n\n\n  _class.prototype.add = function add(item) {\n    var deferred = think.defer();\n    deferred.data = item;\n    this.deferreds.push(deferred);\n    this.run();\n    return deferred.promise;\n  };\n  /**\n   * add many data once\n   * @param {Array} dataList [data array]\n   */\n\n\n  _class.prototype.addMany = function addMany(dataList, ignoreError) {\n    var _this2 = this;\n\n    if (think.isEmpty(dataList)) {\n      return _promise2.default.resolve();\n    }\n    var promises = dataList.map(function (item) {\n      var promise = _this2.add(item);\n      return ignoreError ? promise.catch(function () {}) : promise;\n    });\n    return _promise2.default.all(promises);\n  };\n  /**\n   * next\n   * @return {Function} [description]\n   */\n\n\n  _class.prototype.next = function next() {\n    this.doing--;\n\n    //reduce deferreds avoid memory leak when use single item data\n    this.deferreds.splice(this.index - 1, 1);\n    this.index--;\n\n    this.run();\n  };\n  /**\n   * run\n   * @return {} []\n   */\n\n\n  _class.prototype.run = function run() {\n    var _this3 = this;\n\n    if (this.doing >= this.limit || this.index >= this.deferreds.length) {\n      return;\n    }\n    this.doing++;\n    var item = this.deferreds[this.index++];\n    var callback = think.isFunction(item.data) ? item.data : this.callback;\n    if (!think.isFunction(callback)) {\n      throw new Error('data item or callback must be a function');\n    }\n    var result = callback(item.data);\n    if (!think.isPromise(result)) {\n      result = _promise2.default.resolve(result);\n    }\n    return result.then(function (data) {\n      _this3.next();\n      //resolve item\n      item.resolve(data);\n    }).catch(function (err) {\n      _this3.next();\n      //reject item\n      item.reject(err);\n    });\n  };\n\n  return _class;\n}(think.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/controller/rest.js":"'use strict';\n\nimport path from 'path';\n\n/**\n * REST Base Controller\n * @return {} []\n */\nexport default class extends think.controller.base {\n  /**\n   * init\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  init(http){\n    super.init(http);\n    \n    this._isRest = true;\n    this._method = '';\n\n    this.resource = this.getResource();\n    this.id = this.getId();\n    this.modelInstance = this.model(this.resource);\n  }\n  /**\n   * get resource\n   * @return {String} [resource name]\n   */\n  getResource(){\n    let filename = this.__filename || __filename;\n    let last = filename.lastIndexOf(path.sep);\n    return filename.substr(last + 1, filename.length - last - 4);\n  }\n  /**\n   * get resource id\n   * @return {String} []\n   */\n  getId(){\n    let id = this.get('id');\n    if(id && think.isString(id) || think.isNumber(id)){\n      return id;\n    }\n    let last = this.http.pathname.split('/').slice(-1)[0];\n    if(last !== this.resource){\n      return last;\n    }\n    return '';\n  }\n  /**\n   * get resource\n   * @return {Promise} []\n   */\n  async getAction(){\n    let data;\n    if (this.id) {\n      let pk = await this.modelInstance.getPk();\n      data = await this.modelInstance.where({[pk]: this.id}).find();\n      return this.success(data);\n    }\n    data = await this.modelInstance.select();\n    return this.success(data);\n  }\n  /**\n   * put resource\n   * @return {Promise} []\n   */\n  async postAction(){\n    let pk = await this.modelInstance.getPk();\n    let data = this.post();\n    delete data[pk];\n    if(think.isEmpty(data)){\n      return this.fail('data is empty');\n    }\n    let insertId = await this.modelInstance.add(data);\n    return this.success({id: insertId});\n  }\n  /**\n   * delete resource\n   * @return {Promise} []\n   */\n  async deleteAction(){\n    if (!this.id) {\n      return this.fail('params error');\n    }\n    let pk = await this.modelInstance.getPk();\n    let rows = await this.modelInstance.where({[pk]: this.id}).delete();\n    return this.success({affectedRows: rows});\n  }\n  /**\n   * update resource\n   * @return {Promise} []\n   */\n  async putAction(){\n    if (!this.id) {\n      return this.fail('params error');\n    }\n    let pk = await this.modelInstance.getPk();\n    let data = this.post();\n    delete data[pk];\n    if (think.isEmpty(data)) {\n      return this.fail('data is empty');\n    }\n    let rows = await this.modelInstance.where({[pk]: this.id}).update(data);\n    return this.success({affectedRows: rows});\n  }\n  /**\n   * call\n   * @return {Promise} []\n   */\n  __call(){\n    return this.fail(think.locale('ACTION_INVALID', this.http.action, this.http.url));\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/check_csrf.js":"'use strict';\n\nimport CSRF from './csrf.js';\n\n/**\n * check csrf\n * @type {}\n */\nexport default class extends CSRF {\n  /**\n   * run\n   * @return {Promise} []\n   */\n  run(){\n    think.log('`check_csrf` middleware is deprecated, use `csrf` instead', 'WARNING');\n    return super.run();\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/check_resource.js":"'use strict';\n\nimport { normalize } from 'path';\n\n/**\n * resource check\n * @param  {}            \n * @return {}     []\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {Promise} []\n   */\n  run(){\n    let pathname = this.http.pathname;\n    if (!this.config('resource_on') || !pathname || pathname === '/') {\n      return null;\n    }\n    // pathname maybe not valid, then throw an `URI malformed` error\n    try{\n      pathname = decodeURIComponent(pathname).replace(/\\\\/g, '/');\n    }catch(e){\n      return null;\n    }\n    pathname = normalize(pathname);\n    // replace \\ to / on windows\n    pathname = pathname.replace(/\\\\/g, '/');\n    let reg = this.config('resource_reg');\n    if (!reg.test(pathname)) {\n      return null;\n    }\n    let file = normalize(`${think.RESOURCE_PATH}/${pathname}`);\n    if(file.indexOf(think.RESOURCE_PATH) !== 0){\n      return null;\n    }\n    //resource exist\n    if (think.isFile(file)) {\n      let cors = this.config('resource_cors');\n      if(cors){\n        this.http.header('Access-Control-Allow-Origin', typeof cors === 'string' ? cors : '*');\n      }\n      // extend resource headers\n      const resourceHeaders = this.config('resource_headers') || {};\n      for (let header in resourceHeaders) {\n        this.http.header(header, resourceHeaders[header]);\n      }\n      return file;\n    }else{\n      return true;\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/force_proxy.js":"'use strict';\n/**\n * force proxy\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    //deny access by ip + port\n    if (this.config('proxy_on') && http.host !== http.hostname && !http.socket) {\n      http.error = new Error(think.locale('DISALLOW_PORT'));\n      return think.statusAction(403, http);\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/locate_template.js":"'use strict';\n\nimport path from 'path';\n/**\n * find template file path\n * @param  {String}  \n * @return {Class}\n */\nexport default class extends think.middleware.base {\n  /**\n   * get path prefix\n   * @return {String} []\n   */\n  getPathPrefix(module){\n    let pathPrefix, http = this.http, prefix = '';\n    let {root_path} = this.options;\n    let theme = http.theme();\n    let lang = http._langAsViewPath && http.lang();\n    \n    module = module || http.module;\n    \n    //support locale\n    if(lang){\n      prefix += think.sep + lang;\n    }\n    //support theme\n    if(theme){\n      prefix += think.sep + theme;\n    }\n\n    //view root path is defined\n    if(root_path){\n      pathPrefix = path.normalize(root_path);\n      if(think.mode === think.mode_module){\n        pathPrefix += prefix + think.sep + module;\n      }\n    }else{\n      pathPrefix = think.getPath(module, think.dirname.view, prefix);\n    }\n\n    return pathPrefix;\n  }\n  /**\n   * run\n   * @param  {String} templateFile [template filepath]\n   * @return {}              []\n   */\n  run(options){\n    if(!think.isObject(options)){\n      options = think.extend({\n        templateFile: options\n      }, this.config('view'));\n    }\n    this.options = options;\n\n    let templateFile = options.templateFile;\n    //is absolute file path\n    if(templateFile && path.isAbsolute(templateFile)){\n      return templateFile;\n    }\n    let http = this.http;\n    let {file_depr, file_ext} = options;\n    let pathPrefix = this.getPathPrefix();\n    let controller = http.controller.replace(/\\//g, think.sep);\n\n    //if file_depr is /, replace to think.sep, avoid error on windows\n    if(file_depr === '/'){\n      file_depr = think.sep;\n    }\n\n    // this.display()\n    if (!templateFile) {\n      return pathPrefix + think.sep + controller + file_depr + http.action + file_ext;\n    }\n    //replace : to /\n    templateFile = templateFile.replace(/\\:/g, '/');\n\n    // this.display('detail')\n    // this.display('index/detail')\n    // this.display('admin/index/detail')\n    // this.display('admin/index/detail.html')\n    let paths = templateFile.split('/');\n    let length = paths.length;\n    let action = paths[length - 1];\n\n    let module;\n    if(length === 2){\n      controller = paths[0];\n    }else if(length > 2){\n      let index = think.module.indexOf(paths[0]) > -1 ? 1 : 0;\n      if(index){\n        module = paths[0];\n      }\n      let newController = paths.slice(index, length - 1).join(think.sep);\n      if(newController){\n        controller = newController;\n      }\n    }\n\n    if (module && module !== http.module) {\n      pathPrefix = this.getPathPrefix(module);\n    }\n\n    templateFile = pathPrefix + think.sep + controller + file_depr + action;\n    if (action.indexOf('.') === -1) {\n      templateFile += file_ext;\n    }\n    return templateFile;\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/output_resource.js":"'use strict';\n\nimport fs from 'fs';\nimport mime from 'mime';\n\n/**\n * output resource\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(file){\n    //not resource\n    if(file === false){\n      return;\n    }\n    let http = this.http;\n    //is resource but not exist\n    if(file === true){\n      http.status(404);\n      http.end();\n      return think.prevent();\n    }\n    //flag request is resource\n    http._isResource = true;\n\n    let contentType = mime.lookup(file);\n    http.type(contentType, false);\n\n    let range = http.header('range');\n    if(!range){\n      return this.outputNormal(file);\n    }\n    return this.outputRange(file, range);\n  }\n  /**\n   * output normal file\n   * @param  {String} file []\n   * @return {Promise}      []\n   */\n  outputNormal(file){\n    let http = this.http;\n    let stream = fs.createReadStream(file);\n    stream.pipe(http.res);\n    stream.on('end', () => {\n      http.end();\n    });\n    stream.on('error', () => {\n      http.end();\n    });\n    return think.prevent();\n  }\n  /**\n   * output range file\n   * @param  {String} file  []\n   * @param  {String} range []\n   * @return {Promise}       []\n   */\n  outputRange(file, range){\n    //request has range header\n    let size = fs.statSync(file).size;\n    let match = range.match(/bytes=(\\d+)\\-(\\d*)/);\n    let slice = 1 * 1024 * 1024;\n    let from = parseInt(match[1]) || 0;\n    let to = parseInt(match[2]) || 0;\n    if(!to){\n      to = from + slice - 1;\n    }\n    to = Math.min(to, size - 1);\n\n    let http = this.http;\n    http.status(206);\n    http.header('Accept-Ranges', 'bytes');\n    http.header('Content-Range', `bytes ${from}-${to}/${size}`);\n    \n    let fd = fs.openSync(file, 'r');\n    let buffer = new Buffer(to - from + 1);\n    fs.readSync(fd, buffer, 0, to - from, from);\n    fs.closeSync(fd);\n    http.end(buffer);\n\n    return think.prevent();\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/parse_form_payload.js":"'use strict';\n\nimport os from 'os';\nimport multiparty from 'multiparty';\n\n\nconst MULTIPARTY_REG = /^multipart\\/(form-data|related);\\s*boundary=(?:\"([^\"]+)\"|([^;]+))$/i;\n\n/**\n * parse form payload\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    if(!http.req.readable){\n      return;\n    }\n\n    //file upload by form or FormData\n    //can not use http.type method\n    if (!MULTIPARTY_REG.test(http.headers['content-type'])) {\n      return;\n    }\n\n    //make upload file path\n    let uploadDir = think.config('post.file_upload_path');\n    if(!uploadDir){\n      uploadDir = os.tmpdir() + think.sep + 'thinkjs' + think.sep + 'upload';\n    }\n    think.mkdir(uploadDir);\n\n    return this.getFormData(uploadDir);\n  }\n  /**\n   * get form data\n   * @return {Promise} []\n   */\n  getFormData(uploadDir){\n    let http = this.http;\n    let deferred = think.defer();\n    let postConfig = think.config('post');\n    let form = new multiparty.Form({\n      maxFieldsSize: postConfig.max_fields_size,\n      maxFields: postConfig.max_fields,\n      maxFilesSize: postConfig.max_file_size,\n      uploadDir: uploadDir\n    });\n    //support for file with multiple=\"multiple\"\n    let files = http._file;\n    form.on('file', (name, value) => {\n      if (name in files) {\n        if (!think.isArray(files[name])) {\n          files[name] = [files[name]];\n        }\n        files[name].push(value);\n      }else{\n        files[name] = value;\n      }\n    });\n    form.on('field', (name, value) => {\n      http._post[name] = value;\n    });\n    form.on('close', () => {\n      deferred.resolve(null);\n    });\n    form.on('error', err => {\n      http.req.resume();\n      http.res.statusCode = 400;\n      http.end();\n      //log error\n      if(http.config('post.log_error')){\n        think.log(err);\n      }\n    });\n    form.parse(http.req);\n    return deferred.promise;\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/parse_json_payload.js":"'use strict';\n\nimport querystring from 'querystring';\n\n/**\n * parse json payload\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    if(!http.req.readable){\n      return;\n    }\n\n    let types = http.config('post.json_content_type');\n    if (types.indexOf(http.type()) === -1) {\n      return;\n    }\n    return http.getPayload().then(payload => {\n      let data;\n      try{\n        data = JSON.parse(payload);\n      }catch(e){\n        //log error\n        if(http.config('post.log_error')){\n          think.log(new Error('JSON.parse error, payload is not a valid JSON data'));\n        }\n        //if using json parse error, then use querystring parse.\n        //sometimes http header has json content-type, but payload data is querystring data\n        data = querystring.parse(payload);\n      }\n      if(!think.isEmpty(data)){\n        http._post = think.extend(http._post, data);\n      }\n      return null;\n    });\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/parse_querystring_payload.js":"'use strict';\n\nimport querystring from 'querystring';\n\n/**\n * parse json payload\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    \n    if (!http.req.readable) {\n      return;\n    }\n\n    let contentType = http.type();\n    if(contentType && contentType.indexOf('application/x-www-form-urlencoded') === -1){\n      return;\n    }\n    \n    return http.getPayload().then(payload => {\n      http._post = think.extend(http._post, querystring.parse(payload));\n      return null;\n    });\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/parse_route.js":"'use strict';\n\nimport url from 'url';\n\n/**\n * route array rules:\n * [\n *   [/^user\\/(\\d+)/, 'home/user/detail?id=:1'],\n *   [/^usr\\/(\\d+)/, {\n *     get: 'home/user/detail?id=:1',\n *     post: 'home/user/delete?id=:1'\n *   }],\n *   ...\n * ]\n *\n * route object rules:\n * {\n *   admin: {\n *     reg: /^admin/,\n *     children: [\n *       \n *     ]\n *   }\n * }\n */\n\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {Promise} []\n   */\n  run(){\n    // cleanPathname\n    this.http.pathname = this.http.pathname.replace(/^\\/|\\/$/g, '');\n\n    if (!this.config('route_on')) {\n      return this.parsePathname();\n    }\n\n    let rules = think.route();\n    if(think.isEmpty(rules)){\n      return this.parsePathname();\n    }\n    return this.parse(rules);\n  }\n  /**\n   * parse routes\n   * @param  {Array} routes [routes]\n   * @return {}        []\n   */\n  parse(rules){\n    if(think.isArray(rules)){\n      return this.parseRules(rules);\n    }\n    for(let module in rules){\n      let reg = rules[module].reg;\n      if(!reg || reg.test(this.http.pathname)){\n        this.module = module;\n        return this.parseRules(rules[module].children);\n      }\n    }\n    return this.parsePathname();\n  }\n  /**\n   * parse array rules\n   * @param  {Array} rules []\n   * @return {}       []\n   */\n  parseRules(rules){\n    let length = rules.length;\n    let pathname = this.http.pathname;\n    if (length === 0 || !pathname) {\n      return this.parsePathname();\n    }\n    let match, item, route, rule;\n    for(let i = 0; i < length; i++){\n      item = rules[i];\n      route = this.getRoute(item[1]);\n      if (!route) {\n        continue;\n      }\n      rule = item[0];\n      //regexp route\n      if (think.isRegExp(rule)) {\n        match = pathname.match(rule);\n        if (match) {\n          return this.parseRegExpRule(match, route);\n        }\n      }\n      //is string route\n      else if (this.checkUrlMatch(rule)) {\n        return this.parseRoute(route);\n      }\n    }\n    return this.parsePathname();\n  }\n  /**\n   * get module from pathname\n   * @return {String} []\n   */\n  parseModule(){\n    let defaultModule = think.config('default_module');\n    if(think.mode === think.mode_normal){\n      return defaultModule;\n    }\n    let http = this.http;\n    let pathname = http.pathname;\n    let pos = pathname.indexOf('/');\n    let mod = pos === -1 ? pathname : pathname.substr(0, pos);\n    if(this.module){\n      if(this.module === mod){\n        http.pathname = pathname.substr(mod.length + 1);\n      }else {\n        mod = this.module;\n      }\n    }else if (mod && mod !== think.dirname.common && think.module.indexOf(mod) > -1) {\n      http.pathname = pathname.substr(mod.length + 1);\n    }else{\n      mod = '';\n    }\n    return this.getModule(mod);\n  }\n  /**\n   * get controller from pathname\n   * @return {} []\n   */\n  parseController(module){\n    let subControllers = thinkData.subController[module];\n    let http = this.http;\n    let pathname = http.pathname;\n    if(!pathname){\n      return '';\n    }\n    let pos = pathname.indexOf('/');\n    //search sub controller\n    if(pos > -1 && subControllers){\n      for(let i = 0, length = subControllers.length, item; i < length; i++){\n        item = subControllers[i];\n        if(pathname === item || pathname.indexOf(item + '/') === 0){\n          http.pathname = http.pathname.substr(item.length + 1);\n          return item;\n        }\n      } \n    }\n    let controller = pos === -1 ? pathname : pathname.substr(0, pos);\n    http.pathname = http.pathname.substr(controller.length + 1);\n    return controller;\n  }\n  /**\n   * parse pathname\n   * @return {} []\n   */\n  parsePathname(){\n    let http = this.http;\n    if (!http.pathname) {\n      this.http.module = this.getModule();\n      this.http.controller = this.getController();\n      this.http.action = this.getAction();\n      return;\n    }\n    let module = this.parseModule();\n    let controller = this.parseController(module);\n    let paths = http.pathname.split('/');\n    let action = paths.shift();\n\n    this.parseExtPath(paths);\n\n    this.http.module = module; //module not need check\n    this.http.controller = this.getController(controller);\n    this.http.action = this.getAction(action);\n\n    if (!this.http.controller) {\n      this.http.error = new Error(think.locale('CONTROLLER_INVALID', controller, this.http.url));\n      return think.statusAction(400, http);\n    }\n    if (!this.http.action) {\n      this.http.error = new Error(think.locale('ACTION_INVALID', action, this.http.url));\n      return think.statusAction(400, http);\n    }\n  }\n  /**\n   * parse extra path\n   * @param  {Array} paths [extra path]\n   * @return {}       []\n   */\n  parseExtPath(paths){\n    if (paths.length === 0) {\n      return;\n    }\n    if (!think.isArray(paths)) {\n      if (paths[0] === '/') {\n        paths = paths.slice(1);\n      }\n      paths = paths.split('/');\n    }\n    for(let i = 0, name, length = Math.ceil(paths.length) / 2; i < length; i++){\n      name = paths[i * 2];\n      if(name){\n        this.http._get[name] = decodeURIComponent(paths[i * 2 + 1] || '');\n      }\n    }\n  }\n  /**\n   * check url is match\n   * @param  {String} rule [url rule]\n   * @return {Boolean}      []\n   */\n  checkUrlMatch(rule){\n    let pathname = this.http.pathname.split('/');\n    rule = rule.split('/');\n    let i = 0, length = rule.length, plength = pathname.length, item, pitem;\n    //if rule lenth is more than pathname, it will be false\n    if (length > plength) {\n      return false;\n    }\n    let match = {};\n    for(; i < length; i++){\n      item = rule[i];\n      pitem = pathname[i];\n      if (item.indexOf(':') === 0) {\n        match[item.slice(1)] = pitem;\n      }else{\n        if (pitem.toLowerCase() !== item.toLowerCase()) {\n          return false;\n        }\n      }\n    }\n    //append match data to this.http._get\n    for(let key in match){\n      this.http._get[key] = match[key];\n    }\n    if (plength > length) {\n      this.parseExtPath(pathname.slice(length));\n    }\n    return true;\n  }\n  /**\n   * get route\n   * @param  {Object} route   []\n   * @param  {Array} matches []\n   * @return {[type]}         []\n   */\n  getRoute(route){\n    if (think.isString(route)) {\n      return route;\n    }\n    for(let method in route){\n      if (method.toUpperCase().indexOf(this.http.method) > -1) {\n        return route[method];\n      }\n    }\n    return '';\n  }\n  /**\n   * parse route string\n   * @param  {String} route []\n   * @return {}       []\n   */\n  parseRoute(route){\n    if (route.indexOf('?') > -1) {\n      let urlInfo = url.parse(route, true);\n      let query = urlInfo.query;\n      for(let key in query){\n        if (query[key] || !(key in this.http._get)) {\n          this.http._get[key] = query[key];\n        }\n      }\n      route = urlInfo.pathname;\n    }\n    if (route[0] === '/') {\n      route = route.slice(1);\n    }\n    this.http.pathname = route;\n    return this.parsePathname();\n  }\n  /**\n   * parse regexp rule\n   * @param  {Array} matches  [route matches]\n   * @param  {String | Object} route    [route]\n   * @return {Boolean}          []\n   */\n  parseRegExpRule(matches, route){\n    //replace :1, :2 in route\n    //such as: group/detail?date=:1&groupId=:2&page=:3\n    route = route.replace(/:(\\d+)/g, (a, b) => (matches[b] || ''));\n    let pathname = this.http.pathname.slice(matches[0].length);\n    this.parseExtPath(pathname);\n    this.parseRoute(route);\n  }\n  /**\n   * check value is lowerCase\n   * @param  {String} value []\n   * @return {}       []\n   */\n  checkLowerCase(value){\n    // if value has - chars, not check, for REST API\n    if(value.indexOf('-') > -1){\n      return;\n    }\n    let lower = value.toLowerCase();\n    if(value !== lower){\n      think.log(colors => {\n        return colors.yellow('[WARNING]') + ` ` + think.locale('URL_HAS_UPPERCASE', value);\n      });\n    }\n  }\n  /**\n   * get module name\n   * @param  {String} module []\n   * @return {String}        []\n   */\n   getModule(module){\n    if (!module || think.mode === think.mode_normal) {\n      return think.config('default_module');\n    }\n    this.checkLowerCase(module);\n    return module.toLowerCase();\n  }\n  /**\n   * get controller name\n   * @param  {String} controller []\n   * @return {String}            []\n   */\n  getController(controller){\n    if (!controller) {\n      return think.config('default_controller');\n    }\n    //has / in controller\n    if (/^[\\w\\/]+$/.test(controller)) {\n      this.checkLowerCase(controller);\n      return controller.toLowerCase();\n    }\n    return '';\n  }\n  /**\n   * get action\n   * @param  {String} action [action name]\n   * @return {String}        []\n   */\n  getAction(action){\n    if (!action) {\n      return think.config('default_action');\n    }\n    // action name support `-` char, for REST API\n    // /api/system/3b6c279c-bd61-f093-c543-56f9ab4300b7\n    if (/^[\\w\\-]+$/.test(action)) {\n      this.checkLowerCase(action);\n      return action.toLowerCase();\n    }\n    return '';\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/parse_single_file_payload.js":"'use strict';\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\n/**\n * parse single file payload, uploaded with ajax\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n\n    if(!http.req.readable){\n      return;\n    }\n\n    let post = this.config('post');\n    let filename = http.header(post.single_file_header);\n    if(!filename){\n      return;\n    }\n    \n    let uploadDir = post.file_upload_path;\n    if(!uploadDir){\n      uploadDir = os.tmpdir() + think.sep + 'thinkjs' + think.sep + 'upload';\n    }\n    think.mkdir(uploadDir);\n\n    return this.getUploadFile(uploadDir, filename);\n  }\n  /**\n   * get upload file\n   * @param  {String} uploadDir []\n   * @param  {String} filename  []\n   * @return {Promise}           []\n   */\n  getUploadFile(uploadDir, filename){\n    let deferred = think.defer();\n    let http = this.http;\n    let name = think.uuid(20);\n    let filepath = uploadDir + think.sep + name + path.extname(filename).slice(0, 5);\n    let stream = fs.createWriteStream(filepath);\n    http.req.pipe(stream);\n    stream.on('error', err => {\n      http.res.statusCode = 400;\n      http.end();\n      //log error\n      if(http.config('post.log_error')){\n        think.log(err);\n      }\n    });\n    stream.on('close', () => {\n      http._file.file = {\n        fieldName: 'file',\n        originalFilename: filename,\n        path: filepath,\n        size: fs.statSync(filepath).size\n      };\n      deferred.resolve(null);\n    });\n    return deferred.promise;\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/parse_template.js":"'use strict';\n\n\n/**\n * parse template content\n * @param  {Object} \n * @return {Promise}         []\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @param  {Object} data [render template data]\n   * @return {Promise}      []\n   */\n  run(data){\n    let file = data.file;\n    this.http.tpl_file = file;\n    let config = data.config || {};\n    let engine = config.type || this.config('view.type') || 'base';\n    let Cls = think.adapter('template', engine);\n    let instance = new Cls();\n    return instance.run(file, data.var, config);\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/rewrite_pathname.js":"'use strict';\n/**\n * rewrite pathname\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    let pathname = http.pathname;\n    if (!pathname || pathname === '/') {\n      return;\n    }\n    let prefix = http.config('pathname_prefix');\n    if (prefix && pathname.indexOf(prefix) === 0) {\n      pathname = pathname.substr(prefix.length);\n    }\n    let suffix = http.config('pathname_suffix');\n    if (suffix && pathname.substr(0 - suffix.length) === suffix) {\n      pathname = pathname.substr(0, pathname.length - suffix.length);\n    }\n    http.pathname = pathname;\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/service_off.js":"'use strict';\n/**\n * service off\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    if(!this.config('service_on')){\n      let http = this.http;\n      http.error = new Error(think.locale('SERVICE_UNAVAILABLE'));\n      return think.statusAction(503, http);\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/subdomain_deploy.js":"'use strict';\n\nimport subdomain from './subdomain.js';\n\n/**\n * subdomain deploy\n * @type {}\n */\nexport default class extends subdomain {\n  /**\n   * run\n   * @return {Promise} []\n   */\n  run(){\n    think.log('`subdomain_deploy` middleware is deprecated, use `subdomain` instead', 'WARNING');\n    return super.run();\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/subdomain.js":"'use strict';\n/**\n * subdomain\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let subdomain = this.config('subdomain');\n    if (think.isEmpty(subdomain)) {\n      return;\n    }\n    let http = this.http;\n    let hostname = http.hostname.split('.')[0];\n    let value = subdomain[hostname];\n    if (!value) {\n      return;\n    }\n    http.pathname = value + '/' + http.pathname;\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/middleware/validate_payload.js":"'use strict';\n\n/**\n * validate post data\n * @type {}\n */\nexport default class extends think.middleware.base {\n  /**\n   * run\n   * @return {} []\n   */\n  run(){\n    let http = this.http;\n    let post = http._post;\n    let length = Object.keys(post).length;\n    if (length > think.config('post.max_fields')) {\n      http.res.statusCode = 400;\n      http.end();\n      return think.prevent();\n    }\n    let maxFilesSize = think.config('post.max_fields_size');\n    for(let name in post){\n      if (post[name] && post[name].length > maxFilesSize) {\n        http.res.statusCode = 400;\n        http.end();\n        return think.prevent();\n      }\n    }\n  }\n}","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/src/model/relation.js":"'use strict';\n\n//model relation type\nthink.model.HAS_ONE = 1;\nthink.model.BELONG_TO = 2;\nthink.model.HAS_MANY = 3;\nthink.model.MANY_TO_MANY = 4;\n/**\n * relation model\n * @type {Class}\n */\nexport default class extends think.model.base {\n  /**\n   * init\n   * @param  {String} name   []\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  init(name = '', config = {}){\n    super.init(name, config);\n    /**\n     * @example\n     'profile': {\n        type: think.model.HAS_ONE, //relation type\n        model: 'profile', //model name\n        name: 'profile', //data name\n        key: 'id', \n        fKey: 'user_id', //forign key\n        field: 'id,name',\n        where: 'name=xx',\n        order: '',\n        limit: ''\n      }\n     */\n    if(this.relation === undefined){\n      this.relation = {};\n    }\n    this._relationName = true;\n  }\n  /**\n   * set relation\n   * @param {String} name []\n   */\n  setRelation(name, value){\n    //ignore undefined name\n    if(name === undefined){\n      return this;\n    }\n\n    //config relation data\n    if (think.isObject(name) || !think.isEmpty(value)) {\n      let obj = think.isObject(name) ? name : {[name]: value};\n      think.extend(this.relation, obj);\n      return this;\n    }\n\n    if(think.isBoolean(name)){\n      this._relationName = name;\n      return this;\n    }\n\n    //enable relation\n    if (think.isString(name)) {\n      name = name.split(/\\s*,\\s*/);\n    }\n\n    name = name || [];\n    //filter relation name\n    if(value === false){\n      let filterRelations = Object.keys(this.relation).filter(item => {\n        return name.indexOf(item) === -1;\n      });\n      name = filterRelations;\n    }\n\n    this._relationName = name;\n    return this;\n  }\n  /**\n   * after find\n   * @param  {Object} data []\n   * @return {Promise}      []\n   */\n  afterFind(data, options){\n    return this.getRelation(data, options);\n  }\n  /**\n   * after select\n   * @param  {Object} data []\n   * @return {}      []\n   */\n  afterSelect(data, options){\n    return this.getRelation(data, options);\n  }\n  /**\n   * get relation data\n   * @param  {}  data       []\n   * @param  Boolean isDataList \n   * @return {}\n   */\n  async getRelation(data, options = {}){\n    if (think.isEmpty(data) || think.isEmpty(this.relation) || think.isEmpty(this._relationName)) {\n      return data;\n    }\n    let pk = await this.getPk();\n    let promises = Object.keys(this.relation).map(key => {\n      //relation is disabled\n      if (this._relationName !== true && this._relationName.indexOf(key) === -1) {\n        return;\n      }\n      let item = this.relation[key];\n      if (!think.isObject(item)) {\n        item = {type: item};\n      }\n      //get relation model options\n      let opts = think.extend({\n        name: key,\n        type: think.model.HAS_ONE,\n        key: pk,\n        fKey: this.name + '_id',\n        relation: true\n      }, item);\n\n      //relation data is exist\n      let itemData = think.isArray(data) ? data[0] : data;\n      let relData = itemData[opts.name];\n      if(think.isArray(relData) || think.isObject(relData)){\n        return;\n      }\n\n      let modelOpts = think.extend({}, {\n        cache: options.cache\n      });\n      //remove cache key\n      if(modelOpts.cache && modelOpts.cache.key){\n        delete modelOpts.cache.key;\n      }\n\n      ['where', 'field', 'order', 'limit', 'page'].forEach(optItem => {\n        if(think.isFunction(item[optItem])){\n          modelOpts[optItem] = item[optItem](this);\n        }else{\n          modelOpts[optItem] = item[optItem];\n        }\n      });\n      //get relation model instance\n      let model = this.model(item.model || key).options(modelOpts);\n\n      //set relation to relate model\n      if(model.setRelation){\n        model.setRelation(opts.relation, false);\n      }\n\n      opts.model = model;\n      \n      switch(item.type){\n        case think.model.BELONG_TO:\n          // if(item.model) {\n          //   delete item.model;\n          // }\n          opts = think.extend(opts, {\n            key: opts.model.getModelName() + '_id',\n            fKey: 'id' \n          }, item);\n          opts.model = model; //get ref back\n          return this._getBelongsToRelation(data, opts, options);\n        case think.model.HAS_MANY:\n          return this._getHasManyRelation(data, opts, options);\n        case think.model.MANY_TO_MANY:\n          return this._getManyToManyRelation(data, opts, options);\n        default:\n          return this._getHasOneRelation(data, opts, options);\n      }\n    });\n    await Promise.all(promises);\n    return data;\n  }\n  /**\n   * has one\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {Promise}         []\n   */\n  async _getHasOneRelation(data, mapOpts/*, options*/){\n    let where = this.parseRelationWhere(data, mapOpts);\n    // if (where === false) {\n    //   return {};\n    // }\n    let mapData = await mapOpts.model.where(where).select();\n    return this.parseRelationData(data, mapData, mapOpts);\n  }\n  /**\n   * belongs to\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {Promise}         []\n   */\n  async _getBelongsToRelation(data, mapOpts/*, options*/){\n    let where = this.parseRelationWhere(data, mapOpts);\n    let mapData = await mapOpts.model.where(where).select();\n    return this.parseRelationData(data, mapData, mapOpts);\n  }\n  /**\n   * has many\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {Promise}         []\n   */\n  async _getHasManyRelation(data, mapOpts/*, options*/){\n    let where = this.parseRelationWhere(data, mapOpts);\n    // if (where === false) {\n    //   return [];\n    // }\n    let mapData = await mapOpts.model.where(where).select();\n    return this.parseRelationData(data, mapData, mapOpts, true);\n  }\n  /**\n   * many to many\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n  async _getManyToManyRelation(data, mapOpts, options){\n    let where = this.parseRelationWhere(data, mapOpts);\n    let sql = 'SELECT %s, a.%s FROM %s as a, %s as b %s AND a.%s=b.%s %s';\n    let field = this.db().parseField(mapOpts.field).split(',').map(item => `b.${item}`).join(',');\n    let pk = await mapOpts.model.getPk();\n\n    let table = mapOpts.rModel;\n    if(table){\n      if(this.tablePrefix && table.indexOf(this.tablePrefix) !== 0){\n        table = this.tablePrefix + table;\n      }\n    }else{\n     table = this.getRelationTableName(mapOpts.model);\n    }\n\n    let table1 = mapOpts.model.getTableName();\n    let where1 = this.db().parseWhere(where);\n    let rkey = mapOpts.rfKey || (mapOpts.model.getModelName() + '_id');\n    let where2 = mapOpts.where ? (' AND ' + this.db().parseWhere(mapOpts.where).trim().slice(6)) : '';\n    sql = this.parseSql(sql, field, mapOpts.fKey, table, table1, where1, rkey, pk, where2);\n    let mapData = await this.db().select(sql, options.cache);\n    return this.parseRelationData(data, mapData, mapOpts, true);\n  }\n  /**\n   * get relation table name\n   * @param  {Object} model []\n   * @return {}       []\n   */\n  getRelationTableName(model){\n    let table = [\n      this.tablePrefix,\n      this.tableName || this.name,\n      '_',\n      model.getModelName()\n    ].join('');\n    return table.toLowerCase();\n  }\n  /**\n   * get relation model\n   * @param  {} model []\n   * @return {}       []\n   */\n  getRelationModel(model){\n    let name = (this.tableName || this.name) + '_' + model.getModelName();\n    return this.model(name);\n  }\n  /**\n   * parese relation where\n   * @param  {Object} data    []\n   * @param  {Object} mapOpts []\n   * @return {}         []\n   */\n  parseRelationWhere(data, mapOpts){\n    if (think.isArray(data)) {\n      let keys = {};\n      data.forEach(item => {\n        keys[item[mapOpts.key]] = 1;\n      });\n      let value = Object.keys(keys);\n      return {\n        [mapOpts.fKey]: ['IN', value]\n      };\n    }\n    return {\n      [mapOpts.fKey]: data[mapOpts.key]\n    };\n  }\n  /**\n   * parse relation data\n   * @param  {Object}  data     []\n   * @param  {}  mapData  []\n   * @param  {}  mapOpts  []\n   * @param  {Boolean} isArrMap []\n   * @return {}           []\n   */\n  parseRelationData(data, mapData, mapOpts, isArrMap){\n    if (think.isArray(data)) {\n      if (isArrMap) {\n        data.forEach((item, i) => {\n          data[i][mapOpts.name] = [];\n        });\n      }\n      mapData.forEach(mapItem => {\n        data.forEach((item, i) => {\n          if (mapItem[mapOpts.fKey] !== item[mapOpts.key]) {\n            return;\n          }\n          if (isArrMap) {\n            data[i][mapOpts.name].push(mapItem);\n          }else{\n            data[i][mapOpts.name] = mapItem;\n          }\n        });\n      });\n    }else{\n      data[mapOpts.name] = isArrMap ? mapData : (mapData[0] || {});\n    }\n    return data;\n  }\n  /**\n   * after add\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  afterAdd(data, options){\n    return this.postRelation('ADD', data, options);\n  }\n  /**\n   * after delete\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  afterDelete(options = {}){\n    return this.postRelation('DELETE', options.where, options);\n  }\n  /**\n   * after update\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  afterUpdate(data, options){\n    return this.postRelation('UPDATE', data, options);\n  }\n  /**\n   * post relation\n   * @param  {} postType      []\n   * @param  {} data          []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  async postRelation(postType, data/*, parsedOptions*/){\n    if (think.isEmpty(data) || think.isEmpty(this.relation) || think.isEmpty(this._relationName)) {\n      return data;\n    }\n    let pk = await this.getPk();\n    let promises = Object.keys(this.relation).map(key => {\n      let item = this.relation[key];\n      if (!think.isObject(item)) {\n        item = {type: item};\n      }\n      let opts = think.extend({\n        type: think.model.HAS_ONE,\n        postType: postType,\n        name: key,\n        key: pk,\n        fKey: this.name + '_id'\n      }, item);\n      if (this._relationName !== true && this._relationName.indexOf(opts.name) === -1) {\n        return;\n      }\n      if(postType === 'DELETE'){\n        opts.data = data;\n      }else{\n        let mapData = data[opts.name];\n        if (think.isEmpty(mapData)) {\n          return;\n        }\n        opts.data = mapData;\n      }\n      opts.model = this.model(item.model || key).where(item.where);\n      switch(item.type){\n        case think.model.BELONG_TO:\n          return this._postBelongsToRelation(data, opts);\n        case think.model.HAS_MANY:\n          return this._postHasManyRelation(data, opts);\n        case think.model.MANY_TO_MANY:\n          return this._postManyToManyRelation(data, opts);\n        default:\n          return this._postHasOneRelation(data, opts);\n      }\n    });\n    await Promise.all(promises);\n    return data;\n  }\n  /**\n   * has one post\n   * @param  {} data          []\n   * @param  {} value         []\n   * @param  {} mapOptions    []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  _postHasOneRelation(data, mapOpts){\n    let where;\n    switch(mapOpts.postType){\n      case 'ADD':\n        mapOpts.data[mapOpts.fKey] = data[mapOpts.key];\n        return mapOpts.model.add(mapOpts.data);\n      case 'DELETE':\n        where = {[mapOpts.fKey]: data[mapOpts.key]};\n        return mapOpts.model.where(where).delete();\n      case 'UPDATE':\n        where = {[mapOpts.fKey]: data[mapOpts.key]};\n        return mapOpts.model.where(where).update(mapOpts.data);\n    }\n  }\n  /**\n   * belongs to\n   * @param  {} data []\n   * @return {}      []\n   */\n  _postBelongsToRelation(data){\n    return data;\n  }\n  /**\n   * has many\n   * @param  {} data          []\n   * @param  {} value         []\n   * @param  {} mapOptions    []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  _postHasManyRelation(data, mapOpts){\n    let mapData = mapOpts.data;\n    let model = mapOpts.model;\n    if (!think.isArray(mapData)) {\n      mapData = [mapData];\n    }\n    switch(mapOpts.postType){\n      case 'ADD':\n        mapData = mapData.map(item => {\n          item[mapOpts.fKey] = data[mapOpts.key];\n          return item;\n        });\n        return model.addMany(mapData);\n      case 'UPDATE':\n        return model.getSchema().then(() => {\n          let pk = model.getPk();\n          let promises = mapData.map(item => {\n            if (item[pk]) {\n              return model.update(item);\n            }else{\n              item[mapOpts.fKey] = data[mapOpts.key];\n              //ignore error when add data\n              return model.add(item).catch(() => {});\n            }\n          });\n          return Promise.all(promises);\n        });\n      case 'DELETE':\n        let where = {[mapOpts.fKey]: data[mapOpts.key]};\n        return model.where(where).delete();\n    }\n  }\n  /**\n   * many to many post\n   * @param  Object data          []\n   * @param  object value         []\n   * @param  {} mapOptions    []\n   * @param  {} parsedOptions []\n   * @return {}               []\n   */\n  async _postManyToManyRelation(data, mapOpts){\n    let model = mapOpts.model;\n    await model.getSchema();\n    let rfKey = mapOpts.rfKey || (model.getModelName().toLowerCase() + '_id');\n    let relationModel = mapOpts.rModel ? this.model(mapOpts.rModel) : this.getRelationModel(model);\n\n    let type = mapOpts.postType;\n    if (type === 'DELETE' || type === 'UPDATE') {\n      let where = {[mapOpts.fKey]: data[mapOpts.key]};\n      await relationModel.where(where).delete(); \n    }\n\n    if (type === 'ADD' || type === 'UPDATE') {\n      let mapData = mapOpts.data;\n      if (!think.isArray(mapData)) {\n        mapData = think.isString(mapData) ? mapData.split(',') : [mapData];\n      }\n      let firstItem = mapData[0];\n      if (think.isNumberString(firstItem) || (think.isObject(firstItem) && (rfKey in firstItem))) {\n        let postData = mapData.map(item => {\n          return {[mapOpts.fKey]: data[mapOpts.key], [rfKey]: item[rfKey] || item};\n        });\n        await relationModel.addMany(postData);\n      }else{ \n        let unqiueField = await model.getUniqueField();\n        if (!unqiueField) {\n          return think.reject(new Error('table `' + model.getTableName() + '` has no unqiue field'));\n        }\n        let ids = await this._getRalationAddIds(mapData, model, unqiueField);\n        let postData = ids.map(id => {\n          return {[mapOpts.fKey]: data[mapOpts.key], [rfKey]: id};\n        });\n        await relationModel.addMany(postData);\n      }\n    }\n  }\n  /**\n   * insert data, add ids\n   * @param  {Array} dataList    []\n   * @param  {Object} model       []\n   * @param  {String} unqiueField []\n   * @return {Promise}             []\n   */\n  async _getRalationAddIds(dataList, model, unqiueField){\n    let ids = [];\n    let pk = await model.getPk();\n    let promises = dataList.map(item => {\n      if (!think.isObject(item)) {\n        item = {[unqiueField]: item};\n      }\n      let value = item[unqiueField];\n      let where = {[unqiueField]: value};\n      return model.where(where).field(pk).find().then(data => {\n        if (think.isEmpty(data)) {\n          return model.add(item).then(insertId => {\n            ids.push(insertId);\n          });\n        }else{\n          ids.push(data[pk]);\n        }\n      });\n    });\n    await Promise.all(promises);\n    return ids;\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/template/bootstrap/global.js":"/**\n * this file will be loaded before server started\n * you can define global functions used in controllers, models, templates\n */\n\n/**\n * use global.xxx to define global functions\n * \n * global.fn1 = function(){\n *     \n * }\n */","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/template/controller/rest.js":"'use strict';\n/**\n * rest controller\n * @type {Class}\n */\nmodule.exports = think.controller('rest', {\n  /**\n   * init\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  init(http){\n    this.super('init', http);\n  },\n  /**\n   * before magic method\n   * @return {Promise} []\n   */\n  __before: function(){\n    \n  }\n});","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/template/model/relation.js":"'use strict';\n/**\n * relation model\n * @type {Class}\n */\nmodule.exports = think.model('relation', {\n  /**\n   * init\n   * @return {} []\n   */\n  init(){\n    this.super('init', arguments);\n    this.relation = {\n      \n    }\n  }\n});","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/template/www/development.js":"var thinkjs = require('thinkjs');\nvar path = require('path');\n\nvar rootPath = path.dirname(__dirname);\n\nvar instance = new thinkjs({\n  APP_PATH: rootPath + path.sep + 'app',\n  RUNTIME_PATH: rootPath + path.sep + 'runtime',\n  ROOT_PATH: rootPath,\n  RESOURCE_PATH: __dirname,\n  env: 'development'\n});\n\ninstance.run();","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/locale/en.js":"'use strict';\n\nexports.__esModule = true;\n/**\n * error message\n * @type {Object}\n */\nexports.default = {\n  CONTROLLER_NOT_FOUND: 'controller `%s` not found. url is `%s`.',\n  CONTROLLER_INVALID: 'controller `%s` is not valid. url is `%s`',\n  ACTION_NOT_FOUND: 'action `%s` not found. url is `%s`',\n  ACTION_INVALID: 'action `%s` is not valid. url is `%s`',\n  WORKER_DIED: 'worker `%d` died, it will auto restart.',\n  MIDDLEWARE_NOT_FOUND: 'middleware `%s` not found',\n  ADAPTER_NOT_FOUND: 'adapter `%s` not found',\n  GCTYPE_MUST_SET: 'instance must have gcType property',\n  CONFIG_NOT_FUNCTION: 'config `%s` is not a function',\n  CONFIG_NOT_VALID: 'config `%s` is not valid',\n  PATH_EMPTY: '`%s` path muse be set',\n  PATH_NOT_EXIST: '`%s` is not exist',\n  TEMPLATE_NOT_EXIST: 'can\\'t find template file `%s`',\n  PARAMS_EMPTY: 'params `%s` value can\\'t empty',\n  PARAMS_NOT_VALID: 'params `{name}` value not valid',\n  FIELD_KEY_NOT_VALID: 'field `%s` in where condition is not valid',\n  DATA_EMPTY: 'data can not be empty',\n  MISS_WHERE_CONDITION: 'miss where condition',\n  INVALID_WHERE_CONDITION_KEY: 'where condition key is not valid',\n  WHERE_CONDITION_INVALID: 'where condition `%s`:`%s` is not valid',\n  TABLE_NO_COLUMNS: 'table `%s` has no columns',\n  NOT_SUPPORT_TRANSACTION: 'table engine is not support transaction',\n  DATA_MUST_BE_ARRAY: 'data is not an array list',\n  PARAMS_TYPE_INVALID: 'params `{name}` type invalid',\n  DISALLOW_PORT: 'proxy on, cannot visit with port',\n  SERVICE_UNAVAILABLE: 'Service Unavailable',\n  URL_HAS_UPPERCASE: 'url has uppercases(%s), auto convert to lowercase.',\n  METHOD_NOT_ALLOWED: 'request method is not allowed.',\n  METHOD_NOT_EXIST: 'method %s not exist',\n\n  validate_required: '{name} can not be blank',\n  validate_contains: '{name} need contains {args}',\n  validate_equals: '{name} need match {args}',\n  validate_different: '{name} need not match {args}',\n  validate_after: '{name} need a date that\\'s after the {args} (defaults to now)',\n  validate_alpha: '{name} need contains only letters (a-zA-Z)',\n  validate_alphaDash: '{name} need contains only letters and dashes(a-zA-Z_)',\n  validate_alphaNumeric: '{name} need contains only letters and numeric(a-zA-Z0-9)',\n  validate_alphaNumericDash: '{name} need contains only letters, numeric and dash(a-zA-Z0-9_)',\n  validate_ascii: '{name} need contains ASCII chars only',\n  validate_base64: '{name} need a valid base64 encoded',\n  validate_before: '{name} need a date that\\'s before the {args} (defaults to now)',\n  validate_byteLength: '{name} need length (in bytes) falls in {args}',\n  validate_creditcard: '{name} need a valid credit card',\n  validate_currency: '{name} need a valid currency amount',\n  validate_date: '{name} need a date',\n  validate_decimal: '{name} need a decimal number',\n  validate_divisibleBy: '{name} need a number that\\'s divisible by {args}',\n  validate_email: '{name} need an email',\n  validate_fqdn: '{name} need a fully qualified domain name',\n  validate_float: '{name} need a float in {args}',\n  validate_fullWidth: '{name} need contains any full-width chars',\n  validate_halfWidth: '{name} need contains any half-width chars',\n  validate_hexColor: '{name} need a hexadecimal color',\n  validate_hex: '{name} need a hexadecimal number',\n  validate_ip: '{name} need an IP (version 4 or 6)',\n  validate_ip4: '{name} need an IP (version 4)',\n  validate_ip6: '{name} need an IP (version 6)',\n  validate_isbn: '{name} need an ISBN (version 10 or 13)',\n  validate_isin: '{name} need an ISIN (stock/security identifier)',\n  validate_iso8601: '{name} need a valid ISO 8601 date',\n  validate_in: '{name} need in an array of {args}',\n  validate_notIn: '{name} need not in an array of {args}',\n  validate_int: '{name} need an integer',\n  validate_min: '{name} need an integer greater than {args}',\n  validate_max: '{name} need an integer less than {args}',\n  validate_length: '{name} need length falls in {args}',\n  validate_minLength: '{name} need length is max than {args}',\n  validate_maxLength: '{name} need length is min than {args}',\n  validate_lowercase: '{name} need is lowercase',\n  validate_mobile: '{name} need is a mobile phone number',\n  validate_mongoId: '{name} need is a valid hex-encoded representation of a MongoDB ObjectId',\n  validate_multibyte: '{name} need contains one or more multibyte chars',\n  validate_url: '{name} need an URL',\n  validate_uppercase: '{name} need uppercase',\n  validate_variableWidth: '{name} need contains a mixture of full and half-width chars',\n  validate_order: '{name} need a valid sql order string',\n  validate_field: '{name} need a valid sql field string',\n  validate_image: '{name} need a valid image file',\n  validate_startWith: '{name} need start with {args}',\n  validate_endWidth: '{name} need end with {args}',\n  validate_string: '{name} need a string',\n  validate_array: '{name} need an array',\n  validate_boolean: '{name} need a boolean',\n  validate_object: '{name} need an object'\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/env/development.js":"\"use strict\";\n\nexports.__esModule = true;\n/**\n * configs in development enviroment\n * @type {Object}\n */\nvar configs = {\n  auto_reload: true,\n  log_request: true,\n  gc: {\n    on: false\n  },\n  error: {\n    detail: true\n  },\n  db: {\n    log_sql: true,\n    log_connect: true,\n    schema_force_update: true\n  },\n  post: {\n    log_error: true\n  }\n};\n\nif (think.cli) {\n  configs = think.extend(configs, {\n    auto_reload: false,\n    process_timeout: 0\n  });\n}\n\nexports.default = configs;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/sys/transform.js":"'use strict';\n\n/**\n * get function\n * @param  {mixed} value  []\n * @param  {String} config []\n * @return {}        []\n */\n\nexports.__esModule = true;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getFn = function getFn(value, config) {\n  if (!value || think.isFunction(value)) {\n    return value;\n  }\n  value = global[value];\n  if (think.isFunction(value)) {\n    return value;\n  }\n  var msg = think.locale('CONFIG_NOT_FUNCTION', config);\n  throw new Error(msg);\n};\n/**\n * config transform\n * @type {Object}\n */\nexports.default = {\n  post: {\n    /**\n     * json content type list\n     * @param  {Array} value []\n     * @return {Array}       []\n     */\n    json_content_type: function json_content_type(value) {\n      if (think.isString(value)) {\n        return [value];\n      }\n      if (!think.isArray(value)) {\n        var msg = think.locale('CONFIG_NOT_VALID', 'post.json_content_type');\n        throw new Error(msg);\n      }\n      return value;\n    }\n  },\n  /**\n   * sub doamin deploy\n   * @param  {Object} value []\n   * @return {Object}       []\n   */\n  subdomain: function subdomain(value) {\n    if (think.isString(value)) {\n      return { value: value };\n    }\n    if (think.isArray(value)) {\n      var _ret = function () {\n        var obj = {};\n        value.forEach(function (item) {\n          obj[item] = item;\n        });\n        return {\n          v: obj\n        };\n      }();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === \"object\") return _ret.v;\n    }\n    if (!think.isObject(value)) {\n      var msg = think.locale('CONFIG_NOT_VALID', 'subdomain');\n      throw new Error(msg);\n    }\n    return value;\n  },\n  /**\n   * deby module list\n   * @param  {Array} value []\n   * @return {Array}       []\n   */\n  deny_module_list: function deny_module_list(value) {\n    if (think.isString(value)) {\n      return [value];\n    }\n    if (!think.isArray(value)) {\n      var msg = think.locale('CONFIG_NOT_VALID', 'deny_module_list');\n      throw new Error(msg);\n    }\n    return value;\n  },\n  /**\n   * output content\n   * @param  {String} value []\n   * @return {Function}       []\n   */\n  output_content: function output_content(value) {\n    return getFn(value, 'output_content');\n  },\n  /**\n   * create server\n   * @param  {String} value []\n   * @return {Function}       []\n   */\n  create_server: function create_server(value) {\n    return getFn(value, 'create_server');\n  },\n  /**\n   * cache config\n   * @type {Object}\n   */\n  cache: {\n    type: function type(value) {\n      return value.toLowerCase();\n    }\n  },\n  /**\n   * session config\n   * @type {Object}\n   */\n  session: {\n    type: function type(value) {\n      return value.toLowerCase();\n    }\n  }\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/sys/alias.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar sep = _path2.default.sep; /**\n                               * thinkjs module path config\n                               * @type {Object}\n                               */\n\nvar rootPath = think.THINK_LIB_PATH + sep;\n\nexports.default = {\n  base: rootPath + 'core' + sep + 'base.js',\n  app: rootPath + 'core' + sep + 'app.js',\n  http: rootPath + 'core' + sep + 'http.js',\n  view: rootPath + 'core' + sep + 'view.js',\n  // auth: `${rootPath}util${sep}auth.js`,\n  cookie: rootPath + 'util' + sep + 'cookie.js',\n  validator: rootPath + 'util' + sep + 'validator.js',\n  await: rootPath + 'util' + sep + 'await.js',\n  parallel_limit: rootPath + 'util' + sep + 'parallel_limit.js'\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/middleware/base.js":"'use strict';\n/**\n * behavior abstract class\n * @return {} []\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$http$base) {\n  (0, _inherits3.default)(_class, _think$http$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$http$base.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function run() {};\n\n  return _class;\n}(think.http.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/model/base.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _base = require('./_base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar config = think.config('db');\n\n/**\n * model base class\n * @type {Class}\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * get table schema\n   * @param  {String} table [table name]\n   * @return {}       []\n   */\n  _class.prototype.getSchema = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(table) {\n      var storeKey, schema, name;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              table = table || this.getTableName();\n              storeKey = this.config.type + '_' + table + '_schema';\n              schema = {};\n              //force update table schema\n\n              if (!this.config.schema_force_update) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return this.db().getSchema(table);\n\n            case 6:\n              schema = _context.sent;\n              _context.next = 15;\n              break;\n\n            case 9:\n              schema = thinkCache(thinkCache.TABLE, storeKey);\n\n              if (schema) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 13;\n              return this.db().getSchema(table);\n\n            case 13:\n              schema = _context.sent;\n\n              thinkCache(thinkCache.TABLE, storeKey, schema);\n\n            case 15:\n              if (!(table !== this.getTableName())) {\n                _context.next = 17;\n                break;\n              }\n\n              return _context.abrupt('return', schema);\n\n            case 17:\n              _context.t0 = _regenerator2.default.keys(schema);\n\n            case 18:\n              if ((_context.t1 = _context.t0()).done) {\n                _context.next = 25;\n                break;\n              }\n\n              name = _context.t1.value;\n\n              if (!schema[name].primary) {\n                _context.next = 23;\n                break;\n              }\n\n              this.pk = name;\n              return _context.abrupt('break', 25);\n\n            case 23:\n              _context.next = 18;\n              break;\n\n            case 25:\n              //merge user set schema config\n              this.schema = think.extend({}, schema, this.schema);\n              return _context.abrupt('return', this.schema);\n\n            case 27:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getSchema(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return getSchema;\n  }();\n  /**\n   * get table fields\n   * @param  {String} table []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.getTableFields = function getTableFields(table) {\n    think.log('model.getTableFields is deprecated, use model.getSchema instead.', 'WARNING');\n    return this.getSchema(table);\n  };\n  /**\n   * get unique field\n   * @param  {Object} data []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.getUniqueField = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(data) {\n      var schema, name;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getSchema();\n\n            case 2:\n              schema = _context2.sent;\n              _context2.t0 = _regenerator2.default.keys(schema);\n\n            case 4:\n              if ((_context2.t1 = _context2.t0()).done) {\n                _context2.next = 10;\n                break;\n              }\n\n              name = _context2.t1.value;\n\n              if (!(schema[name].unique && (!data || data[name]))) {\n                _context2.next = 8;\n                break;\n              }\n\n              return _context2.abrupt('return', name);\n\n            case 8:\n              _context2.next = 4;\n              break;\n\n            case 10:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getUniqueField(_x2) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return getUniqueField;\n  }();\n  /**\n   * get last sql\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getLastSql = function getLastSql() {\n    return this.db().getLastSql();\n  };\n  /**\n   * get primary key\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getPk = function getPk() {\n    var _this2 = this;\n\n    if (this.pk !== 'id') {\n      return _promise2.default.resolve(this.pk);\n    }\n    return this.getSchema().then(function () {\n      return _this2.pk;\n    });\n  };\n  /**\n   * build sql\n   * @param  {[type]} options [description]\n   * @return {[type]}         [description]\n   */\n\n\n  _class.prototype.buildSql = function () {\n    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(options, noParentheses) {\n      var sql;\n      return _regenerator2.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.parseOptions(options);\n\n            case 2:\n              options = _context3.sent;\n              sql = this.db().buildSelectSql(options).trim();\n\n              if (!noParentheses) {\n                _context3.next = 6;\n                break;\n              }\n\n              return _context3.abrupt('return', sql);\n\n            case 6:\n              return _context3.abrupt('return', '( ' + sql + ' )');\n\n            case 7:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function buildSql(_x3, _x4) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return buildSql;\n  }();\n  /**\n   * parse options\n   * @param oriOpts options\n   * @param extraOptions \n   * @param flag \n   */\n\n\n  _class.prototype.parseOptions = function () {\n    var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(oriOpts, extraOptions) {\n      var flag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      var options, schema, keyReg, key, msg, camelCase, keyArray, _iterator, _isArray, _i, _ref5, _key, fields, _iterator2, _isArray2, _i2, _ref6, field, where, _keyArray, _iterator3, _isArray3, _i3, _ref7, _key2;\n\n      return _regenerator2.default.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              options = think.extend({}, this._options);\n\n              if (think.isObject(oriOpts)) {\n                options = think.extend(options, oriOpts);\n              }\n              if (extraOptions) {\n                options = think.extend(options, extraOptions);\n              }\n              //clear options\n              this._options = {};\n              //get table name\n              options.table = options.table || this.getTableName();\n\n              options.tablePrefix = this.getTablePrefix();\n              options.model = this.getModelName();\n\n              //get table schema can not use table alias\n              _context4.next = 9;\n              return this.getSchema(options.table);\n\n            case 9:\n              schema = _context4.sent;\n\n\n              //table alias\n              if (options.alias) {\n                options.table += ' AS ' + options.alias;\n              }\n\n              if (oriOpts !== undefined && !think.isObject(oriOpts)) {\n                options = think.extend(options, this.parseWhereOptions(oriOpts));\n              }\n              //check where key\n\n              if (!(options.where && !think.isEmpty(schema))) {\n                _context4.next = 22;\n                break;\n              }\n\n              keyReg = /^[\\w\\.\\|\\&]+$/;\n              _context4.t0 = _regenerator2.default.keys(options.where);\n\n            case 15:\n              if ((_context4.t1 = _context4.t0()).done) {\n                _context4.next = 22;\n                break;\n              }\n\n              key = _context4.t1.value;\n\n              if (keyReg.test(key)) {\n                _context4.next = 20;\n                break;\n              }\n\n              msg = new Error(think.locale('FIELD_KEY_NOT_VALID', key));\n              return _context4.abrupt('return', think.reject(msg));\n\n            case 20:\n              _context4.next = 15;\n              break;\n\n            case 22:\n\n              //field reverse\n              if (options.field && options.fieldReverse) {\n                (function () {\n                  //reset fieldReverse value\n                  options.fieldReverse = false;\n                  var optionsField = options.field;\n                  options.field = (0, _keys2.default)(schema).filter(function (item) {\n                    if (optionsField.indexOf(item) === -1) {\n                      return item;\n                    }\n                  });\n                })();\n              }\n\n              if (!flag) {\n                _context4.next = 82;\n                break;\n              }\n\n              camelCase = config.camel_case || false;\n\n              if (!camelCase) {\n                _context4.next = 82;\n                break;\n              }\n\n              if (!think.isEmpty(options.field)) {\n                _context4.next = 46;\n                break;\n              }\n\n              options.field = [];\n              keyArray = (0, _keys2.default)(schema);\n              _iterator = keyArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);\n\n            case 30:\n              if (!_isArray) {\n                _context4.next = 36;\n                break;\n              }\n\n              if (!(_i >= _iterator.length)) {\n                _context4.next = 33;\n                break;\n              }\n\n              return _context4.abrupt('break', 44);\n\n            case 33:\n              _ref5 = _iterator[_i++];\n              _context4.next = 40;\n              break;\n\n            case 36:\n              _i = _iterator.next();\n\n              if (!_i.done) {\n                _context4.next = 39;\n                break;\n              }\n\n              return _context4.abrupt('break', 44);\n\n            case 39:\n              _ref5 = _i.value;\n\n            case 40:\n              _key = _ref5;\n\n              options.field.push(_util2.default.format('`%s` AS `%s`', _key, think.camelCase(_key)));\n\n            case 42:\n              _context4.next = 30;\n              break;\n\n            case 44:\n              _context4.next = 63;\n              break;\n\n            case 46:\n              // make field camelCase\n              fields = options.field;\n\n              options.field = [];\n              _iterator2 = fields, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);\n\n            case 49:\n              if (!_isArray2) {\n                _context4.next = 55;\n                break;\n              }\n\n              if (!(_i2 >= _iterator2.length)) {\n                _context4.next = 52;\n                break;\n              }\n\n              return _context4.abrupt('break', 63);\n\n            case 52:\n              _ref6 = _iterator2[_i2++];\n              _context4.next = 59;\n              break;\n\n            case 55:\n              _i2 = _iterator2.next();\n\n              if (!_i2.done) {\n                _context4.next = 58;\n                break;\n              }\n\n              return _context4.abrupt('break', 63);\n\n            case 58:\n              _ref6 = _i2.value;\n\n            case 59:\n              field = _ref6;\n\n              options.field.push(_util2.default.format('`%s` AS `%s`', field, think.camelCase(field)));\n\n            case 61:\n              _context4.next = 49;\n              break;\n\n            case 63:\n\n              // make field camelCase in where condition\n              where = options.where;\n\n              options.where = {};\n\n              if (think.isEmpty(where)) {\n                _context4.next = 82;\n                break;\n              }\n\n              _keyArray = (0, _keys2.default)(where);\n              _iterator3 = _keyArray, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);\n\n            case 68:\n              if (!_isArray3) {\n                _context4.next = 74;\n                break;\n              }\n\n              if (!(_i3 >= _iterator3.length)) {\n                _context4.next = 71;\n                break;\n              }\n\n              return _context4.abrupt('break', 82);\n\n            case 71:\n              _ref7 = _iterator3[_i3++];\n              _context4.next = 78;\n              break;\n\n            case 74:\n              _i3 = _iterator3.next();\n\n              if (!_i3.done) {\n                _context4.next = 77;\n                break;\n              }\n\n              return _context4.abrupt('break', 82);\n\n            case 77:\n              _ref7 = _i3.value;\n\n            case 78:\n              _key2 = _ref7;\n\n              options.where[think.snakeCase(_key2)] = where[_key2];\n\n            case 80:\n              _context4.next = 68;\n              break;\n\n            case 82:\n              return _context4.abrupt('return', this.optionsFilter(options, schema));\n\n            case 83:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function parseOptions(_x5, _x6, _x7) {\n      return _ref4.apply(this, arguments);\n    }\n\n    return parseOptions;\n  }();\n  /**\n   * parse where options\n   * @return {Object}\n   */\n\n\n  _class.prototype.parseWhereOptions = function parseWhereOptions(options) {\n    if (think.isNumber(options) || think.isString(options)) {\n      var _where;\n\n      options += '';\n      var where = (_where = {}, _where[this.pk] = options.indexOf(',') > -1 ? { IN: options } : options, _where);\n      return { where: where };\n    }\n    return options;\n  };\n  /**\n   * parse type\n   * @param  {Object} data []\n   * @param  {} key  []\n   * @return {}      []\n   */\n\n\n  _class.prototype.parseType = function parseType(key, value) {\n    var fieldType = (this.schema[key].type || '').toLowerCase();\n    if (fieldType.indexOf('enum') > -1 || fieldType.indexOf('set') > -1) {\n      return value;\n    }\n    if (fieldType.indexOf('bigint') === -1 && fieldType.indexOf('int') > -1) {\n      return parseInt(value, 10) || 0;\n    } else if (fieldType.indexOf('double') > -1 || fieldType.indexOf('float') > -1 || fieldType.indexOf('decimal') > -1) {\n      return parseFloat(value) || 0.0;\n    } else if (fieldType.indexOf('bool') > -1) {\n      return !!value;\n    }\n    return value;\n  };\n  /**\n   * parse data, after fields getted\n   * @param  {} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.parseData = function parseData(data) {\n    var camelCase = config.camel_case;\n    if (camelCase) {\n      var tmpData = think.extend({}, data);\n      data = {};\n      var keyArray = (0, _keys2.default)(tmpData);\n      for (var _iterator4 = keyArray, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {\n        var _ref8;\n\n        if (_isArray4) {\n          if (_i4 >= _iterator4.length) break;\n          _ref8 = _iterator4[_i4++];\n        } else {\n          _i4 = _iterator4.next();\n          if (_i4.done) break;\n          _ref8 = _i4.value;\n        }\n\n        var key = _ref8;\n\n        data[think.snakeCase(key)] = tmpData[key];\n      }\n    }\n    //deep clone data\n    data = think.extend({}, data);\n    for (var _key3 in data) {\n      var val = data[_key3];\n      //remove data not in fields\n      if (!this.schema[_key3]) {\n        delete data[_key3];\n      } else if (think.isNumber(val) || think.isString(val) || think.isBoolean(val)) {\n        data[_key3] = this.parseType(_key3, val);\n      }\n    }\n    return this.dataFilter(data);\n  };\n  /**\n   * add data\n   * @param {Object} data    []\n   * @param {Object} options []\n   * @param {} replace []\n   */\n\n\n  _class.prototype.add = function () {\n    var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(data, options, replace) {\n      var _think$extend;\n\n      var parsedData, msg, db, insertId, copyData;\n      return _regenerator2.default.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (options === true) {\n                replace = true;\n                options = {};\n              }\n              //copy data\n              data = think.extend({}, this._data, data);\n              //clear data\n              this._data = {};\n\n              _context5.next = 5;\n              return this.parseOptions(options, {}, true);\n\n            case 5:\n              options = _context5.sent;\n              parsedData = this.parseData(data);\n              _context5.next = 9;\n              return this.beforeAdd(parsedData, options);\n\n            case 9:\n              parsedData = _context5.sent;\n\n              if (!think.isEmpty(parsedData)) {\n                _context5.next = 13;\n                break;\n              }\n\n              msg = new Error(think.locale('DATA_EMPTY'));\n              return _context5.abrupt('return', think.reject(msg));\n\n            case 13:\n              db = this.db();\n              _context5.next = 16;\n              return db.add(parsedData, options, replace);\n\n            case 16:\n              insertId = parsedData[this.pk] = db.getLastInsertId();\n              copyData = think.extend({}, data, parsedData, (_think$extend = {}, _think$extend[this.pk] = insertId, _think$extend));\n              _context5.next = 20;\n              return this.afterAdd(copyData, options);\n\n            case 20:\n              return _context5.abrupt('return', insertId);\n\n            case 21:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function add(_x9, _x10, _x11) {\n      return _ref9.apply(this, arguments);\n    }\n\n    return add;\n  }();\n  /**\n   * add data when not exist\n   * @param  {Object} data       []\n   * @param  {Object} where      []\n   * @return {}            []\n   */\n\n\n  _class.prototype.thenAdd = function () {\n    var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(data, where) {\n      var _ref12;\n\n      var findData, _ref11, insertId;\n\n      return _regenerator2.default.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.where(where).find();\n\n            case 2:\n              findData = _context6.sent;\n\n              if (think.isEmpty(findData)) {\n                _context6.next = 5;\n                break;\n              }\n\n              return _context6.abrupt('return', (_ref11 = {}, _ref11[this.pk] = findData[this.pk], _ref11.type = 'exist', _ref11));\n\n            case 5:\n              _context6.next = 7;\n              return this.add(data);\n\n            case 7:\n              insertId = _context6.sent;\n              return _context6.abrupt('return', (_ref12 = {}, _ref12[this.pk] = insertId, _ref12.type = 'add', _ref12));\n\n            case 9:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function thenAdd(_x12, _x13) {\n      return _ref10.apply(this, arguments);\n    }\n\n    return thenAdd;\n  }();\n  /**\n   * update data when exist, otherwise add data\n   * @return {id}\n   */\n\n\n  _class.prototype.thenUpdate = function () {\n    var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(data, where) {\n      var findData;\n      return _regenerator2.default.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.where(where).find();\n\n            case 2:\n              findData = _context7.sent;\n\n              if (!think.isEmpty(findData)) {\n                _context7.next = 5;\n                break;\n              }\n\n              return _context7.abrupt('return', this.add(data));\n\n            case 5:\n              _context7.next = 7;\n              return this.where(where).update(data);\n\n            case 7:\n              return _context7.abrupt('return', findData[this.pk]);\n\n            case 8:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function thenUpdate(_x14, _x15) {\n      return _ref13.apply(this, arguments);\n    }\n\n    return thenUpdate;\n  }();\n  /**\n   * add multi data\n   * @param {Object} data    []\n   * @param {} options []\n   * @param {} replace []\n   */\n\n\n  _class.prototype.addMany = function () {\n    var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(data, options, replace) {\n      var _this3 = this;\n\n      var promises, db, insertId, insertIds;\n      return _regenerator2.default.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(!think.isArray(data) || !think.isObject(data[0]))) {\n                _context8.next = 2;\n                break;\n              }\n\n              return _context8.abrupt('return', think.reject(new Error(think.locale('DATA_MUST_BE_ARRAY'))));\n\n            case 2:\n              if (options === true) {\n                replace = true;\n                options = {};\n              }\n              _context8.next = 5;\n              return this.parseOptions(options, {}, true);\n\n            case 5:\n              options = _context8.sent;\n              promises = data.map(function (item) {\n                item = _this3.parseData(item);\n                return _this3.beforeAdd(item, options);\n              });\n              _context8.next = 9;\n              return _promise2.default.all(promises);\n\n            case 9:\n              data = _context8.sent;\n              db = this.db();\n              _context8.next = 13;\n              return db.addMany(data, options, replace);\n\n            case 13:\n              insertId = db.getLastInsertId();\n              insertIds = [];\n\n              promises = data.map(function (item, i) {\n                var id = insertId + i;\n                if (_this3.config.type === 'sqlite') {\n                  id = insertId - data.length + i + 1;\n                }\n                item[_this3.pk] = id;\n                insertIds.push(id);\n                return _this3.afterAdd(item, options);\n              });\n              _context8.next = 18;\n              return _promise2.default.all(promises);\n\n            case 18:\n              data = _context8.sent;\n              return _context8.abrupt('return', insertIds);\n\n            case 20:\n            case 'end':\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function addMany(_x16, _x17, _x18) {\n      return _ref14.apply(this, arguments);\n    }\n\n    return addMany;\n  }();\n  /**\n   * delete data\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.delete = function () {\n    var _ref15 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(options) {\n      var rows;\n      return _regenerator2.default.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.parseOptions(options, {}, true);\n\n            case 2:\n              options = _context9.sent;\n              _context9.next = 5;\n              return this.beforeDelete(options);\n\n            case 5:\n              options = _context9.sent;\n              _context9.next = 8;\n              return this.db().delete(options);\n\n            case 8:\n              rows = _context9.sent;\n              _context9.next = 11;\n              return this.afterDelete(options);\n\n            case 11:\n              return _context9.abrupt('return', rows);\n\n            case 12:\n            case 'end':\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function _delete(_x19) {\n      return _ref15.apply(this, arguments);\n    }\n\n    return _delete;\n  }();\n  /**\n   * update data\n   * @param  {Object} data      []\n   * @param  {Object} options   []\n   * @param  {Boolean} ignoreWhere []\n   * @return {Promise}          []\n   */\n\n\n  _class.prototype.update = function () {\n    var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(data, options) {\n      var parsedData, pk, _options$where, rows, copyData;\n\n      return _regenerator2.default.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n\n              data = think.extend({}, this._data, data);\n              //clear data\n              this._data = {};\n\n              _context10.next = 4;\n              return this.parseOptions(options, {}, true);\n\n            case 4:\n              options = _context10.sent;\n              parsedData = this.parseData(data);\n\n              //check where condition\n\n              if (!think.isEmpty(options.where)) {\n                _context10.next = 16;\n                break;\n              }\n\n              _context10.next = 9;\n              return this.getPk();\n\n            case 9:\n              pk = _context10.sent;\n\n              if (!parsedData[pk]) {\n                _context10.next = 15;\n                break;\n              }\n\n              options.where = (_options$where = {}, _options$where[pk] = parsedData[pk], _options$where);\n              delete parsedData[pk];\n              _context10.next = 16;\n              break;\n\n            case 15:\n              return _context10.abrupt('return', think.reject(new Error(think.locale('MISS_WHERE_CONDITION'))));\n\n            case 16:\n              _context10.next = 18;\n              return this.beforeUpdate(parsedData, options);\n\n            case 18:\n              parsedData = _context10.sent;\n\n              if (!think.isEmpty(parsedData)) {\n                _context10.next = 21;\n                break;\n              }\n\n              return _context10.abrupt('return', think.reject(new Error(think.locale('DATA_EMPTY'))));\n\n            case 21:\n              _context10.next = 23;\n              return this.db().update(parsedData, options);\n\n            case 23:\n              rows = _context10.sent;\n              copyData = think.extend({}, data, parsedData);\n              _context10.next = 27;\n              return this.afterUpdate(copyData, options);\n\n            case 27:\n              return _context10.abrupt('return', rows);\n\n            case 28:\n            case 'end':\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function update(_x20, _x21) {\n      return _ref16.apply(this, arguments);\n    }\n\n    return update;\n  }();\n  /**\n   * update all data\n   * @param  {Array} dataList []\n   * @return {Promise}          []\n   */\n\n\n  _class.prototype.updateMany = function updateMany(dataList, options) {\n    var _this4 = this;\n\n    if (!think.isArray(dataList)) {\n      //empty data and options\n      this._options = {};\n      this._data = {};\n\n      return think.reject(new Error(think.locale('DATA_MUST_BE_ARRAY')));\n    }\n    var promises = dataList.map(function (data) {\n      return _this4.update(data, options);\n    });\n    return _promise2.default.all(promises).then(function (data) {\n      return data.reduce(function (a, b) {\n        return a + b;\n      });\n    });\n  };\n  /**\n   * increment field data\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.increment = function increment(field) {\n    var _data;\n\n    var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    var data = (_data = {}, _data[field] = ['exp', '`' + field + '`+' + step], _data);\n    return this.update(data);\n  };\n  /**\n   * decrement field data\n   * @return {} []\n   */\n\n\n  _class.prototype.decrement = function decrement(field) {\n    var _data2;\n\n    var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    var data = (_data2 = {}, _data2[field] = ['exp', '`' + field + '`-' + step], _data2);\n    return this.update(data);\n  };\n  /**\n   * find data\n   * @return Promise\n   */\n\n\n  _class.prototype.find = function () {\n    var _ref17 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(options) {\n      var data;\n      return _regenerator2.default.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return this.parseOptions(options, { limit: 1 }, true);\n\n            case 2:\n              options = _context11.sent;\n              _context11.next = 5;\n              return this.beforeFind(options);\n\n            case 5:\n              options = _context11.sent;\n              _context11.next = 8;\n              return this.db().select(options);\n\n            case 8:\n              data = _context11.sent;\n              return _context11.abrupt('return', this.afterFind(data[0] || {}, options));\n\n            case 10:\n            case 'end':\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function find(_x24) {\n      return _ref17.apply(this, arguments);\n    }\n\n    return find;\n  }();\n  /**\n   * select\n   * @return Promise\n   */\n\n\n  _class.prototype.select = function () {\n    var _ref18 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12(options) {\n      var data;\n      return _regenerator2.default.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return this.parseOptions(options, {}, true);\n\n            case 2:\n              options = _context12.sent;\n              _context12.next = 5;\n              return this.beforeSelect(options);\n\n            case 5:\n              options = _context12.sent;\n              _context12.next = 8;\n              return this.db().select(options);\n\n            case 8:\n              data = _context12.sent;\n              return _context12.abrupt('return', this.afterSelect(data, options));\n\n            case 10:\n            case 'end':\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function select(_x25) {\n      return _ref18.apply(this, arguments);\n    }\n\n    return select;\n  }();\n  /**\n   * select add\n   * @param  {} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.selectAdd = function () {\n    var _ref19 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(options) {\n      var promise, Class, data, fields;\n      return _regenerator2.default.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              promise = _promise2.default.resolve(options);\n              Class = module.exports.default || module.exports;\n\n              if (options instanceof Class) {\n                promise = options.parseOptions();\n              }\n              _context13.next = 5;\n              return _promise2.default.all([this.parseOptions(), promise]);\n\n            case 5:\n              data = _context13.sent;\n              fields = data[0].field || (0, _keys2.default)(this.schema);\n              return _context13.abrupt('return', this.db().selectAdd(fields, data[0].table, data[1]));\n\n            case 8:\n            case 'end':\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function selectAdd(_x26) {\n      return _ref19.apply(this, arguments);\n    }\n\n    return selectAdd;\n  }();\n  /**\n   * count select\n   * @param  options\n   * @param  pageFlag\n   * @return promise\n   */\n\n\n  _class.prototype.countSelect = function () {\n    var _ref20 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(options, pageFlag) {\n      var count, pk, table, order, numsPerPage, data, totalPage, result;\n      return _regenerator2.default.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              count = void 0;\n\n              if (think.isBoolean(options)) {\n                pageFlag = options;\n                options = {};\n              } else if (think.isNumber(options)) {\n                count = options;\n                options = {};\n              }\n\n              _context14.next = 4;\n              return this.parseOptions(options);\n\n            case 4:\n              options = _context14.sent;\n              pk = this.pk;\n              table = options.alias || this.getTableName();\n\n              //delete table options avoid error when has alias\n\n              delete options.table;\n              //reserve and delete the possible order option\n              order = options.order;\n\n              delete options.order;\n\n              if (count) {\n                _context14.next = 14;\n                break;\n              }\n\n              _context14.next = 13;\n              return this.options(options).count(table + '.' + pk);\n\n            case 13:\n              count = _context14.sent;\n\n            case 14:\n\n              options.limit = options.limit || [0, this.config.nums_per_page];\n              //recover the deleted possible order\n              options.order = order;\n              numsPerPage = options.limit[1];\n              //get page options\n\n              data = { numsPerPage: numsPerPage };\n              totalPage = Math.ceil(count / data.numsPerPage);\n\n\n              data.currentPage = parseInt(options.limit[0] / options.limit[1] + 1);\n\n              if (think.isBoolean(pageFlag) && data.currentPage > totalPage) {\n                if (pageFlag) {\n                  data.currentPage = 1;\n                  options.limit = [0, numsPerPage];\n                } else {\n                  data.currentPage = totalPage;\n                  options.limit = [(totalPage - 1) * numsPerPage, numsPerPage];\n                }\n              }\n              result = think.extend({ count: count, totalPages: totalPage }, data);\n\n\n              if (options.cache && options.cache.key) {\n                options.cache.key += '_count';\n              }\n\n              if (!count) {\n                _context14.next = 29;\n                break;\n              }\n\n              _context14.next = 26;\n              return this.select(options);\n\n            case 26:\n              _context14.t0 = _context14.sent;\n              _context14.next = 30;\n              break;\n\n            case 29:\n              _context14.t0 = [];\n\n            case 30:\n              result.data = _context14.t0;\n              return _context14.abrupt('return', result);\n\n            case 32:\n            case 'end':\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function countSelect(_x27, _x28) {\n      return _ref20.apply(this, arguments);\n    }\n\n    return countSelect;\n  }();\n  /**\n   * get field data\n   * @return {[type]} [description]\n   */\n\n\n  _class.prototype.getField = function () {\n    var _ref21 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee15(field, one) {\n      var options, data, multi, _ret2;\n\n      return _regenerator2.default.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.parseOptions({ 'field': field });\n\n            case 2:\n              options = _context15.sent;\n\n              if (think.isNumber(one)) {\n                options.limit = one;\n              } else if (one === true) {\n                options.limit = 1;\n              }\n              _context15.next = 6;\n              return this.db().select(options);\n\n            case 6:\n              data = _context15.sent;\n              multi = field.indexOf(',') > -1 && field.indexOf('(') === -1;\n\n              if (!multi) {\n                _context15.next = 14;\n                break;\n              }\n\n              _ret2 = function () {\n                var fields = field.split(/\\s*,\\s*/);\n                var result = {};\n                fields.forEach(function (item) {\n                  return result[item] = [];\n                });\n                data.every(function (item) {\n                  fields.forEach(function (fItem) {\n                    if (one === true) {\n                      result[fItem] = item[fItem];\n                    } else {\n                      result[fItem].push(item[fItem]);\n                    }\n                  });\n                  return one !== true;\n                });\n                return {\n                  v: result\n                };\n              }();\n\n              if (!((typeof _ret2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret2)) === \"object\")) {\n                _context15.next = 12;\n                break;\n              }\n\n              return _context15.abrupt('return', _ret2.v);\n\n            case 12:\n              _context15.next = 16;\n              break;\n\n            case 14:\n              data = data.map(function (item) {\n                for (var key in item) {\n                  return item[key];\n                }\n              });\n              return _context15.abrupt('return', one === true ? data[0] : data);\n\n            case 16:\n            case 'end':\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function getField(_x29, _x30) {\n      return _ref21.apply(this, arguments);\n    }\n\n    return getField;\n  }();\n  /**\n   * get quote field\n   * @param  {String} field []\n   * @return {String}       []\n   */\n\n\n  _class.prototype._getQuoteField = function () {\n    var _ref22 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee16(field) {\n      return _regenerator2.default.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (!field) {\n                _context16.next = 2;\n                break;\n              }\n\n              return _context16.abrupt('return', /^\\w+$/.test(field) ? '`' + field + '`' : field);\n\n            case 2:\n              _context16.next = 4;\n              return this.getPk();\n\n            case 4:\n              _context16.t0 = _context16.sent;\n\n              if (_context16.t0) {\n                _context16.next = 7;\n                break;\n              }\n\n              _context16.t0 = '*';\n\n            case 7:\n              return _context16.abrupt('return', _context16.t0);\n\n            case 8:\n            case 'end':\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function _getQuoteField(_x31) {\n      return _ref22.apply(this, arguments);\n    }\n\n    return _getQuoteField;\n  }();\n  /**\n   * get count\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.count = function () {\n    var _ref23 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee17(field) {\n      return _regenerator2.default.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return this._getQuoteField(field);\n\n            case 2:\n              field = _context17.sent;\n              return _context17.abrupt('return', this.getField('COUNT(' + field + ') AS think_count', true));\n\n            case 4:\n            case 'end':\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function count(_x32) {\n      return _ref23.apply(this, arguments);\n    }\n\n    return count;\n  }();\n  /**\n   * get sum\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.sum = function () {\n    var _ref24 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee18(field) {\n      return _regenerator2.default.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this._getQuoteField(field);\n\n            case 2:\n              field = _context18.sent;\n              return _context18.abrupt('return', this.getField('SUM(' + field + ') AS think_sum', true));\n\n            case 4:\n            case 'end':\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function sum(_x33) {\n      return _ref24.apply(this, arguments);\n    }\n\n    return sum;\n  }();\n  /**\n   * get min value\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.min = function () {\n    var _ref25 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee19(field) {\n      return _regenerator2.default.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this._getQuoteField(field);\n\n            case 2:\n              field = _context19.sent;\n              return _context19.abrupt('return', this.getField('MIN(' + field + ') AS think_min', true));\n\n            case 4:\n            case 'end':\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function min(_x34) {\n      return _ref25.apply(this, arguments);\n    }\n\n    return min;\n  }();\n  /**\n   * get max valud\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.max = function () {\n    var _ref26 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee20(field) {\n      return _regenerator2.default.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return this._getQuoteField(field);\n\n            case 2:\n              field = _context20.sent;\n              return _context20.abrupt('return', this.getField('MAX(' + field + ') AS think_max', true));\n\n            case 4:\n            case 'end':\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function max(_x35) {\n      return _ref26.apply(this, arguments);\n    }\n\n    return max;\n  }();\n  /**\n   * get value average\n   * @param  {String} field []\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.avg = function () {\n    var _ref27 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee21(field) {\n      return _regenerator2.default.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this._getQuoteField(field);\n\n            case 2:\n              field = _context21.sent;\n              return _context21.abrupt('return', this.getField('AVG(' + field + ') AS think_avg', true));\n\n            case 4:\n            case 'end':\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function avg(_x36) {\n      return _ref27.apply(this, arguments);\n    }\n\n    return avg;\n  }();\n  /**\n   * query\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.query = function query() {\n    var sql = this.parseSql.apply(this, arguments);\n    return this.db().select(sql, this._options.cache);\n  };\n  /**\n   * execute sql\n   * @param  {[type]} sql   [description]\n   * @param  {[type]} parse [description]\n   * @return {[type]}       [description]\n   */\n\n\n  _class.prototype.execute = function execute() {\n    var sql = this.parseSql.apply(this, arguments);\n    return this.db().execute(sql);\n  };\n  /**\n   * parse sql\n   * @return promise [description]\n   */\n\n\n  _class.prototype.parseSql = function parseSql() {\n    var _this5 = this;\n\n    var sql = _util2.default.format.apply(_util2.default, arguments);\n    //replace table name\n    return sql.replace(/\\s__([A-Z]+)__\\s/g, function (a, b) {\n      if (b === 'TABLE') {\n        return ' `' + _this5.getTableName() + '` ';\n      }\n      return ' `' + _this5.getTablePrefix() + b.toLowerCase() + '` ';\n    });\n  };\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.startTrans = function startTrans() {\n    return this.db(true).startTrans();\n  };\n  /**\n   * commit transcation\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.commit = function () {\n    var _ref28 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee22() {\n      var data;\n      return _regenerator2.default.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return this.db().commit();\n\n            case 2:\n              data = _context22.sent;\n\n              this.close();\n              this._db = null;\n              return _context22.abrupt('return', data);\n\n            case 6:\n            case 'end':\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function commit() {\n      return _ref28.apply(this, arguments);\n    }\n\n    return commit;\n  }();\n  /**\n   * rollback transaction\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.rollback = function () {\n    var _ref29 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee23() {\n      var data;\n      return _regenerator2.default.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return this.db().rollback();\n\n            case 2:\n              data = _context23.sent;\n\n              this.close();\n              this._db = null;\n              return _context23.abrupt('return', data);\n\n            case 6:\n            case 'end':\n              return _context23.stop();\n          }\n        }\n      }, _callee23, this);\n    }));\n\n    function rollback() {\n      return _ref29.apply(this, arguments);\n    }\n\n    return rollback;\n  }();\n  /**\n   * transaction exec functions\n   * @param  {Function} fn [exec function]\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.transaction = function () {\n    var _ref30 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee24(fn) {\n      var result;\n      return _regenerator2.default.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              result = void 0;\n              _context24.next = 3;\n              return this.startTrans();\n\n            case 3:\n              _context24.prev = 3;\n              _context24.next = 6;\n              return think.co(fn());\n\n            case 6:\n              result = _context24.sent;\n              _context24.next = 9;\n              return this.commit();\n\n            case 9:\n              _context24.next = 15;\n              break;\n\n            case 11:\n              _context24.prev = 11;\n              _context24.t0 = _context24['catch'](3);\n              _context24.next = 15;\n              return this.rollback();\n\n            case 15:\n              return _context24.abrupt('return', result);\n\n            case 16:\n            case 'end':\n              return _context24.stop();\n          }\n        }\n      }, _callee24, this, [[3, 11]]);\n    }));\n\n    function transaction(_x37) {\n      return _ref30.apply(this, arguments);\n    }\n\n    return transaction;\n  }();\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/controller/base.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * base controller class\n * all controllers will inherits this class\n */\nvar _class = function (_think$http$base) {\n  (0, _inherits3.default)(_class, _think$http$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$http$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @return {void} []\n   */\n  _class.prototype.init = function init(http) {\n    this.http = http;\n    this._baseAssigned = false;\n  };\n  /**\n   * get client ip\n   * @return {String} []\n   */\n\n\n  _class.prototype.ip = function ip() {\n    return this.http.ip();\n  };\n  /**\n   * init view instance\n   * @return {Object} []\n   */\n\n\n  _class.prototype.view = function view() {\n    return this.http.view();\n  };\n  /**\n   * get http method\n   * @return {String} []\n   */\n\n\n  _class.prototype.method = function method() {\n    return this.http.method.toLowerCase();\n  };\n  /**\n   * check http method\n   * @param  {String}  method [http method]\n   * @return {Boolean}        []\n   */\n\n\n  _class.prototype.isMethod = function isMethod(method) {\n    return this.http.method === method.toUpperCase();\n  };\n  /**\n   * check http method is get\n   * @return {Boolean} []\n   */\n\n\n  _class.prototype.isGet = function isGet() {\n    return this.http.isGet();\n  };\n  /**\n   * check http method is post\n   * @return {Boolean} []\n   */\n\n\n  _class.prototype.isPost = function isPost() {\n    return this.http.isPost();\n  };\n  /**\n   * check is ajax request\n   * @param  {String}  method [http method]\n   * @return {Boolean}        []\n   */\n\n\n  _class.prototype.isAjax = function isAjax(method) {\n    return this.http.isAjax(method);\n  };\n  /**\n   * check is websocket request\n   * @return {Boolean} []\n   */\n\n\n  _class.prototype.isWebSocket = function isWebSocket() {\n    return !!this.http.socket;\n  };\n  /**\n   * check is command line invoke\n   * @return {Boolean} []\n   */\n\n\n  _class.prototype.isCli = function isCli() {\n    return this.http.isCli();\n  };\n  /**\n   * check is jsonp\n   * @param  {String}  name [callback name]\n   * @return {Boolean}      []\n   */\n\n\n  _class.prototype.isJsonp = function isJsonp(name) {\n    return this.http.isJsonp(name);\n  };\n  /**\n   * get get params\n   * @param  {String} name [query name]\n   * @return {String}      []\n   */\n\n\n  _class.prototype.get = function get(name, value) {\n    return this.http.get(name, value);\n  };\n  /**\n   * get post params\n   * @param  {String} name [query name]\n   * @return {String}      []\n   */\n\n\n  _class.prototype.post = function post(name, value) {\n    return this.http.post(name, value);\n  };\n  /**\n   * get post or get params\n   * @param  {String} name []\n   * @return {String}      []\n   */\n\n\n  _class.prototype.param = function param(name) {\n    return this.http.param(name);\n  };\n  /**\n   * get upload files\n   * @param  {String} name []\n   * @return {Object}      []\n   */\n\n\n  _class.prototype.file = function file(name, value) {\n    return this.http.file(name, value);\n  };\n  /**\n   * get or set header\n   * @param  {String} name  [header name]\n   * @param  {String} value [header value]\n   * @return {}       []\n   */\n\n\n  _class.prototype.header = function header(name, value) {\n    return this.http.header(name, value);\n  };\n  /**\n   * get user agent\n   * @return {String} []\n   */\n\n\n  _class.prototype.userAgent = function userAgent() {\n    return this.http.userAgent();\n  };\n  /**\n   * get page referer\n   * @param  {String} host [only get referer host]\n   * @return {String}      []\n   */\n\n\n  _class.prototype.referrer = function referrer(onlyHost) {\n    return this.http.referrer(onlyHost);\n  };\n  /**\n   * get page referer\n   * @param  {String} host [only get referer host]\n   * @return {String}      []\n   */\n\n\n  _class.prototype.referer = function referer(onlyHost) {\n    return this.http.referrer(onlyHost);\n  };\n  /**\n   * get or set cookie\n   * @param  {String} name    [cookie name]\n   * @param  {String} value   [cookie value]\n   * @param  {Object} options [cookie options]\n   * @return {}         []\n   */\n\n\n  _class.prototype.cookie = function cookie(name, value, options) {\n    return this.http.cookie(name, value, options);\n  };\n  /**\n   * get or set session\n   * @param  {String} name  [session name]\n   * @param  {mixed} value [session value]\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.session = function session(name, value) {\n    return this.http.session(name, value);\n  };\n  /**\n   * get language\n   * @param  {Boolean} useCookie [get from cookie set]\n   * @return {String}           []\n   */\n\n\n  _class.prototype.lang = function lang(_lang, asViewPath) {\n    return this.http.lang(_lang, asViewPath);\n  };\n  /**\n   * get locale value\n   * @param  {String} key []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.locale = function locale(key) {\n    var _http;\n\n    for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    return (_http = this.http).locale.apply(_http, [key].concat(data));\n  };\n  /**\n   * redirect\n   * @param  {String} url  [redirect url]\n   * @param  {Number} code [301 or 302]\n   * @return {promise}      [pedding promise]\n   */\n\n\n  _class.prototype.redirect = function redirect(url, code) {\n    this.http.redirect(url, code);\n    return think.prevent();\n  };\n  /**\n   * assign value to template\n   * @param  {String} name  [template name]\n   * @param  {mixed} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.assign = function assign(name, value) {\n    this._baseAssign();\n    return this.view().assign(name, value);\n  };\n  /**\n   * base assign\n   * @return {} []\n   */\n\n\n  _class.prototype._baseAssign = function _baseAssign() {\n    if (this._baseAssigned) {\n      return;\n    }\n    this._baseAssigned = true;\n    this.view().assign({\n      controller: this,\n      http: this.http,\n      config: this.http._config,\n      _: this.locale.bind(this)\n    });\n  };\n  /**\n   * fetch template content\n   * @param  {String} templateFile [template filepath]\n   * @return {promise}              []\n   */\n\n\n  _class.prototype.fetch = function fetch(templateFile, data, config) {\n    this._baseAssign();\n    return this.view().fetch(templateFile, data, config);\n  };\n  /**\n   * display template\n   * @param  {String} templateFile [template filepath]\n   * @param  {String} charset      [content encoding]\n   * @param  {String} contentType  [content type]\n   * @return {Promise}              []\n   */\n\n\n  _class.prototype.display = function display(templateFile, charset, contentType) {\n    this._baseAssign();\n    return this.view().display(templateFile, charset, contentType);\n  };\n  /**\n   * alias of display\n   * @param  {String} templateFile [template filepath]\n   * @param  {String} charset      [content encoding]\n   * @param  {String} contentType  [content type]\n   * @return {Promise}              []\n   */\n\n\n  _class.prototype.render = function render(templateFile, charset, contentType) {\n    return this.display(templateFile, charset, contentType);\n  };\n  /**\n   * output with jsonp\n   * @param  {Object} data [output data]\n   * @return {}      []\n   */\n\n\n  _class.prototype.jsonp = function jsonp(data) {\n    this.http.jsonp(data);\n    return think.prevent();\n  };\n  /**\n   * output with json\n   * @param  {Object} data [output data]\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.json = function json(data) {\n    this.http.json(data);\n    return think.prevent();\n  };\n  /**\n   * set http status code\n   * @param  {Number} status [status code]\n   * @return {}        []\n   */\n\n\n  _class.prototype.status = function status() {\n    var _status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 404;\n\n    this.http.status(_status);\n    return this;\n  };\n  /**\n   * deny request\n   * @param  {Number} status [status code]\n   * @return {[type]}        []\n   */\n\n\n  _class.prototype.deny = function deny() {\n    var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 403;\n\n    this.status(status);\n    this.http.end();\n    return think.prevent();\n  };\n  /**\n   * set cache-control and expires header\n   * @param  {Number} time []\n   * @return {}      []\n   */\n\n\n  _class.prototype.expires = function expires(time) {\n    this.http.expires(time);\n    return this;\n  };\n  /**\n   * write content\n   * @param  {mixed} obj      []\n   * @param  {String} encoding [content encoding]\n   * @return {}          []\n   */\n\n\n  _class.prototype.write = function write(obj, encoding) {\n    return this.http.write(obj, encoding);\n  };\n  /**\n   * end output\n   * @param  {Object} obj      []\n   * @param  {String} encoding [content encoding]\n   * @return {}          []\n   */\n\n\n  _class.prototype.end = function end(obj, encoding) {\n    this.http.end(obj, encoding);\n    return think.prevent();\n  };\n  /**\n   * send content\n   * @param  {Mixed} obj      []\n   * @param  {String} encoding []\n   * @return {Promise}          []\n   */\n\n\n  _class.prototype.send = function send(obj, encoding) {\n    return this.end(obj, encoding);\n  };\n  /**\n   * get or set content type\n   * @param  {String} ext [content type]\n   * @return {}     []\n   */\n\n\n  _class.prototype.type = function type(ext, encoding) {\n    return this.http.type(ext, encoding);\n  };\n  /**\n   * download file\n   * @param  {String} file        [filepath]\n   * @param  {String} contentType [content type]\n   * @param  {String} filename    [download filename]\n   * @return {Promise}             []\n   */\n\n\n  _class.prototype.download = function download(filepath, contentType, filename) {\n    if (think.isString(contentType) && contentType.indexOf('.') > -1) {\n      filename = contentType;\n      contentType = '';\n    }\n    if (!contentType || contentType.indexOf('/') === -1) {\n      contentType = require('mime').lookup(contentType || filepath);\n    }\n    this.type(contentType, false);\n\n    this.header('Content-Disposition', 'attachment; filename=\"' + (filename || _path2.default.basename(filepath)) + '\"');\n    return think.middleware('output_resource', this.http, filepath);\n  };\n  /**\n   * output with success errno & errmsg\n   * @param  {Object} data    [output data]\n   * @param  {String} message [errmsg]\n   * @return {Promise}         [pedding promise]\n   */\n\n\n  _class.prototype.success = function success(data, message) {\n    this.http.success(data, message);\n    return think.prevent();\n  };\n  /**\n   * output with fail errno & errmsg\n   * @param  {Number} errno  [error number]\n   * @param  {String} errmsg [error message]\n   * @param  {Object} data   [output data]\n   * @return {Promise}        [pedding promise]\n   */\n\n\n  _class.prototype.fail = function fail(errno, errmsg, data) {\n    this.http.fail(errno, errmsg, data);\n    return think.prevent();\n  };\n  /**\n   * alias for fail\n   * @param  {} args []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.error = function error() {\n    return this.fail.apply(this, arguments);\n  };\n  /**\n   * send exec time\n   * @param  {String} name [header name]\n   * @return {}      []\n   */\n\n\n  _class.prototype.sendTime = function sendTime(name) {\n    return this.http.sendTime(name);\n  };\n  /**\n   * emit socket data\n   * @param  {String} event []\n   * @param  {Miex} data  []\n   * @return {}       []\n   */\n\n\n  _class.prototype.emit = function emit(event, data) {\n    if (!this.http.socket) {\n      throw new Error('emit method can only used in websocket request');\n    }\n    return this.http.socketEmit(event, data);\n  };\n  /**\n   * broadcast socket data\n   * @param  {String} event       []\n   * @param  {Mixed} data        []\n   * @param  {Boolean} containSelf []\n   * @return {}             []\n   */\n\n\n  _class.prototype.broadcast = function broadcast(event, data, containSelf) {\n    if (!this.http.socket) {\n      throw new Error('broadcast method can only used in websocket request');\n    }\n    return this.http.socketBroadcast(event, data, containSelf);\n  };\n\n  return _class;\n}(think.http.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/logic/base.js":"'use strict';\n\n/**\n * base logic\n * inherits from base controller\n * @type {Class}\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$controller$bas) {\n  (0, _inherits3.default)(_class, _think$controller$bas);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$controller$bas.apply(this, arguments));\n  }\n\n  /**\n   * get validate method\n   * @return {} []\n   */\n  _class.prototype._getValidateItemMethod = function _getValidateItemMethod(itemData) {\n    var list = ['get', 'post', 'file'];\n    for (var i = 0, length = list.length; i < length; i++) {\n      var item = list[i];\n      if (itemData[list[i]]) {\n        delete itemData[item];\n        return item;\n      }\n    }\n    //for rest request\n    var method = this._isRest && this._method;\n    if (method) {\n      method = this.get(method);\n    }\n    if (!method) {\n      method = this.http.method.toLowerCase();\n    }\n    if (method === 'put' || method === 'patch') {\n      return 'post';\n    }\n    if (list.indexOf(method) > -1) {\n      return method;\n    }\n    return 'post';\n  };\n  /**\n   * parse validate data\n   * {\n   *   name: 'required|int|min:10|max:20',\n   *   title: 'length:10,20|default:welefen|get',\n   *   emai: 'required|email:{}',\n   *   ids: 'required|array|int'\n   * }\n   * @param  {Array}  data []\n   * @return {Array}      []\n   */\n\n\n  _class.prototype._parseValidateData = function _parseValidateData() {\n    var _this2 = this;\n\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var result = {};\n    var allowTypes = ['boolean', 'int', 'float', 'string', 'array', 'object'];\n\n    var _loop = function _loop(name) {\n\n      var itemData = data[name];\n      if (think.isString(itemData)) {\n        itemData = think.validate.parse(itemData);\n      } else {\n        itemData = think.extend({}, itemData);\n      }\n\n      var method = _this2._getValidateItemMethod(itemData);\n      if (method === 'file') {\n        itemData.object = true;\n      }\n      itemData._method = method;\n      //ignore set itemData.value when aleady has it\n      if (!('value' in itemData)) {\n        itemData.value = _this2[method](name);\n      }\n\n      var flag = allowTypes.some(function (item) {\n        return item in itemData;\n      });\n      if (!flag) {\n        itemData.string = true;\n      }\n\n      result[name] = itemData;\n    };\n\n    for (var name in data) {\n      _loop(name);\n    }\n    return result;\n  };\n  /**\n   * merge clean rules(only value)\n   * @param  {Object} rules []\n   * @return {Object}       []\n   */\n\n\n  _class.prototype._mergeCleanRules = function _mergeCleanRules(rules) {\n    var listData = [this.post(), this.get()];\n    var methods = ['post', 'get'];\n    listData.forEach(function (item, index) {\n      for (var key in item) {\n        if (!rules[key]) {\n          rules[key] = {\n            value: item[key],\n            _method: methods[index]\n          };\n        }\n      }\n    });\n    return rules;\n  };\n  /**\n   * validate data\n   * this.validate({\n   *   welefen: 'required|length:4,20|alpha',\n   *   email: 'required|email',\n   *   title: 'required|maxLength:10000'\n   * })\n   * @param  {Object} data      []\n   * @return {}           []\n   */\n\n\n  _class.prototype.validate = function validate(rules) {\n    this._validateInvoked = true;\n    if (think.isEmpty(rules)) {\n      return true;\n    }\n    rules = this._parseValidateData(rules);\n    rules = this._mergeCleanRules(rules);\n\n    var methods = {};\n    for (var name in rules) {\n      methods[name] = rules[name]._method;\n      delete rules[name]._method;\n    }\n\n    var ret = think.validate(rules, this.locale());\n    if (!think.isEmpty(ret)) {\n      this.assign('errors', ret);\n      return false;\n    }\n\n    //set values\n    var values = think.validate.values(rules);\n    for (var _name in values) {\n      var _method = methods[_name];\n      var value = values[_name];\n      if (value !== '' && (typeof value !== 'number' || !isNaN(value))) {\n        this[_method](_name, value);\n      }\n    }\n\n    return true;\n  };\n  /**\n   * get validate errors\n   * @return {Object} []\n   */\n\n\n  _class.prototype.errors = function errors() {\n    return this.assign('errors');\n  };\n  /**\n   * auto validate\n   * @return {} []\n   */\n\n\n  _class.prototype.__after = function __after() {\n    var error = this.config('error');\n\n    //check request method\n    var allowMethods = this.allowMethods;\n    if (!think.isEmpty(allowMethods)) {\n      if (think.isString(allowMethods)) {\n        allowMethods = allowMethods.split(',');\n      }\n      var _method2 = this.http.method.toLowerCase();\n      if (allowMethods.indexOf(_method2) === -1) {\n        return this.fail(error.validate_errno, this.locale('METHOD_NOT_ALLOWED'));\n      }\n    }\n\n    //check rules\n    if (think.isEmpty(this.rules) || this._validateInvoked) {\n      return;\n    }\n    var flag = this.validate(this.rules);\n    if (!flag) {\n      return this.fail(error.validate_errno, this.errors());\n    }\n  };\n\n  return _class;\n}(think.controller.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/service/base.js":"'use strict';\n/**\n * base service\n * @type {Class}\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$base) {\n  (0, _inherits3.default)(_class, _think$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$base.apply(this, arguments));\n  }\n\n  /**\n   * get model instance\n   * @return {} []\n   */\n  _class.prototype.model = function model(name, options, module) {\n    if (think.isString(options) && think.module.indexOf(options) > -1) {\n      module = options;\n      options = {};\n    }\n    module = module || this.parseModuleFromPath();\n    if (think.isString(options)) {\n      options = { type: options };\n    }\n    options = think.extend({}, think.config('db', undefined, module), options);\n    return think.model(name, options, module);\n  };\n  /**\n   * get service\n   * @return {} []\n   */\n\n\n  _class.prototype.service = function service(name, module) {\n    module = module || this.parseModuleFromPath();\n    return think.service(name, module);\n  };\n\n  return _class;\n}(think.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/sys/error.js":"'use strict';\n/**\n * system error message\n * http://man7.org/linux/man-pages/man3/errno.3.html\n */\n\nexports.__esModule = true;\nexports.default = {\n  'E2BIG': 'Argument list too long',\n  'EACCES': 'Permission denied',\n  'EADDRINUSE': 'Address already in use',\n  'EADDRNOTAVAIL': 'Address not available',\n  'EAFNOSUPPORT': 'Address family not supported',\n  'EAGAIN': 'Resource temporarily unavailable',\n  'EALREADY': 'Connection already in progress',\n  'EBADE': 'Invalid exchange',\n  'EBADF': 'Bad file descriptor',\n  'EBADFD': 'File descriptor in bad state',\n  'EBADMSG': 'Bad message',\n  'EBADR': 'Invalid request descriptor',\n  'EBADRQC': 'Invalid request code',\n  'EBADSLT': 'Invalid slot',\n  'EBUSY': 'Device or resource busy',\n  'ECANCELED': 'Operation canceled',\n  'ECHILD': 'No child processes',\n  'ECHRNG': 'Channel number out of range',\n  'ECOMM': 'Communication error on send',\n  'ECONNABORTED': 'Connection aborted',\n  'ECONNREFUSED': 'Connection refused',\n  'ECONNRESET': 'Connection reset',\n  'EDEADLK': 'Resource deadlock avoided',\n  'EDEADLOCK': 'Synonym for EDEADLK',\n  'EDESTADDRREQ': 'Destination address required',\n  'EDOM': 'Mathematics argument out of domain of function',\n  'EDQUOT': 'Disk quota exceeded',\n  'EEXIST': 'File exists',\n  'EFAULT': 'Bad address',\n  'EFBIG': 'File too large',\n  'EHOSTDOWN': 'Host is down',\n  'EHOSTUNREACH': 'Host is unreachable',\n  'EIDRM': 'Identifier removed',\n  'EILSEQ': 'Illegal byte sequence',\n  'EINPROGRESS': 'Operation in progress',\n  'EINTR': 'Interrupted function call',\n  'EINVAL': 'Invalid argument',\n  'EIO': 'Input/output error',\n  'EISCONN': 'Socket is connected',\n  'EISDIR': 'Is a directory',\n  'EISNAM': 'Is a named type file',\n  'EKEYEXPIRED': 'Key has expired',\n  'EKEYREJECTED': 'Key was rejected by service',\n  'EKEYREVOKED': 'Key has been revoked',\n  'EL2HLT': 'Level 2 halted',\n  'EL2NSYNC': 'Level 2 not synchronized',\n  'EL3HLT': 'Level 3 halted',\n  'EL3RST': 'Level 3 halted',\n  'ELIBACC': 'Cannot access a needed shared library',\n  'ELIBBAD': 'Accessing a corrupted shared library',\n  'ELIBMAX': 'Attempting to link in too many shared libraries',\n  'ELIBSCN': 'lib section in a.out corrupted',\n  'ELIBEXEC': 'Cannot exec a shared library directly',\n  'ELOOP': 'Too many levels of symbolic links',\n  'EMEDIUMTYPE': 'Wrong medium type',\n  'EMFILE': 'Too many open files',\n  'EMLINK': 'Too many links',\n  'EMSGSIZE': 'Message too long',\n  'EMULTIHOP': 'Multihop attempted',\n  'ENAMETOOLONG': 'Filename too long',\n  'ENETDOWN': 'Network is down',\n  'ENETRESET': 'Connection aborted by network',\n  'ENETUNREACH': 'Network unreachable',\n  'ENFILE': 'Too many open files in system',\n  'ENOBUFS': 'No buffer space available',\n  'ENODATA': 'No message is available on the STREAM head read queue',\n  'ENODEV': 'No such device',\n  'ENOENT': 'No such file or directory',\n  'ENOEXEC': 'Exec format error',\n  'ENOKEY': 'Required key not available',\n  'ENOLCK': 'No locks available',\n  'ENOLINK': 'Link has been severed',\n  'ENOMEDIUM': 'No medium found',\n  'ENOMEM': 'Not enough space',\n  'ENOMSG': 'No message of the desired type',\n  'ENONET': 'Machine is not on the network',\n  'ENOPKG': 'Package not installed',\n  'ENOPROTOOPT': 'Protocol not available',\n  'ENOSPC': 'No space left on device',\n  'ENOSR': 'No STREAM resources',\n  'ENOSTR': 'Not a STREAM',\n  'ENOSYS': 'Function not implemented',\n  'ENOTBLK': 'Block device required',\n  'ENOTCONN': 'The socket is not connected',\n  'ENOTDIR': 'Not a directory',\n  'ENOTEMPTY': 'Directory not empty',\n  'ENOTSOCK': 'Not a socket',\n  'ENOTSUP': 'Operation not supported',\n  'ENOTTY': 'Inappropriate I/O control operation',\n  'ENOTUNIQ': 'Name not unique on network',\n  'ENXIO': 'No such device or address',\n  'EOPNOTSUPP': 'Operation not supported on socket',\n  'EOVERFLOW': 'Value too large to be stored in data type',\n  'EPERM': 'Operation not permitted',\n  'EPFNOSUPPORT': 'Protocol family not supported',\n  'EPIPE': 'Broken pipe',\n  'EPROTO': 'Protocol error',\n  'EPROTONOSUPPORT': 'Protocol not supported',\n  'EPROTOTYPE': 'Protocol wrong type for socket',\n  'ERANGE': 'Result too large',\n  'EREMCHG': 'Remote address changed',\n  'EREMOTE': 'Object is remote',\n  'EREMOTEIO': 'Remote I/O error',\n  'ERESTART': 'Interrupted system call should be restarted',\n  'EROFS': 'Read-only filesystem',\n  'ESHUTDOWN': 'Cannot send after transport endpoint shutdown',\n  'ESPIPE': 'Invalid seek',\n  'ESOCKTNOSUPPORT': 'Socket type not supported',\n  'ESRCH': 'No such process',\n  'ESTALE': 'Stale file handle',\n  'ESTRPIPE': 'Streams pipe error',\n  'ETIME': 'Timer expired',\n  'ETIMEDOUT': 'Connection timed out',\n  'ETXTBSY': 'Text file busy',\n  'EUCLEAN': 'Structure needs cleaning',\n  'EUNATCH': 'Protocol driver not attached',\n  'EUSERS': 'Too many users',\n  'EWOULDBLOCK': 'Operation would block',\n  'EXDEV': 'Improper link',\n  'EXFULL': 'Exchange full'\n};","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/template/www/production.js":"var thinkjs = require('thinkjs');\nvar path = require('path');\n\nvar rootPath = path.dirname(__dirname);\n\nvar instance = new thinkjs({\n  APP_PATH: rootPath + path.sep + 'app',\n  RUNTIME_PATH: rootPath + path.sep + 'runtime',\n  ROOT_PATH: rootPath,\n  RESOURCE_PATH: __dirname,\n  env: 'production'\n});\n\ninstance.run(true);\n","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/core/view.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * view class\n * @return {} []\n */\nvar _class = function (_think$http$base) {\n  (0, _inherits3.default)(_class, _think$http$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$http$base.apply(this, arguments));\n  }\n\n  /**\n   * init method\n   * @param  {Object} http []\n   * @return {}      []\n   */\n  _class.prototype.init = function init(http) {\n    _think$http$base.prototype.init.call(this, http);\n    this.tVar = {};\n  };\n  /**\n   * assign\n   * @param  {String} name  []\n   * @param  {mixed} value []\n   * @return {}       []\n   */\n\n\n  _class.prototype.assign = function assign(name, value) {\n    if (name === undefined) {\n      return this.tVar;\n    } else if (value === undefined) {\n      if (think.isString(name)) {\n        return this.tVar[name];\n      } else {\n        for (var key in name) {\n          this.tVar[key] = name[key];\n        }\n      }\n    } else {\n      this.tVar[name] = value;\n    }\n  };\n  /**\n   * output template file\n   * @param  {String} templateFile [template filepath]\n   * @param  {String} charset      [content encoding]\n   * @param  {String} contentType  [content type]\n   * @return {Promise}              []\n   */\n\n\n  _class.prototype.display = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(templateFile, charset, contentType, config) {\n      var content;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (think.isObject(charset)) {\n                config = charset;\n                charset = '';\n              } else if (think.isObject(contentType)) {\n                config = contentType;\n                contentType = '';\n              }\n              _context.prev = 1;\n              _context.next = 4;\n              return this.hook('view_before');\n\n            case 4:\n              _context.next = 6;\n              return this.fetch(templateFile, undefined, config);\n\n            case 6:\n              content = _context.sent;\n              _context.next = 9;\n              return this.render(content, charset, contentType);\n\n            case 9:\n              _context.next = 11;\n              return this.hook('view_after', content);\n\n            case 11:\n              _context.next = 18;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context['catch'](1);\n\n              this.http.error = _context.t0;\n              _context.next = 18;\n              return think.statusAction(500, this.http, true);\n\n            case 18:\n              return _context.abrupt('return', think.prevent());\n\n            case 19:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[1, 13]]);\n    }));\n\n    function display(_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    }\n\n    return display;\n  }();\n  /**\n   * render template content\n   * @param  {String} content     [template content]\n   * @param  {String} charset     [charset]\n   * @param  {String} contentType [contentType]\n   * @return {}             []\n   */\n\n\n  _class.prototype.render = function render() {\n    var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var charset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.http.config('encoding');\n    var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.http.config('view.content_type');\n\n    this.http.type(contentType, charset);\n    return this.http.end(content, charset);\n  };\n  /**\n   * check template filepath exist\n   * @param  {String} templateFile [template filepath]\n   * @param  {Boolean} inView       []\n   * @return {Promise}              []\n   */\n\n\n  _class.prototype.checkTemplateExist = function checkTemplateExist(templateFile) {\n    var cacheData = thinkData.template;\n    if (templateFile in cacheData) {\n      return true;\n    }\n    if (think.isFile(templateFile)) {\n      //add template file to cache\n      cacheData[templateFile] = true;\n      return true;\n    }\n    return false;\n  };\n  /**\n   * fetch template file content\n   * @param  {String} templateFile [template file]\n   * @return {Promise}             []\n   */\n\n\n  _class.prototype.fetch = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(templateFile, data, config) {\n      var tVar, err, promises, data4ViewParse, content;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              tVar = data && think.isObject(data) ? data : this.tVar;\n\n              config = think.extend({\n                templateFile: templateFile\n              }, this.config('view'), config);\n\n              if (!(!templateFile || !_path2.default.isAbsolute(templateFile))) {\n                _context2.next = 6;\n                break;\n              }\n\n              _context2.next = 5;\n              return this.hook('view_template', config);\n\n            case 5:\n              templateFile = _context2.sent;\n\n            case 6:\n              if (this.checkTemplateExist(templateFile)) {\n                _context2.next = 9;\n                break;\n              }\n\n              err = new Error(think.locale('TEMPLATE_NOT_EXIST', templateFile));\n              return _context2.abrupt('return', think.reject(err));\n\n            case 9:\n              promises = (0, _keys2.default)(tVar).map(function (key) {\n                if (!think.isPromise(tVar[key])) {\n                  return;\n                }\n                return tVar[key].then(function (data) {\n                  tVar[key] = data;\n                });\n              });\n              _context2.next = 12;\n              return _promise2.default.all(promises);\n\n            case 12:\n              data4ViewParse = {\n                'var': tVar,\n                'file': templateFile,\n                'config': config\n              };\n              _context2.next = 15;\n              return this.hook('view_parse', data4ViewParse);\n\n            case 15:\n              content = _context2.sent;\n\n              if (data4ViewParse === content) {\n                content = '';\n              }\n\n              return _context2.abrupt('return', this.hook('view_filter', content));\n\n            case 18:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function fetch(_x8, _x9, _x10) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return fetch;\n  }();\n\n  return _class;\n}(think.http.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/cache/file.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * file store\n * @type {Class}\n */\nvar FileStore = think.adapter('store', 'file');\n\n/**\n * file cache\n */\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  _class.prototype.init = function init(options) {\n\n    options = think.parseConfig(think.config('cache'), options);\n\n    this.timeout = options.timeout;\n    this.file_ext = options.file_ext;\n    this.path = options.path;\n    this.path_depth = options.path_depth || 1;\n\n    this.store = new FileStore({\n      path: this.path\n    });\n\n    this.gcType = this.path;\n    think.gc(this);\n  };\n  /**\n   * get stored file path\n   * @return {String} []\n   */\n\n\n  _class.prototype.getFilepath = function getFilepath(name) {\n    name = think.md5(name);\n    var dir = name.slice(0, this.path_depth).split('').join(_path2.default.sep);\n    return '' + dir + _path2.default.sep + name + this.file_ext;\n  };\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.get = function get(name) {\n    var _this2 = this;\n\n    var filepath = this.getFilepath(name);\n    return this.store.get(filepath).then(function (data) {\n      if (!data) {\n        return;\n      }\n      try {\n        data = JSON.parse(data);\n        if (data.expire && Date.now() > data.expire) {\n          return _this2.store.delete(filepath);\n        } else {\n          return data.data;\n        }\n      } catch (e) {\n        return _this2.store.delete(filepath);\n      }\n    }).catch(function () {});\n  };\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n\n\n  _class.prototype.set = function set(name, value) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    if (think.isObject(name)) {\n      timeout = value || timeout;\n      var key = (0, _keys2.default)(name)[0];\n      value = name[key];\n      name = key;\n    }\n    var filepath = this.getFilepath(name);\n    var data = {\n      data: value,\n      expire: Date.now() + timeout * 1000,\n      timeout: timeout\n    };\n    return this.store.set(filepath, (0, _stringify2.default)(data)).catch(function () {});\n  };\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.delete = function _delete(name) {\n    var filepath = this.getFilepath(name);\n    return this.store.delete(filepath).catch(function () {});\n  };\n  /**\n   * gc\n   * @return {} []\n   */\n\n\n  _class.prototype.gc = function gc() {\n    var _this3 = this;\n\n    var now = Date.now();\n    return this.store.list().then(function (files) {\n      files.forEach(function (file) {\n        var filepath = '' + _this3.path + _path2.default.sep + file;\n        var content = _fs2.default.readFileSync(filepath, 'utf8');\n        try {\n          var data = JSON.parse(content);\n          if (now > data.expire) {\n            _fs2.default.unlink(filepath, function () {});\n          }\n        } catch (e) {\n          _fs2.default.unlink(filepath, function () {});\n        }\n      });\n    });\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/store/file.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * file store class\n */\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.init = function init(config) {\n    this.config = think.extend({\n      path: ''\n    }, config);\n\n    if (!this.config.path) {\n      throw new Error('config.path must be set');\n    }\n\n    if (!think.isDir(this.config.path)) {\n      think.mkdir(this.config.path);\n    }\n  };\n  /**\n   * get file path\n   * @param  {String} key []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.getFilePath = function getFilePath(key) {\n    return this.config.path + _path2.default.sep + key;\n  };\n  /**\n   * get data\n   * @param  {String} key []\n   * @return {Promise}    []\n   */\n\n\n  _class.prototype.get = function get(key) {\n    var _this2 = this;\n\n    var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    var filePath = this.getFilePath(key);\n    if (times === 1 && !think.isFile(filePath)) {\n      return _promise2.default.resolve();\n    }\n    // try 3 times when can not get file content\n    return think.promisify(_fs2.default.readFile, _fs2.default)(filePath, { encoding: 'utf8' }).then(function (content) {\n      if (!content && times <= 3) {\n        return _this2.get(key, times + 1);\n      }\n      return content;\n    });\n  };\n  /**\n   * set file content\n   * @param {String} key     []\n   * @param {String} content []\n   */\n\n\n  _class.prototype.set = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(key, content) {\n      var filePath, fn;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              filePath = this.getFilePath(key);\n\n              think.mkdir(_path2.default.dirname(filePath));\n              fn = think.promisify(_fs2.default.writeFile, _fs2.default);\n              return _context.abrupt('return', fn(filePath, content).then(function () {\n                think.chmod(filePath);\n              }));\n\n            case 4:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function set(_x2, _x3) {\n      return _ref.apply(this, arguments);\n    }\n\n    return set;\n  }();\n  /**\n   * delete file\n   * @param  {String} key []\n   * @return {Promise}     []\n   */\n\n\n  _class.prototype.delete = function _delete(key) {\n    var filepath = this.getFilePath(key);\n    if (!think.isFile(filepath)) {\n      return _promise2.default.resolve();\n    }\n    return think.promisify(_fs2.default.unlink, _fs2.default)(filepath);\n  };\n  /**\n   * get all files\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.list = function list() {\n    return _promise2.default.resolve(think.getFiles(this.config.path));\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/cache/memcache.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MemcacheSocket = think.adapter('socket', 'memcache');\n\n/**\n * memcache cache\n */\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  _class.prototype.init = function init(options) {\n    this.options = think.parseConfig(think.config('cache'), options);\n    this.timeout = this.options.timeout || 0;\n    this.prefix = this.options.prefix || '';\n  };\n  /**\n   * get memcache instance\n   * @param  {String} command []\n   * @return {}         []\n   */\n\n\n  _class.prototype.getMemcacheInstance = function getMemcacheInstance(name) {\n    var options = think.parseConfig.call(this.options, think.config('memcache'), {\n      command: name,\n      from: 'cache'\n    });\n    this.timeout = options.timeout || this.timeout;\n    this.prefix = options.prefix || this.prefix;\n    return MemcacheSocket.getInstance(options, thinkCache.MEMCACHE, ['command', 'from']);\n  };\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.get = function get(name) {\n    var instance = this.getMemcacheInstance('get');\n    return instance.get(this.prefix + name).then(function (value) {\n      if (value) {\n        return JSON.parse(value);\n      }\n    }).catch(function () {});\n  };\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n\n\n  _class.prototype.set = function set(name, value) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    if (think.isObject(name)) {\n      timeout = value || timeout;\n      var key = (0, _keys2.default)(name)[0];\n      value = name[key];\n      name = key;\n    }\n    var instance = this.getMemcacheInstance('set');\n    var data = (0, _stringify2.default)(value);\n    return instance.set(this.prefix + name, data, timeout).catch(function () {});\n  };\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.delete = function _delete(name) {\n    var instance = this.getMemcacheInstance('delete');\n    return instance.delete(this.prefix + name).catch(function () {});\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/socket/memcache.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * memcache socket\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * inti\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.init = function init() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _Base.prototype.init.call(this, config);\n\n    this.config = think.extend({\n      host: '127.0.0.1',\n      port: 11211,\n      username: '',\n      password: ''\n    }, config);\n  };\n  /**\n   * get socket connect str\n   * @return {String} []\n   */\n\n\n  _class.prototype.getSocketStr = function getSocketStr(protocal) {\n    var str = '';\n    var config = this.config;\n    if (config.username) {\n      str += config.username;\n    }\n    if (config.password) {\n      str += ':' + config.password;\n    }\n    if (str) {\n      str += '@';\n    }\n    str += config.host + ':' + config.port;\n    if (protocal) {\n      return 'memcache://' + str;\n    }\n    return str;\n  };\n  /**\n   * get connection\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getConnection = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var memjs;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.connection) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return', this.connection);\n\n            case 2:\n              _context.next = 4;\n              return think.npm('memjs');\n\n            case 4:\n              memjs = _context.sent;\n\n              this.connection = memjs.Client.create(this.getSocketStr(), {\n                logger: {\n                  log: function log() {}\n                }\n              });\n\n              this.logConnect(this.getSocketStr(true), 'memcache');\n\n              return _context.abrupt('return', this.connection);\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getConnection() {\n      return _ref.apply(this, arguments);\n    }\n\n    return getConnection;\n  }();\n  /**\n   * wrap method\n   * @param  {String}    name []\n   * @param  {} args []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.wrap = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(name) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var connection, deferred, callback, err;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getConnection();\n\n            case 2:\n              connection = _context2.sent;\n              deferred = think.defer();\n\n              callback = function callback(err, data) {\n                return err ? deferred.reject(err) : deferred.resolve(data && data.toString());\n              };\n\n              if (args.length === 1) {\n                args.push(callback);\n              } else {\n                args = [args[0], args[1], callback, args[2]];\n              }\n              connection[name].apply(connection, args);\n              err = new Error(this.getSocketStr(true));\n              return _context2.abrupt('return', think.error(deferred.promise, err));\n\n            case 9:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function wrap(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return wrap;\n  }();\n  /**\n   * get data\n   * @param  {String} key []\n   * @return {Promise}     []\n   */\n\n\n  _class.prototype.get = function get(key) {\n    return this.wrap('get', key);\n  };\n  /**\n   * set data \n   * @param {String} key     []\n   * @param {String} value   []\n   * @param {Number} timeout []\n   */\n\n\n  _class.prototype.set = function set(key, value) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.config.timeout;\n\n    return this.wrap('set', key, value, timeout);\n  };\n  /**\n   * delete data\n   * @param  {String} key []\n   * @return {Promise}     []\n   */\n\n\n  _class.prototype.delete = function _delete(key) {\n    return this.wrap('delete', key);\n  };\n  /**\n   * increment\n   * @param  {String} key     []\n   * @param  {Number} amount  []\n   * @param  {Number} timeout []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.increment = function increment(key, amount) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.config.timeout;\n\n    return this.wrap('increment', key, amount, timeout);\n  };\n  /**\n   * decrement\n   * @param  {String} key     []\n   * @param  {Number} amount  []\n   * @param  {Number} timeout []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.decrement = function decrement(key, amount) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.config.timeout;\n\n    return this.wrap('decrement', key, amount, timeout);\n  };\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/socket/base.js":"'use strict';\n\n/**\n * socket base class\n */\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @return {} []\n   */\n  _class.prototype.init = function init() {\n    this.connection = null;\n    //query queue nums\n    this.queueNums = 0;\n    //auto close socket timer\n    this.closeTimer = 0;\n  };\n  /**\n   * log connection\n   * @return {} []\n   */\n\n\n  _class.prototype.logConnect = function logConnect(str, type) {\n    //log mongodb connection infomation\n    if (this.config.log_connect) {\n      think.log(function (colors) {\n        return 'Connect ' + type + ' with ' + colors.magenta(str);\n      }, 'SOCKET');\n    }\n  };\n  /**\n   * auto close socket on cli mode\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.autoClose = function autoClose(promise) {\n    var _this2 = this;\n\n    if (!think.config('auto_close_socket')) {\n      return promise;\n    }\n\n    var close = function close() {\n      _this2.queueNums--;\n      if (_this2.queueNums === 0) {\n        _this2.closeTimer = setTimeout(function () {\n          _this2.close();\n        }, 3000);\n      }\n    };\n\n    clearTimeout(this.closeTimer);\n\n    this.queueNums++;\n    return promise.then(function (data) {\n      close();\n      return data;\n    }).catch(function (err) {\n      close();\n      return _promise2.default.reject(err);\n    });\n  };\n  /**\n   * close socket connection\n   * @return {} []\n   */\n\n\n  _class.prototype.close = function close() {\n    if (this.connection) {\n      this.connection.close();\n      this.connection = null;\n    }\n  };\n\n  /**\n   * get instance\n   * @param  {Object} config []\n   * @return {Object}        []\n   */\n\n\n  _class.getInstance = function getInstance(config, type) {\n    var extraKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    config = think.parseConfig(config);\n\n    //delete extra keys when caculate config md5 value\n    extraKeys.forEach(function (item) {\n      return delete config[item];\n    });\n    var key = think.md5((0, _stringify2.default)(config)).slice(0, 5);\n\n    var instance = thinkCache(type, key);\n    if (!instance) {\n      instance = new this(config);\n      thinkCache(type, key, instance);\n    }\n    return instance;\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/cache/memory.js":"'use strict';\n/**\n * base store\n * @type {Class}\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar BaseStore = think.adapter('store', 'memory');\n/**\n * memory cache\n */\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  _class.prototype.init = function init(options) {\n\n    options = think.parseConfig(think.config('cache'), options);\n\n    this.timeout = options.timeout;\n\n    this.store = new BaseStore({\n      type: thinkCache.MEMORY\n    });\n\n    //set gc type & start gc\n    this.gcType = 'cache_memory';\n    think.gc(this);\n  };\n  /**\n   * get session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.get = function get(name) {\n    var _this2 = this;\n\n    return this.store.get(name).then(function (data) {\n      if (!data) {\n        return;\n      }\n      //data is expire\n      if (data.expire && Date.now() > data.expire) {\n        return _this2.store.delete(name);\n      }\n      return think.clone(data.data);\n    });\n  };\n  /**\n   * set session data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.set = function set(name, value) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    value = think.clone(value);\n    var data = {\n      expire: timeout > 0 ? Date.now() + timeout * 1000 : null,\n      timeout: timeout,\n      data: value\n    };\n    return this.store.set(name, data);\n  };\n  /**\n   * delete session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.delete = function _delete(name) {\n    return this.store.delete(name);\n  };\n  /**\n   * gc\n   * is internal method\n   * @return {} []\n   */\n\n\n  _class.prototype.gc = function gc() {\n    var now = Date.now();\n    return this.store.list().then(function (list) {\n      for (var key in list) {\n        var item = list[key];\n        if (item && item.expire && now > item.expire) {\n          delete list[key];\n        }\n      }\n    });\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/store/memory.js":"'use strict';\n/**\n * store base class\n */\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @return {} []\n   */\n  _class.prototype.init = function init(config) {\n    this.config = think.extend({\n      type: thinkCache.MEMORY\n    }, config);\n\n    this.data = thinkCache(this.config.type);\n  };\n  /**\n   * get content\n   * @param  {String} key []\n   * @return {Promise}     []\n   */\n\n\n  _class.prototype.get = function get(key) {\n    return _promise2.default.resolve(this.data[key]);\n  };\n  /**\n   * set key content\n   * @param {} key     []\n   * @param {} content []\n   */\n\n\n  _class.prototype.set = function set(key, content) {\n    this.data[key] = content;\n    return _promise2.default.resolve();\n  };\n  /**\n   * delete key\n   * @param  {String} key []\n   * @return {}     []\n   */\n\n\n  _class.prototype.delete = function _delete(key) {\n    delete this.data[key];\n    return _promise2.default.resolve();\n  };\n  /**\n   * get all data\n   * @return {} []\n   */\n\n\n  _class.prototype.list = function list() {\n    return _promise2.default.resolve(this.data);\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/cache/redis.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar RedisSocket = think.adapter('socket', 'redis');\n\n/**\n * redis cache\n */\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  _class.prototype.init = function init(options) {\n    this.options = think.parseConfig(think.config('cache'), options);\n    this.timeout = this.options.timeout || 0;\n    this.prefix = this.options.prefix || '';\n  };\n  /**\n   * get redis instance\n   * @return {Object} []\n   */\n\n\n  _class.prototype.getRedisInstance = function getRedisInstance(name) {\n    var options = think.parseConfig.call(this.options, think.config('redis'), {\n      command: name,\n      from: 'cache'\n    });\n    this.timeout = options.timeout || this.timeout;\n    this.prefix = options.prefix || this.prefix;\n    return RedisSocket.getInstance(options, thinkCache.REDIS, ['command', 'from']);\n  };\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.get = function get(name) {\n    var instance = this.getRedisInstance('get');\n    return instance.get(this.prefix + name).then(function (value) {\n      if (value) {\n        return JSON.parse(value);\n      }\n    }).catch(function () {});\n  };\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n\n\n  _class.prototype.set = function set(name, value) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    if (think.isObject(name)) {\n      timeout = value || timeout;\n      var key = (0, _keys2.default)(name)[0];\n      value = name[key];\n      name = key;\n    }\n    var instance = this.getRedisInstance('set');\n    return instance.set(this.prefix + name, (0, _stringify2.default)(value), timeout).catch(function () {});\n  };\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.delete = function _delete(name) {\n    var instance = this.getRedisInstance('delete');\n    return instance.delete(this.prefix + name).catch(function () {});\n  };\n  /**\n   * wrap\n   * @param  {[type]}    name []\n   * @param  {...[type]} data []\n   * @return {[type]}         []\n   */\n\n\n  _class.prototype.wrap = function wrap(command, name) {\n    var instance = this.getRedisInstance(command);\n\n    for (var _len = arguments.length, data = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      data[_key - 2] = arguments[_key];\n    }\n\n    return instance.wrap.apply(instance, [command, this.prefix + name].concat(data));\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/socket/redis.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Redis socket class\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.init = function init() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _Base.prototype.init.call(this, config);\n\n    this.config = think.extend({\n      port: 6379,\n      host: '127.0.0.1',\n      password: ''\n    }, config);\n  };\n  /**\n   * connect redis\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getConnection = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var redis, config, str;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.connection) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return', this.connection);\n\n            case 2:\n              _context.next = 4;\n              return think.npm('redis');\n\n            case 4:\n              redis = _context.sent;\n              config = this.config;\n              str = 'redis://' + config.host + ':' + config.port;\n              return _context.abrupt('return', think.await(str, function () {\n\n                var deferred = think.defer();\n                var connection = redis.createClient(config.port, config.host, config);\n                if (config.password) {\n                  connection.auth(config.password, function () {});\n                }\n                connection.on('connect', function () {\n                  _this2.connection = connection;\n                  _this2.logConnect(str, 'redis');\n                  deferred.resolve(connection);\n                });\n                connection.on('error', function (err) {\n                  _this2.close();\n                  _this2.logConnect(str, 'redis');\n                  deferred.reject(err);\n                });\n                var err = new Error(str);\n                return think.error(deferred.promise, err);\n              }));\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getConnection() {\n      return _ref.apply(this, arguments);\n    }\n\n    return getConnection;\n  }();\n  /**\n   * add event\n   * @param  {String}   event    []\n   * @param  {Function} callback []\n   * @return {}            []\n   */\n\n\n  _class.prototype.on = function on(event, callback) {\n    return this.getConnection().then(function (connection) {\n      connection.on(event, callback);\n    });\n  };\n  /**\n   * wrap\n   * @param  {String}    name []\n   * @param  {Array} data []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.wrap = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(name) {\n      for (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        data[_key - 1] = arguments[_key];\n      }\n\n      var fn;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getConnection();\n\n            case 2:\n              fn = think.promisify(this.connection[name], this.connection);\n              return _context2.abrupt('return', think.error(fn.apply(undefined, data)));\n\n            case 4:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function wrap(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return wrap;\n  }();\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.get = function get(name) {\n    return this.wrap('get', name);\n  };\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {String} value   []\n   * @param {Number} timeout []\n   */\n\n\n  _class.prototype.set = function set(name, value) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.config.timeout;\n\n    var setP = [this.wrap('set', name, value)];\n    if (timeout) {\n      setP.push(this.expire(name, timeout));\n    }\n    return _promise2.default.all(setP);\n  };\n  /**\n   * set data expire\n   * @param  {String} name    []\n   * @param  {Number} timeout []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.expire = function expire(name, timeout) {\n    return this.wrap('expire', name, timeout);\n  };\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.delete = function _delete(name) {\n    return this.wrap('del', name);\n  };\n  /**\n   * close socket connection\n   * @return {} []\n   */\n\n\n  _class.prototype.close = function close() {\n    if (this.connection) {\n      this.connection.end();\n      this.connection = null;\n    }\n  };\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/db/base.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _parse = require('./_parse.js');\n\nvar _parse2 = _interopRequireDefault(_parse);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * db base class\n * @type {Class}\n */\nvar _class = function (_Parse) {\n  (0, _inherits3.default)(_class, _Parse);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Parse.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @return {} []\n   */\n  _class.prototype.init = function init(config) {\n    _Parse.prototype.init.call(this, config);\n    this.sql = '';\n    this.lastInsertId = 0;\n    this._socket = null;\n    this.transTimes = 0; //transaction times\n  };\n  /**\n   * get socket instance, override by sub class\n   * @return {Object} [socket instance]\n   */\n\n\n  _class.prototype.socket = function socket() {};\n  /**\n   * insert data\n   * @param  {Object} data    []\n   * @param  {Object} options []\n   * @param  {Boolean} replace []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.add = function add(data, options, replace) {\n    var values = [];\n    var fields = [];\n    for (var key in data) {\n      var val = data[key];\n      val = this.parseValue(val);\n      if (think.isString(val) || think.isBoolean(val) || think.isNumber(val)) {\n        values.push(val);\n        fields.push(this.parseKey(key));\n      }\n    }\n    var sql = replace ? 'REPLACE' : 'INSERT';\n    sql += ' INTO ' + this.parseTable(options.table) + ' (' + fields.join(',') + ')';\n    sql += ' VALUES (' + values.join(',') + ')';\n    sql += this.parseLock(options.lock) + this.parseComment(options.comment);\n    return this.execute(sql);\n  };\n  /**\n   * insert multi data\n   * @param  {Array} data    [data list]\n   * @param  {Object} options []\n   * @param  {Boolean} replace []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.addMany = function addMany(data, options, replace) {\n    var _this2 = this;\n\n    var fields = (0, _keys2.default)(data[0]).map(function (item) {\n      return _this2.parseKey(item);\n    }).join(',');\n    var values = data.map(function (item) {\n      var value = [];\n      for (var key in item) {\n        var val = item[key];\n        val = _this2.parseValue(val);\n        if (think.isString(val) || think.isBoolean(val) || think.isNumber(val)) {\n          value.push(val);\n        }\n      }\n      return '(' + value.join(',') + ')';\n    }).join(',');\n    var sql = replace ? 'REPLACE' : 'INSERT';\n    sql += ' INTO ' + this.parseTable(options.table) + '(' + fields + ')';\n    sql += ' VALUES ' + values;\n    sql += this.parseLock(options.lock) + this.parseComment(options.comment);\n    return this.execute(sql);\n  };\n  /**\n   * select data\n   * @param  {String} fields  []\n   * @param  {String} table   []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.selectAdd = function selectAdd(fields, table) {\n    var _this3 = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (think.isString(fields)) {\n      fields = fields.split(/\\s*,\\s*/);\n    }\n    fields = fields.map(function (item) {\n      return _this3.parseKey(item);\n    });\n    var sql = 'INSERT INTO ' + this.parseTable(table) + ' (' + fields.join(',') + ') ';\n    sql += this.buildSelectSql(options);\n    return this.execute(sql);\n  };\n  /**\n   * delete data\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.delete = function _delete(options) {\n    var sql = ['DELETE FROM ', this.parseTable(options.table), this.parseWhere(options.where), this.parseOrder(options.order), this.parseLimit(options.limit), this.parseLock(options.lock), this.parseComment(options.comment)].join('');\n    return this.execute(sql);\n  };\n  /**\n   * update data\n   * @param  {Object} data    []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.update = function update(data, options) {\n    var sql = ['UPDATE ', this.parseTable(options.table), this.parseSet(data), this.parseWhere(options.where), this.parseOrder(options.order), this.parseLimit(options.limit), this.parseLock(options.lock), this.parseComment(options.comment)].join('');\n    return this.execute(sql);\n  };\n  /**\n   * select\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.select = function select(options, cache) {\n    var _this4 = this;\n\n    var sql = void 0;\n    if (think.isObject(options)) {\n      sql = this.buildSelectSql(options);\n      cache = options.cache || cache;\n    } else {\n      sql = options;\n    }\n    if (!think.isEmpty(cache) && this.config.cache.on) {\n      var key = cache.key || think.md5(sql);\n      return think.cache(key, function () {\n        return _this4.query(sql);\n      }, cache);\n    }\n    return this.query(sql);\n  };\n  /**\n   * escape string\n   * @param  {String} str []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.escapeString = function escapeString(str) {\n    if (!str) {\n      return '';\n    }\n    return str.replace(/[\\0\\n\\r\\b\\t\\\\\\'\\\"\\x1a]/g, function (s) {\n      switch (s) {\n        case '\\0':\n          return '\\\\0';\n        case '\\n':\n          return '\\\\n';\n        case '\\r':\n          return '\\\\r';\n        case '\\b':\n          return '\\\\b';\n        case '\\t':\n          return '\\\\t';\n        case '\\x1a':\n          return '\\\\Z';\n        default:\n          return '\\\\' + s;\n      }\n    });\n  };\n  /**\n   * get last sql\n   * @return {String}       []\n   */\n\n\n  _class.prototype.getLastSql = function getLastSql() {\n    return this.sql;\n  };\n  /**\n   * get last insert id\n   * @return {String} []\n   */\n\n\n  _class.prototype.getLastInsertId = function getLastInsertId() {\n    return this.lastInsertId;\n  };\n  /**\n   * query string\n   * @param  string str\n   * @return promise\n   */\n\n\n  _class.prototype.query = function query(sql) {\n    var _this5 = this;\n\n    this.sql = sql;\n    return think.await(sql, function () {\n      return _this5.socket(sql).query(sql).then(function (data) {\n        return _this5.bufferToString(data);\n      });\n    });\n  };\n  /**\n   * buffer to string\n   * @param  {Array} data []\n   * @return {Array}      []\n   */\n\n\n  _class.prototype.bufferToString = function bufferToString(data) {\n    if (!this.config.buffer_tostring || !think.isArray(data)) {\n      return data;\n    }\n    for (var i = 0, length = data.length; i < length; i++) {\n      for (var key in data[i]) {\n        if (think.isBuffer(data[i][key])) {\n          data[i][key] = data[i][key].toString();\n        }\n      }\n    }\n    return data;\n  };\n  /**\n   * execute sql\n   * @param  {String} sql []\n   * @return {}     []\n   */\n\n\n  _class.prototype.execute = function execute(sql) {\n    var _this6 = this;\n\n    this.sql = sql;\n    return this.socket(sql).execute(sql).then(function (data) {\n      if (data.insertId) {\n        _this6.lastInsertId = data.insertId;\n      }\n      return data.affectedRows || 0;\n    });\n  };\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.startTrans = function startTrans() {\n    if (this.transTimes === 0) {\n      this.transTimes++;\n      return this.execute('START TRANSACTION');\n    }\n    this.transTimes++;\n    return _promise2.default.resolve();\n  };\n  /**\n   * commit\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.commit = function commit() {\n    if (this.transTimes > 0) {\n      this.transTimes = 0;\n      return this.execute('COMMIT');\n    }\n    return _promise2.default.resolve();\n  };\n  /**\n   * rollback\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.rollback = function rollback() {\n    if (this.transTimes > 0) {\n      this.transTimes = 0;\n      return this.execute('ROLLBACK');\n    }\n    return _promise2.default.resolve();\n  };\n  /**\n   * close connect\n   * @return {} []\n   */\n\n\n  _class.prototype.close = function close() {\n    if (this._socket) {\n      this._socket.close();\n      this._socket = null;\n    }\n  };\n\n  return _class;\n}(_parse2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/db/_parse.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * sql parse class\n */\nvar _class = function (_think$base) {\n  (0, _inherits3.default)(_class, _think$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @return {} []\n   */\n  _class.prototype.init = function init() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.config = config;\n    //operate\n    this.comparison = {\n      'EQ': '=',\n      'NEQ': '!=',\n      '<>': '!=',\n      'GT': '>',\n      'EGT': '>=',\n      'LT': '<',\n      'ELT': '<=',\n      'NOTLIKE': 'NOT LIKE',\n      'LIKE': 'LIKE',\n      'IN': 'IN',\n      'NOTIN': 'NOT IN'\n    };\n    this.selectSql = '%EXPLAIN%SELECT%DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT%%UNION%%COMMENT%';\n  };\n  /**\n   * parse explain\n   * @param  {Boolean} explain []\n   * @return {String}         []\n   */\n\n\n  _class.prototype.parseExplain = function parseExplain(explain) {\n    if (!explain) {\n      return '';\n    }\n    return 'EXPLAIN ';\n  };\n  /**\n   * parse set\n   * @param  {Object} data []\n   * @return {String}      []\n   */\n\n\n  _class.prototype.parseSet = function parseSet() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var set = [];\n    for (var key in data) {\n      var value = this.parseValue(data[key]);\n      if (think.isString(value) || think.isNumber(value)) {\n        set.push(this.parseKey(key) + '=' + value);\n      }\n    }\n    if (set.length) {\n      return ' SET ' + set.join(',');\n    }\n    return '';\n  };\n  /**\n   * parse key\n   * @param  {String} key []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.parseKey = function parseKey(key) {\n    return key;\n  };\n  /**\n   * parse value\n   * @param  {Mixed} value []\n   * @return {Mixed}       []\n   */\n\n\n  _class.prototype.parseValue = function parseValue(value) {\n    var _this2 = this;\n\n    if (think.isString(value)) {\n      value = '\\'' + this.escapeString(value) + '\\'';\n    } else if (think.isArray(value)) {\n      if (/^exp$/.test(value[0])) {\n        value = value[1];\n      } else {\n        value = value.map(function (item) {\n          return _this2.parseValue(item);\n        });\n      }\n    } else if (think.isBoolean(value)) {\n      value = value ? '1' : '0';\n    } else if (value === null) {\n      value = 'null';\n    }\n    return value;\n  };\n  /**\n   * parse field\n   * parseField('name');\n   * parseField('name,email');\n   * parseField({\n   *     xx_name: 'name',\n   *     xx_email: 'email'\n   * })\n   * @return {String} []\n   */\n\n\n  _class.prototype.parseField = function parseField(fields) {\n    var _this3 = this;\n\n    if (think.isString(fields)) {\n      //fields('id, instr('30,35,31,',id+',') as d')\n      if (fields.indexOf('(') > -1 && fields.indexOf(')') > -1) {\n        return fields;\n      }\n      if (fields.indexOf(',') > -1) {\n        fields = fields.split(/\\s*,\\s*/);\n      }\n    }\n    if (think.isArray(fields)) {\n      return fields.map(function (item) {\n        return _this3.parseKey(item);\n      }).join(',');\n    } else if (think.isObject(fields)) {\n      var data = [];\n      for (var key in fields) {\n        data.push(this.parseKey(key) + ' AS ' + this.parseKey(fields[key]));\n      }\n      return data.join(',');\n    } else if (think.isString(fields) && fields) {\n      return this.parseKey(fields);\n    }\n    return '*';\n  };\n  /**\n   * parse table\n   * @param  {Mixed} tables []\n   * @return {}        []\n   */\n\n\n  _class.prototype.parseTable = function parseTable(table) {\n    var _this4 = this;\n\n    if (think.isString(table)) {\n      table = table.split(/\\s*,\\s*/);\n    }\n    if (think.isArray(table)) {\n      return table.map(function (item) {\n        return _this4.parseKey(item);\n      }).join(',');\n    } else if (think.isObject(table)) {\n      var data = [];\n      for (var key in table) {\n        data.push(this.parseKey(key) + ' AS ' + this.parseKey(table[key]));\n      }\n      return data.join(',');\n    }\n    return '';\n  };\n  /**\n   * get logic\n   * @param  {String} logic    []\n   * @param  {String} _default []\n   * @return {String}          []\n   */\n\n\n  _class.prototype.getLogic = function getLogic(logic) {\n    var _default = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'AND';\n\n    var list = ['AND', 'OR', 'XOR'];\n    if (think.isObject(logic)) {\n      var _logic = logic._logic;\n      delete logic._logic;\n      logic = _logic;\n    }\n    if (!logic || !think.isString(logic)) {\n      return _default;\n    }\n    logic = logic.toUpperCase();\n    if (list.indexOf(logic) > -1) {\n      return logic;\n    }\n    return _default;\n  };\n  /**\n   * parse where\n   * @param  {Mixed} where []\n   * @return {String}       []\n   */\n\n\n  _class.prototype.parseWhere = function parseWhere(where) {\n    var _this5 = this;\n\n    if (think.isEmpty(where)) {\n      return '';\n    } else if (think.isString(where)) {\n      return ' WHERE ' + where;\n    }\n    var logic = this.getLogic(where);\n    //safe key regexp\n    var keySafeRegExp = /^[\\w\\|\\&\\-\\.\\(\\)\\,]+$/;\n    var multi = where._multi;\n    delete where._multi;\n\n    var key = void 0,\n        val = void 0,\n        result = [],\n        str = '';\n\n    var fn = function fn(item, i) {\n      var v = multi ? val[i] : val;\n      return '(' + _this5.parseWhereItem(_this5.parseKey(item), v) + ')';\n    };\n\n    for (key in where) {\n      val = where[key];\n      str = '( ';\n      //_string: ''\n      if (['_string', '_complex', '_query'].indexOf(key) > -1) {\n        str += this.parseThinkWhere(key, val);\n      } else if (!keySafeRegExp.test(key)) {\n        throw new Error(think.locale('INVALID_WHERE_CONDITION_KEY'));\n      }\n      //title|content\n      else if (key.indexOf('|') > -1) {\n          str += key.split('|').map(fn).join(' OR ');\n        }\n        //title&content\n        else if (key.indexOf('&') > -1) {\n            str += key.split('&').map(fn).join(' AND ');\n          } else {\n            str += this.parseWhereItem(this.parseKey(key), val);\n          }\n      str += ' )';\n      result.push(str);\n    }\n    result = result.join(' ' + logic + ' ');\n    return result ? ' WHERE ' + result : '';\n  };\n  /**\n   * parse where item\n   * @param  {String} key []\n   * @param  {Mixed} val []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.parseWhereItem = function parseWhereItem(key, val) {\n    var _this6 = this;\n\n    // {id: null}\n    if (val === null) {\n      return key + ' IS NULL';\n    }\n    // {id: {'<': 10, '>': 1}}\n    else if (think.isObject(val)) {\n        var logic = this.getLogic(val);\n        var result = [];\n        for (var opr in val) {\n          var nop = opr.toUpperCase();\n          nop = this.comparison[nop] || nop;\n          var parsedValue = this.parseValue(val[opr]);\n          //{id: {IN: [1, 2, 3]}}\n          if (think.isArray(parsedValue)) {\n            result.push(key + ' ' + nop + ' (' + parsedValue.join(', ') + ')');\n          } else if (parsedValue === 'null') {\n            result.push(key + ' ' + (nop === '!=' ? 'IS NOT NULL' : 'IS NULL'));\n          } else {\n            result.push(key + ' ' + nop + ' ' + parsedValue);\n          }\n        }\n        return result.join(' ' + logic + ' ');\n      }\n      // where({id: [1, 2, 3]})\n      else if (think.isArray(val)) {\n          var flag = think.isNumber(val[0]) || think.isNumberString(val[0]);\n          if (flag) {\n            flag = val.every(function (item) {\n              return think.isNumber(item) || think.isNumberString(item);\n            });\n            if (flag) {\n              return key + ' IN ( ' + val.join(', ') + ' )';\n            }\n          }\n        } else {\n          return key + ' = ' + this.parseValue(val);\n        }\n\n    var whereStr = '';\n    var data = void 0;\n    if (think.isString(val[0])) {\n      (function () {\n        var val0 = val[0].toUpperCase();\n        val0 = _this6.comparison[val0] || val0;\n        // compare\n        if (/^(=|!=|>|>=|<|<=)$/.test(val0)) {\n          if (val[1] === null) {\n            whereStr += key + ' ' + (val[0] === '!=' ? 'IS NOT NULL' : 'IS NULL');\n          } else {\n            whereStr += key + ' ' + val0 + ' ' + _this6.parseValue(val[1]);\n          }\n        }\n        // like or not like\n        else if (/^(NOT\\s+LIKE|LIKE)$/.test(val0)) {\n            if (think.isArray(val[1])) {\n              //get like logic, default is OR\n              var likeLogic = _this6.getLogic(val[2], 'OR');\n              var like = val[1].map(function (item) {\n                return key + ' ' + val0 + ' ' + _this6.parseValue(item);\n              }).join(' ' + likeLogic + ' ');\n              whereStr += '(' + like + ')';\n            } else {\n              whereStr += key + ' ' + val0 + ' ' + _this6.parseValue(val[1]);\n            }\n          }\n          // exp\n          else if (val0 === 'EXP') {\n              whereStr += '(' + key + ' ' + val[1] + ')';\n            }\n            // in or not in\n            else if (val0 === 'IN' || val0 === 'NOT IN') {\n                if (val[2] === 'exp') {\n                  whereStr += key + ' ' + val0 + ' ' + val[1];\n                } else {\n                  if (think.isString(val[1])) {\n                    val[1] = val[1].split(',');\n                  }\n                  if (!think.isArray(val[1])) {\n                    val[1] = [val[1]];\n                  }\n                  val[1] = _this6.parseValue(val[1]);\n                  if (val[1].length === 1) {\n                    whereStr += key + (val0 === 'IN' ? ' = ' : ' != ') + val[1];\n                  } else {\n                    whereStr += key + ' ' + val0 + ' (' + val[1].join(',') + ')';\n                  }\n                }\n              }\n              //between\n              else if (val0 === 'BETWEEN') {\n                  data = think.isString(val[1]) ? val[1].split(',') : val[1];\n                  if (!think.isArray(data)) {\n                    data = [val[1], val[2]];\n                  }\n                  whereStr += ' (' + key + ' ' + val0 + ' ' + _this6.parseValue(data[0]);\n                  whereStr += ' AND ' + _this6.parseValue(data[1]) + ')';\n                } else {\n                  throw new Error(think.locale('WHERE_CONDITION_INVALID', key, (0, _stringify2.default)(val)));\n                }\n      })();\n    } else {\n\n      var length = val.length;\n      var _logic2 = this.getLogic(val[length - 1], '');\n      if (_logic2) {\n        length--;\n      } else {\n        _logic2 = 'AND';\n      }\n      var _result = [];\n      for (var i = 0; i < length; i++) {\n        var isArr = think.isArray(val[i]);\n        data = isArr ? val[i][1] : val[i];\n        var exp = ((isArr ? val[i][0] : '') + '').toUpperCase();\n        if (exp === 'EXP') {\n          _result.push('(' + key + ' ' + data + ')');\n        } else {\n          var op = isArr ? this.comparison[val[i][0].toUpperCase()] || val[i][0] : '=';\n          _result.push('(' + key + ' ' + op + ' ' + this.parseValue(data) + ')');\n        }\n      }\n      whereStr = _result.join(' ' + _logic2 + ' ');\n    }\n    return whereStr;\n  };\n  /**\n   * parse special condition\n   * @param  {String} key []\n   * @param  {Mixed} val []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.parseThinkWhere = function parseThinkWhere(key, val) {\n    switch (key) {\n      case '_string':\n        return val;\n      case '_complex':\n        return this.parseWhere(val).substr(6);\n      case '_query':\n        var where = think.isString(val) ? _querystring2.default.parse(val) : val;\n        var logic = this.getLogic(where);\n        var arr = [];\n        for (var name in where) {\n          val = this.parseKey(name) + ' = ' + this.parseValue(where[name]);\n          arr.push(val);\n        }\n        return arr.join(' ' + logic + ' ');\n    }\n    return '';\n  };\n  /**\n   * parse limit\n   * @param  {String} limit []\n   * @return {}       []\n   */\n\n\n  _class.prototype.parseLimit = function parseLimit(limit) {\n    if (think.isEmpty(limit)) {\n      return '';\n    }\n    if (think.isNumber(limit)) {\n      limit = Math.max(limit, 0);\n      return ' LIMIT ' + limit;\n    }\n    if (think.isString(limit)) {\n      limit = limit.split(/\\s*,\\s*/);\n    }\n    var data = [Math.max(limit[0] | 0, 0)];\n    if (limit[1]) {\n      data.push(Math.max(limit[1] | 0, 0));\n    }\n    return ' LIMIT ' + data.join(',');\n  };\n  /**\n   * parse join\n   * @param  {String} join []\n   * @return {String}      []\n   */\n\n\n  _class.prototype.parseJoin = function parseJoin(join) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (think.isEmpty(join)) {\n      return '';\n    }\n    var joinStr = '';\n    var defaultJoin = ' LEFT JOIN ';\n    if (think.isArray(join)) {\n      (function () {\n        var joins = {\n          'left': ' LEFT JOIN ',\n          'right': ' RIGHT JOIN ',\n          'inner': ' INNER JOIN '\n        };\n        join.forEach(function (val) {\n          if (think.isString(val)) {\n            var hasJoin = val.toLowerCase().indexOf(' join ') > -1;\n            joinStr += (hasJoin ? ' ' : defaultJoin) + val;\n          } else if (think.isObject(val)) {\n            var ret = [];\n            if (!('on' in val)) {\n              for (var key in val) {\n                var v = val[key];\n                if (think.isObject(v)) {\n                  v.table = key;\n                  ret.push(v);\n                } else {\n                  ret.push(val);\n                  break;\n                }\n              }\n            } else {\n              ret.push(val);\n            }\n            ret.forEach(function (item) {\n              var joinType = joins[item.join] || item.join || defaultJoin;\n              var table = item.table.trim();\n              //table is sql\n              if (table.indexOf(' ') > -1) {\n                if (table.indexOf('(') !== 0) {\n                  table = '(' + table + ')';\n                }\n                joinStr += joinType + table;\n              } else {\n                table = options.tablePrefix + table;\n                if (table.indexOf('.') === -1) {\n                  joinStr += joinType + '`' + table + '`';\n                } else {\n                  joinStr += joinType + table;\n                }\n              }\n              if (item.as) {\n                joinStr += ' AS `' + item.as + '`';\n              }\n              if (item.on) {\n                var mTable = options.alias || options.table;\n                if (mTable.indexOf('.') === -1) {\n                  mTable = '`' + mTable + '`';\n                }\n                var jTable = item.as || table;\n                if (jTable.indexOf('.') === -1) {\n                  jTable = '`' + jTable + '`';\n                }\n                if (think.isObject(item.on)) {\n                  var where = [];\n                  for (var _key in item.on) {\n                    where.push([_key.indexOf('.') > -1 ? _key : mTable + '.`' + _key + '`', '=', item.on[_key].indexOf('.') > -1 ? item.on[_key] : jTable + '.`' + item.on[_key] + '`'].join(''));\n                  }\n                  joinStr += ' ON (' + where.join(' AND ') + ')';\n                } else {\n                  if (think.isString(item.on)) {\n                    item.on = item.on.split(/\\s*,\\s*/);\n                  }\n                  joinStr += ' ON ' + (item.on[0].indexOf('.') > -1 ? item.on[0] : mTable + '.`' + item.on[0] + '`');\n                  joinStr += ' = ' + (item.on[1].indexOf('.') > -1 ? item.on[1] : jTable + '.`' + item.on[1] + '`');\n                }\n              }\n            });\n          }\n        });\n      })();\n    } else {\n      joinStr += defaultJoin + join;\n    }\n    return joinStr;\n  };\n  /**\n   * parse order\n   * @param  {String} order []\n   * @return {String}       []\n   */\n\n\n  _class.prototype.parseOrder = function parseOrder(order) {\n    var _this7 = this;\n\n    if (think.isEmpty(order)) {\n      return '';\n    }\n    if (think.isArray(order)) {\n      order = order.map(function (item) {\n        return _this7.parseKey(item);\n      }).join(',');\n    } else if (think.isObject(order)) {\n      var arr = [];\n      for (var key in order) {\n        var val = order[key];\n        val = this.parseKey(key) + ' ' + val;\n        arr.push(val);\n      }\n      order = arr.join(',');\n    }\n    return ' ORDER BY ' + order;\n  };\n  /**\n   * parse group\n   * @param  {String} group []\n   * @return {String}       []\n   */\n\n\n  _class.prototype.parseGroup = function parseGroup(group) {\n    if (think.isEmpty(group)) {\n      return '';\n    }\n    if (think.isString(group)) {\n      //group may be `date_format(create_time,'%Y-%m-%d')`\n      if (group.indexOf('(') !== -1) {\n        return ' GROUP BY ' + group;\n      }\n      group = group.split(/\\s*,\\s*/);\n    }\n    var result = group.map(function (item) {\n      if (item.indexOf('.') === -1) {\n        return '`' + item + '`';\n      } else {\n        item = item.split('.');\n        return item[0] + '.`' + item[1] + '`';\n      }\n    });\n    return ' GROUP BY ' + result.join(',');\n  };\n  /**\n   * parse having\n   * @param  {String} having []\n   * @return {}        []\n   */\n\n\n  _class.prototype.parseHaving = function parseHaving(having) {\n    return having ? ' HAVING ' + having : '';\n  };\n  /**\n   * parse comment\n   * @param  {String} comment []\n   * @return {String}         []\n   */\n\n\n  _class.prototype.parseComment = function parseComment(comment) {\n    return comment ? ' /*' + comment + '*/' : '';\n  };\n  /**\n   * parse distinct\n   * @param  {} distinct []\n   * @return {}          []\n   */\n\n\n  _class.prototype.parseDistinct = function parseDistinct(distinct) {\n    return distinct ? ' DISTINCT' : '';\n  };\n  /**\n   * parse union\n   * @param  {String} union []\n   * @return {}       []\n   */\n\n\n  _class.prototype.parseUnion = function parseUnion(union) {\n    var _this8 = this;\n\n    if (think.isEmpty(union)) {\n      return '';\n    }\n    if (think.isArray(union)) {\n      var sql = ' ';\n      union.forEach(function (item) {\n        sql += item.all ? 'UNION ALL ' : 'UNION ';\n        sql += '(' + (think.isObject(item.union) ? _this8.buildSelectSql(item.union) : item.union) + ')';\n      });\n      return sql;\n    } else {\n      return ' UNION (' + (think.isObject(union) ? this.buildSelectSql(union) : union) + ')';\n    }\n  };\n  /**\n   * parse lock\n   * @param  {Boolean} lock []\n   * @return {}      []\n   */\n\n\n  _class.prototype.parseLock = function parseLock(lock) {\n    if (!lock) {\n      return '';\n    }\n    return ' FOR UPDATE ';\n  };\n  /**\n   * parse sql\n   * @param  {String} sql     []\n   * @param  {Object} options []\n   * @return {String}         []\n   */\n\n\n  _class.prototype.parseSql = function parseSql(sql, options) {\n    var _this9 = this;\n\n    return sql.replace(/\\%([A-Z]+)\\%/g, function (a, type) {\n      type = type.toLowerCase();\n      var ucfirst = type[0].toUpperCase() + type.slice(1);\n      if (think.isFunction(_this9['parse' + ucfirst])) {\n        return _this9['parse' + ucfirst](options[type] || '', options);\n      }\n      return a;\n    }).replace(/\\s__([A-Z_-]+)__\\s?/g, function (a, b) {\n      return ' `' + _this9.config.prefix + b.toLowerCase() + '` ';\n    });\n  };\n  /**\n   * escape string, override in sub class\n   * @param  {String} str []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.escapeString = function escapeString(str) {\n    return str;\n  };\n  /**\n   * get select sql\n   * @param  {Object} options []\n   * @return {String}         [sql string]\n   */\n\n\n  _class.prototype.buildSelectSql = function buildSelectSql(options) {\n    return this.parseSql(this.selectSql, options) + this.parseLock(options.lock);\n  };\n\n  return _class;\n}(think.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/db/mongo.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _parse_mongo = require('./_parse_mongo.js');\n\nvar _parse_mongo2 = _interopRequireDefault(_parse_mongo);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MongoSocket = think.adapter('socket', 'mongo');\n\n/**\n * mongo db class\n */\n\nvar _class = function (_Parse) {\n  (0, _inherits3.default)(_class, _Parse);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Parse.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.init = function init(config) {\n    _Parse.prototype.init.call(this);\n    this.config = config;\n    this.lastInsertId = 0;\n    this._socket = null; //Mongo socket instance\n  };\n  /**\n   * connect mongo socket\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.socket = function socket() {\n    if (this._socket) {\n      return this._socket;\n    }\n    this._socket = MongoSocket.getInstance(this.config, thinkCache.DB);\n    return this._socket;\n  };\n  /**\n   * get connection\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.collection = function collection(table) {\n    var instance = this.socket();\n    return instance.getConnection().then(function (db) {\n      return db.collection(table);\n    });\n  };\n  /**\n   * get last insert id\n   * @return {String} []\n   */\n\n\n  _class.prototype.getLastInsertId = function getLastInsertId() {\n    return this.lastInsertId;\n  };\n  /**\n   * add data\n   * @param {Objec} data    []\n   * @param {Object} options []\n   */\n\n\n  _class.prototype.add = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(data, options) {\n      var collection, result;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.collection(options.table);\n\n            case 2:\n              collection = _context.sent;\n              _context.next = 5;\n              return collection.insert(data);\n\n            case 5:\n              result = _context.sent;\n\n              this.lastInsertId = data._id.toString();\n              return _context.abrupt('return', result);\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function add(_x, _x2) {\n      return _ref.apply(this, arguments);\n    }\n\n    return add;\n  }();\n  /**\n   * add multi data\n   * @param {Array} dataList []\n   * @param {Object} options [ {ordered: true}. If false, perform an unordered insert, and if an error occurs with one of documents, continue processing the remaining documents in the array.}]\n   * @param {Object} options  []\n   */\n\n\n  _class.prototype.addMany = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(dataList, options) {\n      var collection, result, insertedIds;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.collection(options.table);\n\n            case 2:\n              collection = _context2.sent;\n              _context2.next = 5;\n              return collection.insert(dataList, options);\n\n            case 5:\n              result = _context2.sent;\n              insertedIds = dataList.map(function (item) {\n                return item._id.toString();\n              });\n\n              this.lastInsertId = insertedIds;\n              return _context2.abrupt('return', result);\n\n            case 9:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function addMany(_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return addMany;\n  }();\n  /**\n   * set collection limit\n   * @param  {Object} collection []\n   * @param  {String} limit      []\n   * @return {Object}            []\n   */\n\n\n  _class.prototype.limit = function limit(collection, _limit) {\n    _limit = this.parseLimit(_limit);\n    if (_limit[0]) {\n      collection.skip(_limit[0]);\n    }\n    if (_limit[1]) {\n      collection.limit(_limit[1]);\n    }\n    return collection;\n  };\n  /**\n   * parse group\n   * @param  {String} group []\n   * @return {Object}       []\n   */\n\n\n  _class.prototype.group = function group(_group) {\n    _group = this.parseGroup(_group);\n    var length = _group.length;\n    if (length === 0) {\n      return { _id: null };\n    } else if (length === 1) {\n      return { _id: '$' + _group[0] };\n    } else {\n      var _ret = function () {\n        var result = {};\n        _group.forEach(function (item) {\n          result[item] = '$' + item;\n        });\n        return {\n          v: result\n        };\n      }();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === \"object\") return _ret.v;\n    }\n  };\n  /**\n   * select data\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.select = function () {\n    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(options) {\n      var collection, where, distinct;\n      return _regenerator2.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.collection(options.table);\n\n            case 2:\n              collection = _context3.sent;\n              where = this.parseWhere(options.where);\n\n              //get distinct field data\n\n              distinct = this.parseDistinct(options.distinct);\n\n              if (!distinct) {\n                _context3.next = 7;\n                break;\n              }\n\n              return _context3.abrupt('return', collection.distinct(distinct, where));\n\n            case 7:\n\n              collection = collection.find(where, this.parseField(options.field));\n              collection = this.limit(collection, options.limit);\n              collection = collection.sort(this.parseOrder(options.order));\n              return _context3.abrupt('return', collection.toArray());\n\n            case 11:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function select(_x5) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return select;\n  }();\n  /**\n   * update data\n   * @param  {Object} data    []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.update = function () {\n    var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(data, options) {\n      var collection, where, limit, flag, key;\n      return _regenerator2.default.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.collection(options.table);\n\n            case 2:\n              collection = _context4.sent;\n              where = this.parseWhere(options.where);\n              limit = this.parseLimit(options.limit);\n              // updates multiple documents that meet the query criteria. \n              // default only updates one document\n\n              if (limit[1] !== 1) {\n                options.multi = true;\n              }\n\n              // If set to true, creates a new document when no document matches the query criteria. \n              // The default value is false, which does not insert a new document when no match is found.\n              if (!options.upsert) {\n                options.upsert = false;\n              }\n\n              //add $set for data\n              flag = true;\n              _context4.t0 = _regenerator2.default.keys(data);\n\n            case 9:\n              if ((_context4.t1 = _context4.t0()).done) {\n                _context4.next = 16;\n                break;\n              }\n\n              key = _context4.t1.value;\n\n              if (!(key[0] !== '$')) {\n                _context4.next = 14;\n                break;\n              }\n\n              flag = false;\n              return _context4.abrupt('break', 16);\n\n            case 14:\n              _context4.next = 9;\n              break;\n\n            case 16:\n              if (!flag) {\n                data = { $set: data };\n              }\n\n              // update operator\n              // http://docs.mongodb.org/manual/reference/operator/update/#id1\n              return _context4.abrupt('return', collection.update(where, data, options));\n\n            case 18:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function update(_x6, _x7) {\n      return _ref4.apply(this, arguments);\n    }\n\n    return update;\n  }();\n  /**\n   * delete data\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.delete = function () {\n    var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(options) {\n      var collection, where, limit, removeOpt;\n      return _regenerator2.default.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.collection(options.table);\n\n            case 2:\n              collection = _context5.sent;\n              where = this.parseWhere(options.where);\n              limit = this.parseLimit(options.limit);\n\n              //delete one row\n\n              removeOpt = {};\n\n              if (limit[1] === 1) {\n                removeOpt.justOne = true;\n              }\n\n              return _context5.abrupt('return', collection.remove(where, removeOpt));\n\n            case 8:\n            case 'end':\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function _delete(_x8) {\n      return _ref5.apply(this, arguments);\n    }\n\n    return _delete;\n  }();\n  /**\n   * get count\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.count = function () {\n    var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(options) {\n      var collection, where, group, order, aggregate, fn;\n      return _regenerator2.default.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this.collection(options.table);\n\n            case 2:\n              collection = _context6.sent;\n              where = this.parseWhere(options.where);\n              group = this.group(options.group);\n\n              group.total = { $sum: 1 };\n\n              order = this.parseOrder(options.order);\n              aggregate = [];\n\n              if (!think.isEmpty(where)) {\n                aggregate.push({ $match: where });\n              }\n              aggregate.push({ $group: group });\n              if (!think.isEmpty(order)) {\n                aggregate.push({ $sort: order });\n              }\n              //make aggregate method to be a promise\n              fn = think.promisify(collection.aggregate, collection);\n              return _context6.abrupt('return', fn(aggregate).then(function (data) {\n                return data[0] && data[0].total || 0;\n              }));\n\n            case 13:\n            case 'end':\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function count(_x9) {\n      return _ref6.apply(this, arguments);\n    }\n\n    return count;\n  }();\n  /**\n   * get sum\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.sum = function () {\n    var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(options) {\n      var collection, where, group, order, aggregate, fn;\n      return _regenerator2.default.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return this.collection(options.table);\n\n            case 2:\n              collection = _context7.sent;\n              where = this.parseWhere(options.where);\n              group = this.group(options.group);\n\n              group.total = { $sum: '$' + options.field };\n\n              order = this.parseOrder(options.order);\n              aggregate = [];\n\n              if (!think.isEmpty(where)) {\n                aggregate.push({ $match: where });\n              }\n              aggregate.push({ $group: group });\n              if (!think.isEmpty(order)) {\n                aggregate.push({ $sort: order });\n              }\n              //make aggregate method to be a promise\n              fn = think.promisify(collection.aggregate, collection);\n              return _context7.abrupt('return', fn(aggregate).then(function (data) {\n                return data[0] && data[0].total || 0;\n              }));\n\n            case 13:\n            case 'end':\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function sum(_x10) {\n      return _ref7.apply(this, arguments);\n    }\n\n    return sum;\n  }();\n  /**\n   * create collection indexes\n   * @param  {String} table   []\n   * @param  {Object} indexes []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.ensureIndex = function ensureIndex(table, indexes) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (options === true) {\n      options = { unique: true };\n    }\n    if (think.isString(indexes)) {\n      indexes = indexes.split(/\\s*,\\s*/);\n    }\n    if (think.isArray(indexes)) {\n      (function () {\n        var result = {};\n        indexes.forEach(function (item) {\n          result[item] = 1;\n        });\n        indexes = result;\n      })();\n    }\n    return this.collection(table).then(function (collection) {\n      return collection.ensureIndex(indexes, options);\n    });\n  };\n  /**\n   * aggregate\n   * @param  {String} table   []\n   * @param  {Object} options []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.aggregate = function aggregate(table, options) {\n    return this.collection(table).then(function (collection) {\n      var fn = think.promisify(collection.aggregate, collection);\n      return fn(options);\n    });\n  };\n  /**\n   * close socket\n   * @return {} []\n   */\n\n\n  _class.prototype.close = function close() {\n    if (this._socket) {\n      this._socket.close();\n      this._socket = null;\n    }\n  };\n\n  return _class;\n}(_parse_mongo2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/db/_parse_mongo.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$base) {\n  (0, _inherits3.default)(_class, _think$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @return {} []\n   */\n  _class.prototype.init = function init() {\n    this.comparison = {\n      'EQ': '$eq',\n      '=': '$eq',\n      'NEQ': '$ne',\n      '!=': '$ne',\n      '<>': '$ne',\n      'GT': '$gt',\n      '>': '$gt',\n      'EGT': '$gte',\n      '>=': '$gte',\n      'LT': '$lt',\n      '<': '$lt',\n      'ELT': '$lte',\n      '<=': '$lte',\n      'OR': '$or',\n      'IN': '$in',\n      'NOTIN': '$nin'\n    };\n  };\n  /**\n   * parse field\n   * @param  {String} field   []\n   * @param  {Boolean} reverse []\n   * @return {Object}         []\n   */\n\n\n  _class.prototype.parseField = function parseField(field, reverse) {\n    if (!field) {\n      return {};\n    }\n    if (think.isString(field)) {\n      field = field.split(/\\s*,\\s*/);\n    }\n    if (think.isArray(field)) {\n      var _ret = function () {\n        var result = {};\n        field.forEach(function (item) {\n          result[item] = reverse ? 0 : 1;\n        });\n        return {\n          v: result\n        };\n      }();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === \"object\") return _ret.v;\n    }\n    if (reverse) {\n      for (var key in field) {\n        field[key] = 0;\n      }\n    }\n    return field;\n  };\n  /**\n   * parse limit\n   * @param  {Object} collection []\n   * @param  {Array} limit      []\n   * @return {Object}            []\n   */\n\n\n  _class.prototype.parseLimit = function parseLimit(limit) {\n    if (!limit) {\n      return [];\n    }\n    if (think.isNumber(limit)) {\n      return [0, limit];\n    }\n    if (think.isString(limit)) {\n      limit = limit.split(/\\s*,\\s*/);\n    }\n    var skip = limit[0] | 0;\n    var limitNum = limit[1] | 0;\n    if (limitNum) {\n      return [skip, limitNum];\n    }\n    return [0, skip];\n  };\n  /**\n   * parse order\n   * @param  {String} order []\n   * @return {Object}       []\n   */\n\n\n  _class.prototype.parseOrder = function parseOrder(order) {\n    if (!order) {\n      return {};\n    }\n    if (order === true || order === 'natural') {\n      return {\n        $natural: 1\n      };\n    }\n    if (think.isString(order)) {\n      var _ret2 = function () {\n        order = order.split(/\\s*,\\s*/);\n        var result = {};\n        order.forEach(function (item) {\n          item = item.split(' ');\n          var type = (item[1] || '').toLowerCase();\n          result[item[0].trim()] = type === 'desc' ? -1 : 1;\n        });\n        return {\n          v: result\n        };\n      }();\n\n      if ((typeof _ret2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret2)) === \"object\") return _ret2.v;\n    }\n    for (var key in order) {\n      if (order[key] === false || order[key] === 0) {\n        order[key] = -1;\n      } else if (order[key] !== -1) {\n        order[key] = 1;\n      }\n    }\n    return order;\n  };\n  /**\n   * parse group\n   * @param  {String} group []\n   * @return {Object}       []\n   */\n\n\n  _class.prototype.parseGroup = function parseGroup(group) {\n    if (think.isEmpty(group)) {\n      return '';\n    }\n    if (think.isString(group)) {\n      group = group.split(/\\s*,\\s*/);\n    }\n    return group;\n  };\n  /**\n   * parse where\n   * http://docs.mongodb.org/manual/reference/operator/query/\n   * @param  {Object} where []\n   * @return {Object}       []\n   */\n\n\n  _class.prototype.parseWhere = function parseWhere(where) {\n    var _this2 = this;\n\n    if (think.isArray(where)) {\n      return where.map(function (item) {\n        return _this2.parseWhere(item);\n      });\n    }\n\n    if (think.isObject(where)) {\n      var result = {};\n      for (var key in where) {\n        var value = where[key];\n        if (key === '_id' && think.isString(value)) {\n          var validator = think.require('validator');\n          if (validator.mongoId(value)) {\n            var _think$require = think.require('mongodb'),\n                ObjectID = _think$require.ObjectID;\n\n            result[key] = ObjectID(value);\n            continue;\n          }\n        }\n        key = this.comparison[key] || key;\n        if (think.isObject(value) || think.isArray(value)) {\n          value = this.parseWhere(value);\n        }\n        result[key] = value;\n      }\n      return result;\n    }\n    return where || {};\n  };\n  /**\n   * parse distinct\n   * @param  {String} distinct []\n   * @return {String}          []\n   */\n\n\n  _class.prototype.parseDistinct = function parseDistinct(distinct) {\n    return distinct;\n  };\n\n  return _class;\n}(think.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/socket/mongo.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _querystring = require('querystring');\n\nvar _querystring2 = _interopRequireDefault(_querystring);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * mongodb socket\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.init = function init(config) {\n    _Base.prototype.init.call(this, config);\n\n    this.config = think.extend({}, {\n      host: '127.0.0.1'\n    }, config);\n    this.config.port = this.config.port || 27017;\n  };\n  /**\n   * get connection\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getConnection = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var mongo, config, auth, options, hostStr, str;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.connection) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return', this.connection);\n\n            case 2:\n              _context.next = 4;\n              return think.npm('mongodb');\n\n            case 4:\n              mongo = _context.sent;\n              config = this.config;\n              auth = '';\n\n\n              this.mongo = mongo;\n              //connect with auth\n              if (this.config.user) {\n                auth = config.user + ':' + config.password + '@';\n              }\n              // connection options\n              // http://mongodb.github.io/node-mongodb-native/2.0/tutorials/urls/\n              options = '';\n\n              if (config.options) {\n                options = '?' + _querystring2.default.stringify(config.options);\n              }\n\n              //many hosts\n              hostStr = '';\n\n              if (think.isArray(config.host)) {\n                hostStr = config.host.map(function (item, i) {\n                  return item + ':' + (config.port[i] || config.port[0]);\n                }).join(',');\n              } else {\n                hostStr = config.host + ':' + config.port;\n              }\n\n              str = 'mongodb://' + auth + hostStr + '/' + config.database + options;\n              return _context.abrupt('return', think.await(str, function () {\n                var fn = think.promisify(mongo.MongoClient.connect, mongo.MongoClient);\n                var promise = fn(str, _this2.config).then(function (connection) {\n                  _this2.logConnect(str, 'mongodb');\n                  //set logger level\n                  if (config.log_level) {\n                    mongo.Logger.setLevel(config.log_level);\n                  }\n                  connection.on('error', function () {\n                    _this2.close();\n                  });\n                  connection.on('close', function () {\n                    _this2.connection = null;\n                  });\n                  _this2.connection = connection;\n                  return connection;\n                }).catch(function (err) {\n                  _this2.logConnect(str, 'mongodb');\n                  return _promise2.default.reject(err);\n                });\n                var err = new Error(str);\n                return think.error(promise, err);\n              }));\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getConnection() {\n      return _ref.apply(this, arguments);\n    }\n\n    return getConnection;\n  }();\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/db/mysql.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MysqlSocket = think.adapter('socket', 'mysql');\n/**\n * mysql db\n * @type {Class}\n */\n\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * get mysql socket instance\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.socket = function socket(sql) {\n    if (this._socket) {\n      return this._socket;\n    }\n    var config = think.extend({\n      sql: sql\n    }, this.config);\n    this._socket = MysqlSocket.getInstance(config, thinkCache.DB, ['sql']);\n    return this._socket;\n  };\n  /**\n   * get table schema\n   * @param  {String} table [table name]\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.getSchema = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(table) {\n      var data, ret;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.query('SHOW COLUMNS FROM ' + this.parseKey(table));\n\n            case 2:\n              data = _context.sent;\n              ret = {};\n\n              data.forEach(function (item) {\n                ret[item.Field] = {\n                  'name': item.Field,\n                  'type': item.Type,\n                  'required': item.Null === '',\n                  //'default': item.Default,\n                  'primary': item.Key === 'PRI',\n                  'unique': item.Key === 'UNI',\n                  'auto_increment': item.Extra.toLowerCase() === 'auto_increment'\n                };\n              });\n              return _context.abrupt('return', ret);\n\n            case 6:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getSchema(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return getSchema;\n  }();\n  /**\n   * parse key\n   * @param  {String} key []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.parseKey = function parseKey() {\n    var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    key = key.trim();\n    if (think.isEmpty(key)) {\n      return '';\n    }\n    if (think.isNumberString(key)) {\n      return key;\n    }\n    if (!/[,\\'\\\"\\*\\(\\)`.\\s]/.test(key)) {\n      key = '`' + key + '`';\n    }\n    return key;\n  };\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/socket/mysql.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _mysql = require('mysql');\n\nvar _mysql2 = _interopRequireDefault(_mysql);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * mysql socket class\n * @return {} []\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} config [connection options]\n   * @return {}        []\n   */\n  _class.prototype.init = function init() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _Base.prototype.init.call(this, config);\n\n    //merge config\n    this.config = think.extend({\n      host: '127.0.0.1',\n      user: 'root',\n      password: ''\n    }, config);\n    this.config.port = this.config.port || 3306;\n\n    //rename encoding to charset\n    if (!this.config.charset && this.config.encoding) {\n      this.config.charset = this.config.encoding;\n      delete this.config.encoding;\n    }\n\n    this.pool = null;\n  };\n  /**\n   * get connection\n   * @return {Promise} [conneciton handle]\n   */\n\n\n  _class.prototype.getConnection = function getConnection() {\n    var _this2 = this;\n\n    if (this.connection) {\n      return _promise2.default.resolve(this.connection);\n    }\n\n    var config = this.config;\n    var str = 'mysql://' + config.user + ':' + config.password + '@' + config.host + ':' + config.port + '/' + config.database;\n\n    if (this.pool) {\n      var fn = think.promisify(this.pool.getConnection, this.pool);\n      var promise = fn().catch(function (err) {\n        _this2.close();\n        return _promise2.default.reject(err);\n      });\n      var err = new Error(str);\n      return think.error(promise, err);\n    }\n\n    if (config.connectionLimit) {\n      this.logConnect(str, 'mysql');\n\n      this.pool = _mysql2.default.createPool(config);\n      return this.getConnection();\n    }\n\n    var awaitKey = str;\n    if (this.config.forceNewNum) {\n      awaitKey += '_' + this.config.forceNewNum;\n    }\n    return think.await(awaitKey, function () {\n      var deferred = think.defer();\n      _this2.connection = _mysql2.default.createConnection(config);\n      _this2.connection.connect(function (err) {\n\n        _this2.logConnect(str, 'mysql');\n\n        if (err) {\n          deferred.reject(err);\n          _this2.close();\n        } else {\n          deferred.resolve(_this2.connection);\n        }\n      });\n      _this2.connection.on('error', function () {\n        _this2.close();\n      });\n      _this2.connection.on('close', function () {\n        _this2.close();\n      });\n      //PROTOCOL_CONNECTION_LOST\n      _this2.connection.on('end', function () {\n        _this2.connection = null;\n      });\n      var err = new Error(str);\n      return think.error(deferred.promise, err);\n    }).then(function (connection) {\n      if (config.setNames) {\n        var _fn = think.promisify(connection.query, connection);\n        return _fn('SET NAMES ' + config.charset).then(function () {\n          return connection;\n        });\n      }\n      return connection;\n    });\n  };\n  /**\n   * query sql\n   * @param  {String} sql []\n   * @return {[type]}     []\n   */\n\n\n  _class.prototype.query = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(sql, nestTables) {\n      var _this3 = this;\n\n      var times = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      var connection, data, startTime, fn, promise;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getConnection();\n\n            case 2:\n              connection = _context2.sent;\n              data = {\n                sql: sql,\n                nestTables: nestTables\n              };\n              //query timeout\n\n              if (this.config.timeout) {\n                data.timeout = this.config.timeout;\n              }\n              startTime = Date.now();\n              fn = think.promisify(connection.query, connection);\n              promise = fn(data).then(function () {\n                var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n                // just call connection.release() and the connection will return to the pool, \n                // ready to be used again by someone else.\n                // https://github.com/felixge/node-mysql#pooling-connections\n                if (_this3.pool && connection.release) {\n                  connection.release();\n                }\n\n                if (_this3.config.log_sql) {\n                  think.log(sql, 'SQL', startTime);\n                }\n                return rows;\n              }).catch(function () {\n                var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(err) {\n                  return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (_this3.pool && connection.release) {\n                            connection.release();\n                          }\n                          //Connection lost: The server closed the connection.\n\n                          if (!(err.code === 'PROTOCOL_CONNECTION_LOST' || err.code === 'EPIPE')) {\n                            _context.next = 6;\n                            break;\n                          }\n\n                          _context.next = 4;\n                          return _this3.close();\n\n                        case 4:\n                          if (!(times <= 3)) {\n                            _context.next = 6;\n                            break;\n                          }\n\n                          return _context.abrupt('return', _this3.query(sql, nestTables, ++times));\n\n                        case 6:\n\n                          if (_this3.config.log_sql) {\n                            think.log(sql, 'SQL', startTime);\n                          }\n                          return _context.abrupt('return', _promise2.default.reject(err));\n\n                        case 8:\n                        case 'end':\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, _this3);\n                }));\n\n                return function (_x7) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n\n              promise = this.autoClose(promise);\n              return _context2.abrupt('return', think.error(promise));\n\n            case 10:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function query(_x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    }\n\n    return query;\n  }();\n  /**\n   * execute\n   * @param  {Array} args []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.execute = function execute() {\n    return this.query.apply(this, arguments);\n  };\n  /**\n   * close connections\n   * @return {} []\n   */\n\n\n  _class.prototype.close = function close() {\n    var _this4 = this;\n\n    if (this.pool) {\n      var fn = think.promisify(this.pool.end, this.pool);\n      return fn().then(function () {\n        return _this4.pool = null;\n      });\n    } else if (this.connection) {\n      var _fn2 = think.promisify(this.connection.end, this.connection);\n      return _fn2().then(function () {\n        return _this4.connection = null;\n      });\n    }\n  };\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/db/postgresql.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PostgreSocket = think.adapter('socket', 'postgresql');\n/**\n * postgre db\n */\n\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @return {} []\n   */\n  _class.prototype.init = function init() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    this.config = config;\n    //operate\n    this.comparison = {\n      'EQ': '=',\n      'NEQ': '!=',\n      '<>': '!=',\n      'GT': '>',\n      'EGT': '>=',\n      'LT': '<',\n      'ELT': '<=',\n      'NOTLIKE': 'NOT LIKE',\n      'LIKE': 'LIKE',\n      'NOTILIKE': 'NOT ILIKE',\n      'ILIKE': 'ILIKE',\n      'IN': 'IN',\n      'NOTIN': 'NOT IN',\n      'BETWEEN': 'BETWEEN',\n      'NOTBETWEEN': 'NOT BETWEEN'\n    };\n    this.selectSql = '%EXPLAIN%SELECT%DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT%%UNION%%COMMENT%';\n  };\n  /**\n   * get postgre socket instance\n   * @param  {Object} config []\n   * @return {}        []\n   */\n\n\n  _class.prototype.socket = function socket(sql) {\n    if (this._socket) {\n      return this._socket;\n    }\n    var config = think.extend({\n      sql: sql\n    }, this.config);\n    this._socket = PostgreSocket.getInstance(config, thinkCache.DB, ['sql']);\n    return this._socket;\n  };\n  /**\n   * get table info\n   * @param  {String} table [table name]\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.getSchema = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(table) {\n      var columnSql, columnsPromise, indexSql, indexPromise, _ref2, columns, indexs, schema, extra, reg;\n\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              columnSql = 'SELECT column_name,is_nullable,data_type FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name=\\'' + table + '\\'';\n              columnsPromise = this.query(columnSql);\n              indexSql = 'SELECT indexname,indexdef FROM pg_indexes WHERE tablename=\\'' + table + '\\'';\n              indexPromise = this.query(indexSql);\n              _context.next = 6;\n              return _promise2.default.all([columnsPromise, indexPromise]);\n\n            case 6:\n              _ref2 = _context.sent;\n              columns = _ref2[0];\n              indexs = _ref2[1];\n              schema = {};\n\n              columns.forEach(function (item) {\n                schema[item.column_name] = {\n                  name: item.column_name,\n                  type: item.data_type,\n                  required: item.is_nullable === 'NO',\n                  default: '',\n                  auto_increment: false\n                };\n              });\n              extra = {};\n              reg = /\\((\\w+)(?:, (\\w+))*\\)/;\n\n              indexs.forEach(function (item) {\n                var _item$indexdef$match = item.indexdef.match(reg),\n                    name = _item$indexdef$match[1],\n                    others = _item$indexdef$match.slice(2);\n\n                extra[name] = {};\n                if (item.indexdef.indexOf(' pkey ') > -1) {\n                  extra[name].primary = true;\n                }\n                var index = item.indexdef.indexOf(' UNIQUE ') > -1 ? 'unique' : 'index';\n                extra[name][index] = others.length ? others : true;\n              });\n\n              return _context.abrupt('return', think.extend(schema, extra));\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getSchema(_x2) {\n      return _ref.apply(this, arguments);\n    }\n\n    return getSchema;\n  }();\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.startTrans = function startTrans() {\n    if (this.transTimes === 0) {\n      this.transTimes++;\n      return this.execute('BEGIN');\n    }\n    this.transTimes++;\n    return _promise2.default.resolve();\n  };\n  /**\n  * parse where item\n  * @param  {String} key []\n  * @param  {Mixed} val []\n  * @return {String}     []\n  */\n\n\n  _class.prototype.parseWhereItem = function parseWhereItem(key, val) {\n    var _this2 = this;\n\n    // {id: null}\n    if (val === null) {\n      return key + ' IS NULL';\n    }\n    // {id: {'<': 10, '>': 1}}\n    else if (think.isObject(val)) {\n        var logic = this.getLogic(val);\n        var result = [];\n        for (var opr in val) {\n          var nop = opr.toUpperCase();\n          nop = this.comparison[nop] || nop;\n          var parsedValue = this.parseValue(val[opr]);\n          //{id: {IN: [1, 2, 3]}}\n          if (think.isArray(parsedValue)) {\n            result.push(key + ' ' + nop + ' (' + parsedValue.join(', ') + ')');\n          } else if (parsedValue === 'null') {\n            result.push(key + ' ' + (nop === '!=' ? 'IS NOT NULL' : 'IS NULL'));\n          } else {\n            result.push(key + ' ' + nop + ' ' + parsedValue);\n          }\n        }\n        return result.join(' ' + logic + ' ');\n      }\n      // where({id: [1, 2, 3]})\n      else if (think.isArray(val)) {\n          var flag = think.isNumber(val[0]) || think.isNumberString(val[0]);\n          if (flag) {\n            flag = val.every(function (item) {\n              return think.isNumber(item) || think.isNumberString(item);\n            });\n            if (flag) {\n              return key + ' IN ( ' + val.join(', ') + ' )';\n            }\n          }\n        } else {\n          return key + ' = ' + this.parseValue(val);\n        }\n\n    var whereStr = '';\n    var data = void 0;\n    if (think.isString(val[0])) {\n      (function () {\n        var val0 = val[0].toUpperCase();\n        val0 = _this2.comparison[val0] || val0;\n        // compare\n        if (/^(=|!=|>|>=|<|<=)$/.test(val0)) {\n          if (val[1] === null) {\n            whereStr += key + ' ' + (val[0] === '!=' ? 'IS NOT NULL' : 'IS NULL');\n          } else {\n            whereStr += key + ' ' + val0 + ' ' + _this2.parseValue(val[1]);\n          }\n        }\n        // like or not like\n        else if (/^(NOT\\s+LIKE|LIKE|NOT\\s+ILIKE|ILIKE)$/.test(val0)) {\n            if (think.isArray(val[1])) {\n              //get like logic, default is OR\n              var likeLogic = _this2.getLogic(val[2], 'OR');\n              var like = val[1].map(function (item) {\n                return key + ' ' + val0 + ' ' + _this2.parseValue(item);\n              }).join(' ' + likeLogic + ' ');\n              whereStr += '(' + like + ')';\n            } else {\n              whereStr += key + ' ' + val0 + ' ' + _this2.parseValue(val[1]);\n            }\n          }\n          // exp\n          else if (val0 === 'EXP') {\n              whereStr += '(' + key + ' ' + val[1] + ')';\n            }\n            // in or not in\n            else if (val0 === 'IN' || val0 === 'NOT IN') {\n                if (val[2] === 'exp') {\n                  whereStr += key + ' ' + val0 + ' ' + val[1];\n                } else {\n                  if (think.isString(val[1])) {\n                    val[1] = val[1].split(',');\n                  }\n                  if (!think.isArray(val[1])) {\n                    val[1] = [val[1]];\n                  }\n                  val[1] = _this2.parseValue(val[1]);\n                  if (val[1].length === 1) {\n                    whereStr += key + (val0 === 'IN' ? ' = ' : ' != ') + val[1];\n                  } else {\n                    whereStr += key + ' ' + val0 + ' (' + val[1].join(',') + ')';\n                  }\n                }\n              }\n              //between\n              else if (val0 === 'BETWEEN' || val0 === 'NOT BETWEEN') {\n                  data = think.isString(val[1]) ? val[1].split(',') : val[1];\n                  if (!think.isArray(data)) {\n                    data = [val[1], val[2]];\n                  }\n                  whereStr += ' (' + key + ' ' + val0 + ' ' + _this2.parseValue(data[0]);\n                  whereStr += ' AND ' + _this2.parseValue(data[1]) + ')';\n                } else {\n                  throw new Error(think.locale('WHERE_CONDITION_INVALID', key, (0, _stringify2.default)(val)));\n                }\n      })();\n    } else {\n\n      var length = val.length;\n      var _logic = this.getLogic(val[length - 1], '');\n      if (_logic) {\n        length--;\n      } else {\n        _logic = 'AND';\n      }\n      var _result = [];\n      for (var i = 0; i < length; i++) {\n        var isArr = think.isArray(val[i]);\n        data = isArr ? val[i][1] : val[i];\n        var exp = ((isArr ? val[i][0] : '') + '').toUpperCase();\n        if (exp === 'EXP') {\n          _result.push('(' + key + ' ' + data + ')');\n        } else {\n          var op = isArr ? this.comparison[val[i][0].toUpperCase()] || val[i][0] : '=';\n          _result.push('(' + key + ' ' + op + ' ' + this.parseValue(data) + ')');\n        }\n      }\n      whereStr = _result.join(' ' + _logic + ' ');\n    }\n    return whereStr;\n  };\n\n  _class.prototype.quoteKey = function quoteKey(key) {\n    if (key === undefined || think.isEmpty(key)) {\n      return '';\n    }\n    if (think.isNumber(key) || think.isNumberString(key)) {\n      return key;\n    }\n    if (/.*\\(.*\\)/.test(key)) {\n      return key;\n    }\n    if (/(.*[a-z0-9]+)(\\\")([a-z0-9]+.*)/i.test(key)) {\n      return key.replace(/(.*[a-z0-9]+)(\\\")([a-z0-9]+.*)/i, '\\\"$1\\\"\\\"$3\\\"');\n    } else {\n      return '\"' + key + '\"';\n    }\n  };\n  /**\n   * parse key\n   * @param  {String} key []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.parseKey = function parseKey(key) {\n    var _this3 = this;\n\n    if (key === undefined) {\n      return '';\n    }\n    if (think.isNumber(key) || think.isNumberString(key)) {\n      return key;\n    }\n    key = key.trim();\n    if (think.isEmpty(key)) {\n      return '';\n    }\n    // EXAMPLE: 'user_age(birthday)' or 'user_age(birthday) AS age' \n    if (/.*\\(.*\\)/.test(key)) {\n      return key;\n    }\n    var isDistinct = false;\n    if (/DISTINCT (.*)/i.test(key)) {\n      isDistinct = true;\n      key = key.replace(/DISTINCT (.*)/i, '$1');\n    }\n    if (/.*\\..*/.test(key)) {\n      var k = key.split('.'),\n          j = [];\n      k.forEach(function (i) {\n        var tmp = _this3.quoteKey(i.replace(/^[\\\"]+|[\\\"]+$/g, ''));\n        j.push('' + tmp);\n      });\n      key = j.join('.');\n    } else {\n      key = this.quoteKey(key.replace(/^[\\\"]+|[\\\"]+$/g, ''));\n    }\n    return '' + (isDistinct ? 'DISTINCT ' : '') + key;\n  };\n  /**\n   * parse group\n   * @param  {String} group []\n   * @return {String}       []\n   */\n\n\n  _class.prototype.parseGroup = function parseGroup(group) {\n    if (think.isEmpty(group)) {\n      return '';\n    }\n    if (think.isString(group)) {\n      //group may be `date_format(create_time,'%Y-%m-%d')`\n      if (group.indexOf('(') !== -1) {\n        return ' GROUP BY ' + group;\n      }\n      group = group.split(/\\s*,\\s*/);\n    }\n    var result;\n\n    if (think.isArray(group)) {\n      result = group.map(function (item) {\n        item = item.replace(/[\\\"]/g, '');\n        var type = '',\n            regexp = /(.*) (ASC|DESC)/i,\n            matches = item.match(regexp);\n\n        if (matches !== null) {\n          type = ' ' + matches[2];\n          item = item.replace(regexp, '$1');\n        }\n\n        if (item.indexOf('.') === -1) {\n          return '\"' + item + '\"' + type;\n        } else {\n          item = item.split('.');\n          return '\"' + item[0] + '\".\"' + item[1] + '\"' + type;\n        }\n      });\n\n      return ' GROUP BY ' + result.join(', ');\n      /**\n       * Example: { 'name': 'DESC' } || { 'name': -1 }\n       */\n    } else if (think.isObject(group)) {\n      result = [];\n\n      for (var key in group) {\n        var type = group[key],\n            matches = void 0;\n\n        key = key.replace(/[\\\"]/g, '');\n\n        if (think.isString(type)) {\n          matches = type.match(/.*(ASC|DESC)/i);\n        }\n\n        if (matches) {\n          type = ' ' + matches[1];\n        } else if (think.isNumber(type) || think.isNumberString(type)) {\n          type = parseInt(type) === -1 ? ' DESC' : ' ASC';\n        }\n\n        if (key.indexOf('.') === -1) {\n          result.push('\"' + key + '\"' + type);\n        } else {\n          key = key.split('.');\n\n          result.push('\"' + key[0] + '\".\"' + key[1] + '\"' + type);\n        }\n      }\n\n      return ' GROUP BY ' + result.join(', ');\n    } else {\n      /** Unknown format: */\n    }\n  };\n  /**\n   * parse limit\n   * @param  {String} limit []\n   * @return {String}       []\n   */\n\n\n  _class.prototype.parseLimit = function parseLimit(limit) {\n    if (think.isEmpty(limit)) {\n      return '';\n    }\n    if (think.isNumber(limit)) {\n      return ' LIMIT ' + limit;\n    }\n    if (think.isString(limit)) {\n      limit = limit.split(/\\s*,\\s*/);\n    }\n    if (limit[1]) {\n      return ' LIMIT ' + (limit[1] | 0) + ' OFFSET ' + (limit[0] | 0);\n    }\n    return ' LIMIT ' + (limit[0] | 0);\n  };\n  /**\n   * parse value\n   * @param  {Mixed} value []\n   * @return {Mixed}       []\n   */\n\n\n  _class.prototype.parseValue = function parseValue(value) {\n    var _this4 = this;\n\n    if (think.isString(value)) {\n      value = 'E\\'' + this.escapeString(value) + '\\'';\n    } else if (think.isArray(value)) {\n      if (/^exp$/.test(value[0])) {\n        value = value[1];\n      } else {\n        value = value.map(function (item) {\n          return _this4.parseValue(item);\n        });\n      }\n    } else if (think.isBoolean(value)) {\n      value = value ? 'true' : 'false';\n    } else if (value === null) {\n      value = 'null';\n    }\n    return value;\n  };\n  /**\n   * query string\n   * @param  string str\n   * @return promise\n   */\n\n\n  _class.prototype.query = function query(sql) {\n    var _this5 = this;\n\n    this.sql = sql;\n    return think.await(sql, function () {\n      return _this5.socket(sql).query(sql).then(function (data) {\n        return _this5.bufferToString(data.rows);\n      });\n    });\n  };\n  /**\n   * execute sql\n   * @param  {String} sql []\n   * @return {}     []\n   */\n\n\n  _class.prototype.execute = function execute(sql) {\n    var _this6 = this;\n\n    this.sql = sql;\n    var insertInto = 'insert into ';\n    var prefix = sql.slice(0, insertInto.length).toLowerCase();\n    var isInsert = false;\n    if (prefix === insertInto) {\n      sql += ' RETURNING id';\n      isInsert = true;\n    }\n    return this.socket(sql).execute(sql).then(function (data) {\n      if (isInsert) {\n        _this6.lastInsertId = data.rows[0].id;\n      }\n      return data.rowCount || 0;\n    });\n  };\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/socket/postgresql.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * postgres socket class\n * @return {} []\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.init = function init(config) {\n    _Base.prototype.init.call(this, config);\n\n    config.port = config.port || 5432;\n    //config.password = config.pwd;\n    //delete config.pwd;\n\n    this.config = config;\n  };\n  /**\n   * get pg\n   * @return {} []\n   */\n\n\n  _class.prototype.getPG = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var pg;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.pg) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return', this.pg);\n\n            case 2:\n              _context.next = 4;\n              return think.npm('pg');\n\n            case 4:\n              pg = _context.sent;\n\n              //set poolSize\n              if (this.config.poolSize) {\n                pg.defaults.poolSize = this.config.poolSize;\n              }\n              //set poolIdleTimeout, change default `30 seconds` to 8 hours\n              pg.defaults.poolIdleTimeout = this.config.poolIdleTimeout * 1000 || 8 * 60 * 60 * 1000;\n\n              //when has error, close connection\n              pg.on('error', function () {\n                _this2.close();\n              });\n              pg.on('end', function () {\n                _this2.close();\n              });\n              pg.on('close', function () {\n                _this2.close();\n              });\n              this.pg = pg;\n              return _context.abrupt('return', pg);\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getPG() {\n      return _ref.apply(this, arguments);\n    }\n\n    return getPG;\n  }();\n  /**\n   * get connection\n   * @return {} []\n   */\n\n\n  _class.prototype.getConnection = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {\n      var _this3 = this;\n\n      var pg, config, connectionStr;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.connection) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt('return', this.connection);\n\n            case 2:\n              _context2.next = 4;\n              return this.getPG();\n\n            case 4:\n              pg = _context2.sent;\n              config = this.config;\n              connectionStr = 'postgres://' + config.user + ':' + config.password + '@' + config.host + ':' + config.port + '/' + config.database;\n              return _context2.abrupt('return', think.await(connectionStr, function () {\n                var deferred = think.defer();\n                pg.connect(_this3.config, function (err, client, done) {\n                  _this3.logConnect(connectionStr, 'postgre');\n                  if (err) {\n                    deferred.reject(err);\n                  } else {\n                    _this3.connection = client;\n                    _this3.release = done;\n                    deferred.resolve(client);\n                  }\n                });\n                return deferred.promise;\n              }));\n\n            case 8:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getConnection() {\n      return _ref2.apply(this, arguments);\n    }\n\n    return getConnection;\n  }();\n  /**\n   * query\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.query = function () {\n    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(sql) {\n      var _this4 = this;\n\n      var connection, startTime, fn, promise;\n      return _regenerator2.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getConnection();\n\n            case 2:\n              connection = _context3.sent;\n              startTime = Date.now();\n              fn = think.promisify(connection.query, connection);\n              promise = fn(sql).then(function (data) {\n                _this4.release();\n                if (_this4.config.log_sql) {\n                  think.log(sql, 'SQL', startTime);\n                }\n                return data;\n              }).catch(function (err) {\n                _this4.release();\n\n                //when socket is closed, try it\n                if (err.code === 'EPIPE') {\n                  _this4.close();\n                  return _this4.query(sql);\n                }\n\n                if (_this4.config.log_sql) {\n                  think.log(sql, 'SQL', startTime);\n                }\n                return _promise2.default.reject(err);\n              });\n              return _context3.abrupt('return', think.error(promise));\n\n            case 7:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function query(_x) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return query;\n  }();\n  /**\n   * execute sql\n   * @param  {Array} args []\n   * @return {Promise}         []\n   */\n\n\n  _class.prototype.execute = function execute() {\n    return this.query.apply(this, arguments);\n  };\n  /**\n   * close connection\n   * @return {} []\n   */\n\n\n  _class.prototype.close = function close() {\n    if (this.connection) {\n      this.connection.end();\n      this.connection = null;\n    }\n  };\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/db/sqlite.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SqliteSocket = think.adapter('socket', 'sqlite');\n/**\n * sqlite db\n */\n\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * get sqlite socket instance\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.socket = function socket(sql) {\n    if (this._socket) {\n      return this._socket;\n    }\n    var config = think.extend({\n      sql: sql\n    }, this.config);\n    this._socket = SqliteSocket.getInstance(config, thinkCache.DB, ['sql']);\n    return this._socket;\n  };\n  /**\n   * get table info\n   * @param  {String} table [table name]\n   * @return {Promise}       []\n   */\n\n\n  _class.prototype.getSchema = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(table) {\n      var _this2 = this;\n\n      var fieldPromise, indexPromise, ret, _ref2, data, indexes;\n\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              fieldPromise = this.query('PRAGMA table_info( ' + table + ' )');\n              indexPromise = this.query('PRAGMA INDEX_LIST( ' + table + ' )').then(function (list) {\n                var indexes = {};\n                var promises = list.map(function (item) {\n                  if (item.unique) {\n                    return _this2.query('PRAGMA index_info( ' + item.name + ' )').then(function (data) {\n                      data.forEach(function (item) {\n                        indexes[item.name] = { unique: true };\n                      });\n                    });\n                  }\n                });\n                return _promise2.default.all(promises).then(function () {\n                  return indexes;\n                });\n              });\n              ret = {};\n              _context.next = 5;\n              return _promise2.default.all([fieldPromise, indexPromise]);\n\n            case 5:\n              _ref2 = _context.sent;\n              data = _ref2[0];\n              indexes = _ref2[1];\n\n              data.forEach(function (item) {\n                ret[item.name] = {\n                  name: item.name,\n                  type: item.type,\n                  required: !!item.notnull,\n                  //default: item.dflt_value,\n                  primary: !!item.pk,\n                  auto_increment: false,\n                  unique: !!(!item.pk && indexes[item.name] && indexes[item.name].unique)\n                };\n              });\n              return _context.abrupt('return', ret);\n\n            case 10:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getSchema(_x) {\n      return _ref.apply(this, arguments);\n    }\n\n    return getSchema;\n  }();\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.startTrans = function startTrans() {\n    if (this.transTimes === 0) {\n      this.transTimes++;\n      return this.execute('BEGIN TRANSACTION');\n    }\n    this.transTimes++;\n    return _promise2.default.resolve();\n  };\n  /**\n   * escape string\n   * @param  {String} str []\n   * @return {String}     []\n   */\n\n\n  _class.prototype.escapeString = function escapeString(str) {\n    return str.replace(/\\'/g, '\\'\\'');\n  };\n  /**\n   * parse limit\n   * @param  {Array} limit []\n   * @return {String}       []\n   */\n\n\n  _class.prototype.parseLimit = function parseLimit(limit) {\n    if (think.isEmpty(limit)) {\n      return '';\n    }\n    if (think.isNumber(limit)) {\n      return ' LIMIT ' + limit;\n    }\n    if (think.isString(limit)) {\n      limit = limit.split(/\\s*,\\s*/);\n    }\n    if (limit[1]) {\n      return ' LIMIT ' + (limit[1] | 0) + ' OFFSET ' + (limit[0] | 0);\n    }\n    return ' LIMIT ' + (limit[0] | 0);\n  };\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/socket/sqlite.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * sqlite socket\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  _class.prototype.init = function init() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _Base.prototype.init.call(this, config);\n\n    if (config.path === true) {\n      config.path = ':memory:';\n    } else {\n      config.path = config.path || think.RUNTIME_PATH + _path2.default.sep + 'sqlite';\n      think.mkdir(config.path);\n      config.path += '' + _path2.default.sep + config.database + '.sqlite';\n    }\n    this.config = config;\n  };\n  /**\n   * get connection\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getConnection = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var sqlite;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.connection) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return', this.connection);\n\n            case 2:\n              _context.next = 4;\n              return think.npm('sqlite3');\n\n            case 4:\n              sqlite = _context.sent;\n\n              if (this.config.verbose) {\n                sqlite = sqlite.verbose();\n              }\n              return _context.abrupt('return', think.await(this.config.path, function () {\n                var deferred = think.defer();\n                var db = new sqlite.Database(_this2.config.path, function (err) {\n                  _this2.logConnect('sqlite://' + _this2.config.path, 'sqlite');\n\n                  if (err) {\n                    deferred.reject(err);\n                  } else {\n                    _this2.connection = db;\n                    deferred.resolve(db);\n                  }\n                });\n                //set timeout\n                if (_this2.config.timeout) {\n                  db.configure('busyTimeout', _this2.config.timeout * 1000);\n                }\n                var err = new Error('sqlite://' + _this2.config.path);\n                return think.error(deferred.promise, err);\n              }));\n\n            case 7:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getConnection() {\n      return _ref.apply(this, arguments);\n    }\n\n    return getConnection;\n  }();\n  /**\n   * query sql\n   * @param  {String} sql []\n   * @return {Promise}     []\n   */\n\n\n  _class.prototype.execute = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(sql) {\n      var connection, deferred, startTime, logSql;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getConnection();\n\n            case 2:\n              connection = _context2.sent;\n              deferred = think.defer();\n              startTime = Date.now();\n              logSql = this.config.log_sql;\n              //can not use arrow functions in here\n\n              connection.run(sql, function (err) {\n                if (logSql) {\n                  think.log(sql, 'SQL', startTime);\n                }\n                if (err) {\n                  deferred.reject(err);\n                } else {\n                  deferred.resolve({\n                    insertId: this.lastID,\n                    affectedRows: this.changes\n                  });\n                }\n              });\n              return _context2.abrupt('return', think.error(deferred.promise));\n\n            case 8:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function execute(_x2) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return execute;\n  }();\n  /**\n   * execute sql\n   * @param  {String} sql []\n   * @return {Promise}     []\n   */\n\n\n  _class.prototype.query = function () {\n    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(sql) {\n      var _this3 = this;\n\n      var connection, startTime, fn, promise;\n      return _regenerator2.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getConnection();\n\n            case 2:\n              connection = _context3.sent;\n              startTime = Date.now();\n              fn = think.promisify(connection.all, connection);\n              promise = fn(sql).then(function (data) {\n                if (_this3.config.log_sql) {\n                  think.log(sql, 'SQL', startTime);\n                }\n                return data;\n              }).catch(function (err) {\n                if (_this3.config.log_sql) {\n                  think.log(sql, 'SQL', startTime);\n                }\n                return _promise2.default.reject(err);\n              });\n              return _context3.abrupt('return', think.error(promise));\n\n            case 7:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function query(_x3) {\n      return _ref3.apply(this, arguments);\n    }\n\n    return query;\n  }();\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/session/db.js":"'use strict';\n/**\n * db session\n \n  DROP TABLE IF EXISTS `think_session`;\n  CREATE TABLE `think_session` (\n    `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n    `cookie` varchar(255) NOT NULL DEFAULT '',\n    `data` text,\n    `expire` bigint(11) NOT NULL,\n    PRIMARY KEY (`id`),\n    UNIQUE KEY `cookie` (`cookie`),\n    KEY `expire` (`expire`)\n  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n */\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  _class.prototype.init = function init(options) {\n\n    options = think.parseConfig(think.config('session'), options);\n    this.cookie = options.cookie;\n    this.newCookie = options.newCookie;\n\n    this.timeout = options.timeout;\n    this.isChanged = false;\n\n    //let dbConfig = think.extend({}, think.config('db'), options);\n    this.model = think.model('session', think.extend({\n      from: 'session'\n    }, think.config('db')));\n\n    this.gcType = 'session_db';\n    think.gc(this);\n  };\n  /**\n   * get session data\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getData = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var data;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.data) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return', this.data);\n\n            case 2:\n              if (!this.newCookie) {\n                _context.next = 7;\n                break;\n              }\n\n              this.data = {};\n              _context.next = 6;\n              return this.model.add({ cookie: this.cookie, expire: Date.now() + this.timeout * 1000 });\n\n            case 6:\n              return _context.abrupt('return', this.data);\n\n            case 7:\n              _context.next = 9;\n              return think.await('session_' + this.cookie, function () {\n                return _this2.model.where({ cookie: _this2.cookie }).find();\n              });\n\n            case 9:\n              data = _context.sent;\n\n              if (!this.data) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt('return', this.data);\n\n            case 12:\n\n              this.data = {};\n\n              if (!think.isEmpty(data)) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 16;\n              return this.model.add({ cookie: this.cookie, expire: Date.now() + this.timeout * 1000 });\n\n            case 16:\n              return _context.abrupt('return', this.data);\n\n            case 17:\n              if (!(Date.now() > data.expire)) {\n                _context.next = 19;\n                break;\n              }\n\n              return _context.abrupt('return', this.data);\n\n            case 19:\n\n              try {\n                this.data = JSON.parse(data.data) || {};\n              } catch (e) {}\n\n              return _context.abrupt('return', this.data);\n\n            case 21:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getData() {\n      return _ref.apply(this, arguments);\n    }\n\n    return getData;\n  }();\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.get = function get(name) {\n    var _this3 = this;\n\n    return this.getData().then(function () {\n      return name ? _this3.data[name] : _this3.data;\n    });\n  };\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n\n\n  _class.prototype.set = function set(name, value) {\n    var _this4 = this;\n\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    this.timeout = timeout;\n    return this.getData().then(function () {\n      _this4.isChanged = true;\n      _this4.data[name] = value;\n    });\n  };\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.delete = function _delete(name) {\n    var _this5 = this;\n\n    return this.getData().then(function () {\n      _this5.isChanged = true;\n      if (name) {\n        delete _this5.data[name];\n      } else {\n        _this5.data = {};\n      }\n    });\n  };\n  /**\n   * flush data\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.flush = function flush() {\n    var _this6 = this;\n\n    var data = {\n      expire: Date.now() + this.timeout * 1000,\n      timeout: this.timeout\n    };\n    return this.getData().then(function () {\n      //if session is empty and not changed, not flush\n      if (!_this6.isChanged && think.isEmpty(_this6.data)) {\n        return;\n      }\n      //update data when data is changed\n      if (_this6.isChanged) {\n        data.data = (0, _stringify2.default)(_this6.data);\n      }\n      return _this6.model.where({ cookie: _this6.cookie }).update(data);\n    });\n  };\n  /**\n   * gc\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.gc = function gc() {\n    return this.model.where({ expire: { '<': Date.now() } }).delete();\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/session/file.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * file store\n * @type {Class}\n */\nvar FileStore = think.adapter('store', 'file');\n\n/**\n * file session\n */\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  _class.prototype.init = function init(options) {\n\n    options = think.parseConfig(think.config('session'), options);\n\n    this.timeout = options.timeout;\n    this.cookie = options.cookie;\n    this.newCookie = options.newCookie;\n    this.path = options.path || _path2.default.normalize(_os2.default.tmpdir() + _path2.default.sep + 'thinkjs');\n    this.path_depth = options.path_depth || 1;\n\n    this.store = new FileStore({\n      path: this.path\n    });\n\n    this.gcType = this.path;\n    think.gc(this);\n\n    this.data = null;\n    this.dataEmpty = false;\n  };\n  /**\n   * get stored file path\n   * @return {String} []\n   */\n\n\n  _class.prototype.getFilepath = function getFilepath() {\n    var name = this.cookie;\n    var dir = name.slice(0, this.path_depth).split('').join(_path2.default.sep);\n    return '' + dir + _path2.default.sep + name + '.json';\n  };\n  /**\n   * get init data\n   * @return {} []\n   */\n\n\n  _class.prototype.getInitData = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var filepath, data;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.newCookie) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return', {});\n\n            case 2:\n              filepath = this.getFilepath();\n              //ignore error\n\n              _context.next = 5;\n              return think.await('session_' + this.cookie, function () {\n                return _this2.store.get(filepath).catch(function () {});\n              });\n\n            case 5:\n              data = _context.sent;\n\n              if (data) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt('return', {});\n\n            case 8:\n              _context.prev = 8;\n\n              data = JSON.parse(data);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context['catch'](8);\n              return _context.abrupt('return', {});\n\n            case 15:\n              if (!(Date.now() > data.expire)) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.next = 18;\n              return this.store.delete(filepath);\n\n            case 18:\n              _context.next = 21;\n              break;\n\n            case 20:\n              return _context.abrupt('return', data.data || {});\n\n            case 21:\n              return _context.abrupt('return', {});\n\n            case 22:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[8, 12]]);\n    }));\n\n    function getInitData() {\n      return _ref.apply(this, arguments);\n    }\n\n    return getInitData;\n  }();\n  /**\n   * get session data\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getData = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {\n      var data;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!this.data) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt('return', this.data);\n\n            case 2:\n              _context2.next = 4;\n              return this.getInitData();\n\n            case 4:\n              data = _context2.sent;\n\n              if (think.isEmpty(data)) {\n                this.dataEmpty = true;\n              }\n              this.data = data;\n              return _context2.abrupt('return', this.data);\n\n            case 8:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getData() {\n      return _ref2.apply(this, arguments);\n    }\n\n    return getData;\n  }();\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.get = function get(name) {\n    var _this3 = this;\n\n    return this.getData().then(function () {\n      return name ? _this3.data[name] : _this3.data;\n    });\n  };\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n\n\n  _class.prototype.set = function set(name, value) {\n    var _this4 = this;\n\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    this.timeout = timeout;\n    return this.getData().then(function () {\n      _this4.data[name] = value;\n    });\n  };\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.delete = function _delete(name) {\n    var _this5 = this;\n\n    return this.getData().then(function () {\n      if (name) {\n        delete _this5.data[name];\n      } else {\n        _this5.data = {};\n      }\n    });\n  };\n  /**\n   * flush data to file\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.flush = function () {\n    var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {\n      var data, saveData, filepath;\n      return _regenerator2.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getData();\n\n            case 2:\n              data = _context3.sent;\n\n              if (!(this.dataEmpty && think.isEmpty(data))) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt('return');\n\n            case 5:\n              saveData = {\n                data: this.data,\n                expire: Date.now() + this.timeout * 1000,\n                timeout: this.timeout\n              };\n              filepath = this.getFilepath();\n              return _context3.abrupt('return', this.store.set(filepath, (0, _stringify2.default)(saveData)));\n\n            case 8:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function flush() {\n      return _ref3.apply(this, arguments);\n    }\n\n    return flush;\n  }();\n  /**\n   * gc\n   * @return {} []\n   */\n\n\n  _class.prototype.gc = function gc() {\n    var _this6 = this;\n\n    var now = Date.now();\n    return this.store.list().then(function (files) {\n      files.forEach(function (file) {\n        var filepath = '' + _this6.path + _path2.default.sep + file;\n        var content = _fs2.default.readFileSync(filepath, 'utf8');\n        try {\n          var data = JSON.parse(content);\n          if (now > data.expire) {\n            _fs2.default.unlink(filepath, function () {});\n          }\n        } catch (e) {\n          _fs2.default.unlink(filepath, function () {});\n        }\n      });\n    });\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/session/memory.js":"'use strict';\n\n/**\n * base store\n * @type {Class}\n */\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar BaseStore = think.adapter('store', 'memory');\n\n/**\n * memory session\n */\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init \n   * @param  {Object} config []\n   * @return {}         []\n   */\n  _class.prototype.init = function init(options) {\n\n    options = think.parseConfig(think.config('session'), options);\n\n    this.timeout = options.timeout;\n    //key is session cookie value\n    this.cookie = options.cookie;\n    //store\n    this.store = new BaseStore({\n      type: thinkCache.SESSION\n    });\n    //set gc type & start gc\n    this.gcType = 'session_base';\n    think.gc(this);\n  };\n  /**\n   * get session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.get = function get(name) {\n    var _this2 = this;\n\n    return this.store.get(this.cookie).then(function (data) {\n      if (!data) {\n        return;\n      }\n      if (Date.now() > data.expire) {\n        return _this2.store.delete(_this2.cookie);\n      }\n      data.expire = Date.now() + _this2.timeout * 1000;\n      var value = data.data;\n      if (name) {\n        return think.clone(value[name]);\n      }\n      return think.clone(value);\n    });\n  };\n  /**\n   * set session data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.set = function set(name, value) {\n    var _this3 = this;\n\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    value = think.clone(value);\n    return this.store.get(this.cookie).then(function (data) {\n      var _data;\n\n      data = data || {};\n      data = think.extend({}, data, {\n        expire: Date.now() + timeout * 1000,\n        timeout: timeout,\n        data: (_data = {}, _data[name] = value, _data)\n      });\n      return _this3.store.set(_this3.cookie, data);\n    });\n  };\n  /**\n   * delete session data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.delete = function _delete(name) {\n    var _this4 = this;\n\n    return this.store.get(this.cookie).then(function (data) {\n      if (!data) {\n        return;\n      }\n      if (!name) {\n        return _this4.store.delete(_this4.cookie);\n      }\n      delete data.data[name];\n    });\n  };\n  /**\n   * gc\n   * is internal method\n   * @return {} []\n   */\n\n\n  _class.prototype.gc = function gc() {\n    var now = Date.now();\n    return this.store.list().then(function (list) {\n      for (var key in list) {\n        var item = list[key];\n        if (item && now > item.expire) {\n          delete list[key];\n        }\n      }\n    });\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/session/redis.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar RedisSocket = think.adapter('socket', 'redis');\n\n/**\n * redis session\n */\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  _class.prototype.init = function init(options) {\n\n    this.options = think.parseConfig(think.config('session'), options);\n\n    this.timeout = this.options.timeout;\n    this.cookie = this.options.cookie;\n  };\n  /**\n   * get redis instance\n   * @return {Object} []\n   */\n\n\n  _class.prototype.getRedisInstance = function getRedisInstance(name) {\n    var options = think.parseConfig.call(this.options, think.config('redis'), {\n      command: name,\n      from: 'session'\n    });\n    this.timeout = options.timeout || this.timeout;\n    return RedisSocket.getInstance(options, thinkCache.REDIS, ['command', 'from']);\n  };\n  /**\n   * get session\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.getData = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var instance, data;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.data) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt('return', this.data);\n\n            case 2:\n              instance = this.getRedisInstance('get');\n              _context.next = 5;\n              return think.await('session_' + this.cookie, function () {\n                return instance.get(_this2.cookie);\n              });\n\n            case 5:\n              data = _context.sent;\n\n              if (!this.data) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt('return', this.data);\n\n            case 8:\n\n              this.data = {};\n              try {\n                this.data = JSON.parse(data) || {};\n              } catch (e) {}\n\n              return _context.abrupt('return', this.data);\n\n            case 11:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getData() {\n      return _ref.apply(this, arguments);\n    }\n\n    return getData;\n  }();\n  /**\n   * get data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.get = function get(name) {\n    var _this3 = this;\n\n    return this.getData().then(function () {\n      return !name ? _this3.data : _this3.data[name];\n    });\n  };\n  /**\n   * set data\n   * @param {String} name    []\n   * @param {Mixed} value   []\n   * @param {Number} timeout []\n   */\n\n\n  _class.prototype.set = function set(name, value, timeout) {\n    var _this4 = this;\n\n    if (timeout) {\n      this.timeout = timeout;\n    }\n    return this.getData().then(function () {\n      _this4.data[name] = value;\n    });\n  };\n  /**\n   * delete data\n   * @param  {String} name []\n   * @return {Promise}      []\n   */\n\n\n  _class.prototype.delete = function _delete(name) {\n    var _this5 = this;\n\n    return this.getData().then(function () {\n      if (name) {\n        delete _this5.data[name];\n      } else {\n        _this5.data = {};\n      }\n    });\n  };\n  /**\n   * flush data\n   * @return {Promise} []\n   */\n\n\n  _class.prototype.flush = function flush() {\n    var _this6 = this;\n\n    return this.getData().then(function () {\n      var instance = _this6.getRedisInstance('set');\n      return instance.set(_this6.cookie, (0, _stringify2.default)(_this6.data), _this6.timeout);\n    });\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/socket/mariadb.js":"\"use strict\";","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/template/base.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * template base class\n * @type {Class}\n */\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * merge config\n   * @param  {Object} defaultConf []\n   * @param  {Object} extraConf   []\n   * @return {}             []\n   */\n  _class.prototype.parseConfig = function parseConfig(defaultConf, extraConf) {\n    var config = think.parseConfig(think.extend({}, defaultConf, think.config('view'), extraConf));\n    //compatibility with view.options\n    if (!think.isEmpty(config.options)) {\n      think.log('view.options is deprecated, use view.adapter.' + config.type + ' instead', 'WARNING');\n      config = think.extend(config, config.options);\n    }\n    return config;\n  };\n  /**\n   * pre render\n   * @param  {Object}    config []\n   * @param  {...[type]} args   []\n   * @return {}           []\n   */\n\n\n  _class.prototype.prerender = function prerender() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (think.isFunction(config.prerender)) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      config.prerender.apply(config, args);\n    }\n  };\n  /**\n   * get template file content\n   * @return {} []\n   */\n\n\n  _class.prototype.getContent = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(file) {\n      var stat, mTime, fileCache;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return think.promisify(_fs2.default.stat, _fs2.default)(file);\n\n            case 2:\n              stat = _context.sent;\n              mTime = stat.mtime.getTime();\n              fileCache = thinkCache(thinkCache.VIEW_CONTENT, file);\n\n              if (!(fileCache && fileCache[0] >= mTime)) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt('return', fileCache[1]);\n\n            case 7:\n              return _context.abrupt('return', think.await('template_' + file, function () {\n                var fn = think.promisify(_fs2.default.readFile, _fs2.default);\n                return fn(file, 'utf8');\n              }).then(function (content) {\n                //if content is empty, not cached\n                if (!content) {\n                  return content;\n                }\n                thinkCache(thinkCache.VIEW_CONTENT, file, [mTime, content]);\n                return content;\n              }));\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function getContent(_x2) {\n      return _ref.apply(this, arguments);\n    }\n\n    return getContent;\n  }();\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {promise}             []\n   */\n\n\n  _class.prototype.run = function run(templateFile) {\n    return this.getContent(templateFile);\n  };\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/template/ejs.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * ejs template\n * @type {Class}\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {Promise}             []\n   */\n  _class.prototype.run = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(templateFile, tVar, config) {\n      var options, ejs, content;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = this.parseConfig({\n                filename: templateFile,\n                cache: true\n              }, config);\n              _context.next = 3;\n              return think.npm('ejs');\n\n            case 3:\n              ejs = _context.sent;\n\n\n              this.prerender(options, ejs);\n\n              _context.next = 7;\n              return this.getContent(templateFile);\n\n            case 7:\n              content = _context.sent;\n              return _context.abrupt('return', ejs.compile(content, options)(tVar));\n\n            case 9:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function run(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    }\n\n    return run;\n  }();\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/template/jade.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * jade template\n * @type {Class}\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {Promise}             []\n   */\n  _class.prototype.run = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(templateFile, tVar, config) {\n      var options, jade, _compile, content, compile;\n\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = this.parseConfig({\n                filename: templateFile\n              }, config);\n              _context.next = 3;\n              return think.npm('jade');\n\n            case 3:\n              jade = _context.sent;\n\n\n              this.prerender(options, jade);\n\n              if (!options.cache_compile) {\n                _context.next = 9;\n                break;\n              }\n\n              _compile = thinkCache(thinkCache.VIEW_CONTENT, templateFile + '-compile');\n\n              if (!_compile) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt('return', _compile(tVar));\n\n            case 9:\n              _context.next = 11;\n              return this.getContent(templateFile);\n\n            case 11:\n              content = _context.sent;\n              compile = jade.compile(content, options);\n\n\n              if (options.cache_compile) {\n                thinkCache(thinkCache.VIEW_CONTENT, templateFile + '-compile', compile);\n              }\n\n              return _context.abrupt('return', compile(tVar));\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function run(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    }\n\n    return run;\n  }();\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/template/nunjucks.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * nunjucks template\n * @type {Class}\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @param  {String} templateFile []\n   * @param  {Object} tVar         []\n   * @return {Promise}             []\n   */\n  _class.prototype.run = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(templateFile, tVar, config) {\n      var options, nunjucks, env, fn;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = this.parseConfig({\n                autoescape: true,\n                watch: false,\n                noCache: false,\n                throwOnUndefined: false\n              }, config);\n              _context.next = 3;\n              return think.npm('nunjucks');\n\n            case 3:\n              nunjucks = _context.sent;\n              env = void 0;\n\n              if (options.root_path) {\n                //if templateFile not start with root_path, can not set root_path\n                if (_path2.default.isAbsolute(templateFile) && templateFile.indexOf(options.root_path) !== 0) {\n                  env = nunjucks.configure(options);\n                } else {\n                  env = nunjucks.configure(options.root_path, options);\n                }\n              } else {\n                env = nunjucks.configure(options);\n              }\n\n              env.addGlobal('think', think);\n              env.addGlobal('JSON', JSON);\n              env.addGlobal('eval', eval);\n\n              this.prerender(options, nunjucks, env);\n\n              fn = think.promisify(nunjucks.render);\n              return _context.abrupt('return', fn(templateFile, tVar));\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function run(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    }\n\n    return run;\n  }();\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/template/swig.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * swig template\n * @type {Class}\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @param  {String} templateFile [template filepath]\n   * @param  {Object} tVar         [data]\n   * @return {String}              []\n   */\n  _class.prototype.run = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(templateFile, tVar, config) {\n      var options, swig, tpl;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = this.parseConfig({\n                autoescape: true\n              }, config);\n              _context.next = 3;\n              return think.npm('swig');\n\n            case 3:\n              swig = _context.sent;\n\n\n              swig.setDefaults(options);\n              this.prerender(options, swig);\n\n              tpl = swig.compileFile(templateFile);\n              return _context.abrupt('return', tpl(tVar));\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function run(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    }\n\n    return run;\n  }();\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/websocket/base.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _url = require('url');\n\nvar _url2 = _interopRequireDefault(_url);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _class = function (_think$adapter$base) {\n  (0, _inherits3.default)(_class, _think$adapter$base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _think$adapter$base.apply(this, arguments));\n  }\n\n  /**\n   * init\n   * @param  {Object} server []\n   * @param  {Object} config []\n   * @return {Object}        []\n   */\n  _class.prototype.init = function init(server, config, app) {\n    this.server = server;\n    this.config = config;\n    this.app = app;\n  };\n  /**\n   * check origin allowed\n   * @param  {String}  origin []\n   * @return {Boolean}        []\n   */\n\n\n  _class.prototype.isOriginAllowed = function isOriginAllowed(origin) {\n    var allowOrigins = this.config.allow_origin;\n    if (!allowOrigins) {\n      return true;\n    }\n    var info = _url2.default.parse(origin);\n    var hostname = info.hostname;\n    if (think.isString(allowOrigins)) {\n      return allowOrigins === hostname;\n    } else if (think.isArray(allowOrigins)) {\n      return allowOrigins.indexOf(hostname) > -1;\n    } else if (think.isFunction(allowOrigins)) {\n      return allowOrigins(hostname, info);\n    }\n    return false;\n  };\n  /**\n   * run\n   * @return {} []\n   */\n\n\n  _class.prototype.run = function run() {};\n\n  return _class;\n}(think.adapter.base);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/websocket/socket.io.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * websocket adapter for socket.io\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var socketio, io, allow_origin, messages;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return think.npm('socket.io');\n\n            case 2:\n              socketio = _context.sent;\n              io = socketio(this.server);\n\n              this.io = io;\n\n              //set io adapter, must be a function\n              //http://socket.io/docs/using-multiple-nodes/\n              if (this.config.adp) {\n                io.adapter(this.config.adp());\n              }\n\n              //Sets the path v under which engine.io and the static files will be served. Defaults to /socket.io.\n              if (this.config.path) {\n                io.path(this.config.path);\n              }\n\n              //Sets the allowed origins v. Defaults to any origins being allowed.\n              allow_origin = this.config.allow_origin;\n\n              if (allow_origin) {\n                io.origins(this.config.allow_origin);\n              }\n\n              //get message type\n              messages = think.isArray(this.config.messages) ? this.config.messages : [this.config.messages];\n\n              messages.forEach(function () {\n                var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n                var sc = v.namespace ? io.of(v.namespace) : io;\n                _this2.registerSocket(sc, v);\n              });\n\n            case 11:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function run() {\n      return _ref.apply(this, arguments);\n    }\n\n    return run;\n  }();\n\n  /**\n   * register namespace of socket, and support multi socket connect\n   * eg:\n   * export default {\n    messages:\n        [\n            {\n                namespace:'/payCount',\n                open: 'analysis/erp_pay/open',\n                close: 'analysis/erp_pay/close',\n                day: 'analysis/erp_pay/day',\n                updateFromMq: 'analysis/erp_pay/updateFromMq',\n            }\n        ]\n    };\n   * @param io\n   * @param messages\n     */\n\n\n  _class.prototype.registerSocket = function registerSocket(io, messages) {\n    var _this3 = this;\n\n    var msgKeys = (0, _keys2.default)(messages);\n    var open = messages.open;\n    delete messages.open;\n    var close = messages.close;\n    delete messages.close;\n\n    thinkCache(thinkCache.WEBSOCKET, io.sockets.sockets);\n\n    io.on('connection', function (socket) {\n\n      //open connection\n      if (open) {\n        _this3.message(open, undefined, socket);\n      }\n      //listen disonnection event\n      if (close) {\n        socket.on('disconnect', function () {\n          _this3.message(close, undefined, socket);\n        });\n      }\n\n      //listen list of message type\n      msgKeys.forEach(function (msgKey) {\n        socket.on(msgKey, function (msg) {\n          _this3.message(messages[msgKey], msg, socket);\n        });\n      });\n    });\n  };\n  /**\n   * emit socket data\n   * @param  {String} event []\n   * @param  {Mixed} data  []\n   * @return {}       []\n   */\n\n\n  _class.prototype.emit = function emit(event, data) {\n    return this.socket.emit(event, data);\n  };\n  /**\n   * broadcast socket data\n   * @param  {String} event       []\n   * @param  {Mixed} data        []\n   * @param  {Boolean} containSelf []\n   * @return {}             []\n   */\n\n\n  _class.prototype.broadcast = function broadcast(event, data, containSelf) {\n    if (containSelf) {\n      this.io.sockets.emit(event, data);\n    } else {\n      this.socket.broadcast.emit(event, data);\n    }\n  };\n  /**\n   * deal message\n   * @param  {String} url  []\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.message = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(url, data, socket) {\n      var request, http, instance;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              request = socket.request;\n\n              if (url[0] !== '/') {\n                url = '/' + url;\n              }\n              request.url = url;\n              http = void 0;\n              //socket.io c++ client发过来的requet没有res\n\n              if (request.res) {\n                _context2.next = 10;\n                break;\n              }\n\n              _context2.next = 7;\n              return think.http(url);\n\n            case 7:\n              http = _context2.sent;\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.next = 12;\n              return think.http(request, think.extend({}, request.res));\n\n            case 12:\n              http = _context2.sent;\n\n            case 13:\n              http.data = data;\n              http.socket = socket;\n              http.io = this.io;\n\n              http.socketEmit = this.emit;\n              http.socketBroadcast = this.broadcast;\n\n              instance = new this.app(http);\n              return _context2.abrupt('return', instance.run());\n\n            case 20:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function message(_x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return message;\n  }();\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/adapter/websocket/sockjs.js":"'use strict';\n\nexports.__esModule = true;\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _base = require('./base.js');\n\nvar _base2 = _interopRequireDefault(_base);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * websocket adapter for sockjs\n */\nvar _class = function (_Base) {\n  (0, _inherits3.default)(_class, _Base);\n\n  function _class() {\n    (0, _classCallCheck3.default)(this, _class);\n    return (0, _possibleConstructorReturn3.default)(this, _Base.apply(this, arguments));\n  }\n\n  /**\n   * run\n   * @return {} []\n   */\n  _class.prototype.run = function () {\n    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n      var _this2 = this;\n\n      var sockjs, options, sockjsServer, messages, open, close, path;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return think.npm('sockjs');\n\n            case 2:\n              sockjs = _context.sent;\n              options = {\n                log: function log() {}\n              };\n\n              if (this.config.sockjs_url) {\n                options.sockjs_url = this.config.sockjs_url;\n              }\n              sockjsServer = sockjs.createServer(options);\n\n              this.sockjs = sockjsServer;\n\n              //get message type\n              messages = think.extend({}, this.config.messages);\n              open = messages.open;\n\n              delete messages.open;\n              close = messages.close;\n\n              delete messages.close;\n\n              thinkCache(thinkCache.WEBSOCKET, []);\n\n              sockjsServer.on('connection', function (socket) {\n\n                _this2.addSocket(socket);\n\n                //open connection\n                if (open) {\n                  _this2.message(open, undefined, socket);\n                }\n\n                socket.on('close', function () {\n                  _this2.removeSocket(socket);\n\n                  if (close) {\n                    _this2.message(close, undefined, socket);\n                  }\n                });\n\n                //msg is {event: event, data: data}\n                socket.on('data', function (msg) {\n                  try {\n                    msg = JSON.parse(msg);\n                    if (msg.event && messages[msg.event]) {\n                      _this2.message(messages[msg.event], msg.data, socket);\n                    }\n                  } catch (e) {}\n                });\n              });\n\n              path = this.config.path || '/sockjs';\n\n              sockjsServer.installHandlers(this.server, { prefix: path });\n\n            case 16:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function run() {\n      return _ref.apply(this, arguments);\n    }\n\n    return run;\n  }();\n  /**\n   * add socket\n   * @param {Object} socket []\n   */\n\n\n  _class.prototype.addSocket = function addSocket(socket) {\n    var sockets = thinkCache(thinkCache.WEBSOCKET);\n    sockets.push(socket);\n  };\n  /**\n   * remove socket\n   * @param  {Object} socket []\n   * @return {}        []\n   */\n\n\n  _class.prototype.removeSocket = function removeSocket(socket) {\n    var sockets = thinkCache(thinkCache.WEBSOCKET);\n    sockets.some(function (item, index) {\n      if (item.id === socket.id) {\n        sockets.splice(index, 1);\n        return true;\n      }\n    });\n  };\n  /**\n   * emit data\n   * @param  {String} event []\n   * @param  {Mixed} data  []\n   * @return {}       []\n   */\n\n\n  _class.prototype.emit = function emit(event, data) {\n    this.socket.write((0, _stringify2.default)({ event: event, data: data }));\n  };\n  /**\n   * broadcast data\n   * @param  {String} event []\n   * @param  {Mixed} data  []\n   * @return {}       []\n   */\n\n\n  _class.prototype.broadcast = function broadcast(event, data, containSelf) {\n    var _this3 = this;\n\n    var sockets = thinkCache(thinkCache.WEBSOCKET);\n    sockets.forEach(function (socket) {\n      if (!containSelf && socket.id === _this3.socket.id) {\n        return;\n      }\n      socket.write((0, _stringify2.default)({ event: event, data: data }));\n    });\n  };\n  /**\n   * deal message\n   * @param  {String} url  []\n   * @param  {Mixed} data []\n   * @return {}      []\n   */\n\n\n  _class.prototype.message = function () {\n    var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(url, data, socket) {\n      var http, instance;\n      return _regenerator2.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (url[0] !== '/') {\n                url = '/' + url;\n              }\n\n              _context2.next = 3;\n              return think.http({\n                url: url,\n                headers: socket.headers,\n                ip: socket.remoteAddress\n              });\n\n            case 3:\n              http = _context2.sent;\n\n\n              http.data = data;\n              http.socket = socket;\n              http.sockjs = this.sockjs;\n\n              http.socketEmit = this.emit;\n              http.socketBroadcast = this.broadcast;\n\n              instance = new this.app(http);\n              return _context2.abrupt('return', instance.run());\n\n            case 11:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function message(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    }\n\n    return message;\n  }();\n\n  return _class;\n}(_base2.default);\n\nexports.default = _class;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/template/www/testing.js":"var thinkjs = require('thinkjs');\nvar path = require('path');\n\nvar rootPath = path.dirname(__dirname);\n\nvar instance = new thinkjs({\n  APP_PATH: rootPath + path.sep + 'app',\n  RUNTIME_PATH: rootPath + path.sep + 'runtime',\n  ROOT_PATH: rootPath,\n  RESOURCE_PATH: __dirname,\n  env: 'testing'\n});\n\ninstance.run();","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/env/production.js":"'use strict';\n/**\n * configs in production enviroment\n */\n\nexports.__esModule = true;\nvar configs = {\n  view: {\n    adapter: {\n      jade: {\n        cache_compile: true\n      }\n    }\n  }\n};\n\nif (think.cli) {\n  configs = think.extend(configs, {\n    gc: {\n      on: false\n    },\n    auto_reload: false,\n    process_timeout: 0\n  });\n}\n\nexports.default = configs;","/home/travis/build/npmtest/node-npmtest-thinkjs/node_modules/thinkjs/lib/config/env/testing.js":"'use strict';\n/**\n * configs in testing enviroment\n */\n\nexports.__esModule = true;\nvar configs = {};\n\nif (think.cli) {\n  configs = think.extend(configs, {\n    gc: {\n      on: false\n    },\n    auto_reload: false,\n    process_timeout: 0\n  });\n}\n\nexports.default = configs;"}